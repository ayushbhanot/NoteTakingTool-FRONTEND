{"ast":null,"code":"var _jsxFileName = \"/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/App.js\",\n  _s = $RefreshSig$();\n/*import React, { useState } from 'react';\nimport { startSpeechRecognition, stopSpeechRecognition } from './services/audioRecording'; // Adjust path as needed\n\nfunction App() {\n    const [isRecording, setIsRecording] = useState(false);\n\n    const handleStartRecording = async () => {\n        if (isRecording) return; // Prevent starting a new recording if one is already active\n        setIsRecording(true);\n        try {\n            await startSpeechRecognition();\n        } catch (error) {\n            console.error(\"Error starting speech recognition:\", error);\n            setIsRecording(false);\n        }\n    };\n\n    const handleStopRecording = async () => {\n        if (!isRecording) return; // Prevent stopping if no recording is active\n        try {\n            await stopSpeechRecognition();\n        } catch (error) {\n            console.error(\"Error stopping speech recognition:\", error);\n        } finally {\n            setIsRecording(false);\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>Zoom/Google Meet Audio Recorder</h1>\n            <button onClick={handleStartRecording} disabled={isRecording}>\n                Start Speech Recognition\n            </button>\n            <button onClick={handleStopRecording} disabled={!isRecording}>\n                Stop Speech Recognition\n            </button>\n        </div>\n    );\n}\n\nexport default App;\n*/\n/* COMMENTED OUT MEDIARECORDER-BASED HANDLERS */\nimport React, { useState } from 'react';\nimport NotesUI from './components/NotesUI';\nimport { startRecording, stopRecording, generateNotesFromTranscript } from './services/audioRecording';\nimport { sendTranscriptToBackend } from './services/noteService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [generatedNotes, setGeneratedNotes] = useState(null); // Here, setGeneratedNotes is defined.\n\n  const handleStartRecording = async () => {\n    setIsRecording(true);\n    await startRecording();\n  };\n  const handleStopRecording = async () => {\n    await stopRecording();\n    // Make sure to pass setGeneratedNotes here\n    await generateNotesFromTranscript(setGeneratedNotes); // Pass setGeneratedNotes to this function.\n    setIsRecording(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Audio Notes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStartRecording,\n      disabled: isRecording,\n      children: \"Start Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStopRecording,\n      disabled: !isRecording,\n      children: \"Stop Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), generatedNotes && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Generated Notes:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(generatedNotes, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"ghJnuSg4MXSMPcwPNQtiQJshQOg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","NotesUI","startRecording","stopRecording","generateNotesFromTranscript","sendTranscriptToBackend","jsxDEV","_jsxDEV","App","_s","isRecording","setIsRecording","generatedNotes","setGeneratedNotes","handleStartRecording","handleStopRecording","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/App.js"],"sourcesContent":["/*import React, { useState } from 'react';\nimport { startSpeechRecognition, stopSpeechRecognition } from './services/audioRecording'; // Adjust path as needed\n\nfunction App() {\n    const [isRecording, setIsRecording] = useState(false);\n\n    const handleStartRecording = async () => {\n        if (isRecording) return; // Prevent starting a new recording if one is already active\n        setIsRecording(true);\n        try {\n            await startSpeechRecognition();\n        } catch (error) {\n            console.error(\"Error starting speech recognition:\", error);\n            setIsRecording(false);\n        }\n    };\n\n    const handleStopRecording = async () => {\n        if (!isRecording) return; // Prevent stopping if no recording is active\n        try {\n            await stopSpeechRecognition();\n        } catch (error) {\n            console.error(\"Error stopping speech recognition:\", error);\n        } finally {\n            setIsRecording(false);\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>Zoom/Google Meet Audio Recorder</h1>\n            <button onClick={handleStartRecording} disabled={isRecording}>\n                Start Speech Recognition\n            </button>\n            <button onClick={handleStopRecording} disabled={!isRecording}>\n                Stop Speech Recognition\n            </button>\n        </div>\n    );\n}\n\nexport default App;\n*/\n/* COMMENTED OUT MEDIARECORDER-BASED HANDLERS */\nimport React, { useState } from 'react';\nimport NotesUI from './components/NotesUI';\nimport { startRecording, stopRecording, generateNotesFromTranscript } from './services/audioRecording';\nimport { sendTranscriptToBackend } from './services/noteService';\nfunction App() {\n    const [isRecording, setIsRecording] = useState(false);\n    const [generatedNotes, setGeneratedNotes] = useState(null);  // Here, setGeneratedNotes is defined.\n\n    const handleStartRecording = async () => {\n        setIsRecording(true);\n        await startRecording();\n    };\n\n    const handleStopRecording = async () => {\n        await stopRecording();\n        // Make sure to pass setGeneratedNotes here\n        await generateNotesFromTranscript(setGeneratedNotes);  // Pass setGeneratedNotes to this function.\n        setIsRecording(false);\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>Audio Notes</h1>\n            <button onClick={handleStartRecording} disabled={isRecording}>Start Recording</button>\n            <button onClick={handleStopRecording} disabled={!isRecording}>Stop Recording</button>\n\n            {/* Display generated notes */}\n            {generatedNotes && (\n                <div>\n                    <h2>Generated Notes:</h2>\n                    <pre>{JSON.stringify(generatedNotes, null, 2)}</pre>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default App;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,SAASC,cAAc,EAAEC,aAAa,EAAEC,2BAA2B,QAAQ,2BAA2B;AACtG,SAASC,uBAAuB,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACjE,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACY,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;;EAE7D,MAAMc,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACrCH,cAAc,CAAC,IAAI,CAAC;IACpB,MAAMT,cAAc,CAAC,CAAC;EAC1B,CAAC;EAED,MAAMa,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACpC,MAAMZ,aAAa,CAAC,CAAC;IACrB;IACA,MAAMC,2BAA2B,CAACS,iBAAiB,CAAC,CAAC,CAAE;IACvDF,cAAc,CAAC,KAAK,CAAC;EACzB,CAAC;EAED,oBACIJ,OAAA;IAAKS,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAChBV,OAAA;MAAAU,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpBd,OAAA;MAAQe,OAAO,EAAER,oBAAqB;MAACS,QAAQ,EAAEb,WAAY;MAAAO,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACtFd,OAAA;MAAQe,OAAO,EAAEP,mBAAoB;MAACQ,QAAQ,EAAE,CAACb,WAAY;MAAAO,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAGpFT,cAAc,iBACXL,OAAA;MAAAU,QAAA,gBACIV,OAAA;QAAAU,QAAA,EAAI;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzBd,OAAA;QAAAU,QAAA,EAAMO,IAAI,CAACC,SAAS,CAACb,cAAc,EAAE,IAAI,EAAE,CAAC;MAAC;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnD,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAACZ,EAAA,CA/BQD,GAAG;AAAAkB,EAAA,GAAHlB,GAAG;AAiCZ,eAAeA,GAAG;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}