{"ast":null,"code":"let isRecognitionRunning = false;\nlet finalTranscript = '';\nlet recognition;\nconst INTERIM_THRESHOLD = 20; // Set a character length threshold for interim transcript\nlet lastLoggedInterimTranscript = ''; // Store the last logged interim transcript to compare\nlet lastRecognitionTime = Date.now(); // Track the last time recognition received results\nlet logCount = 0;\nconst TIMEOUT_DURATION = 8000; // 8 seconds timeout for checking if recognition is stuck\nconst CHECK_INTERVAL = 3000; // Check every 3 seconds to see if recognition is still working\n\n// Monitor if speech recognition has stopped responding\nfunction monitorRecognitionTimeout() {\n  setInterval(() => {\n    const currentTime = Date.now();\n    if (isRecognitionRunning && currentTime - lastRecognitionTime > TIMEOUT_DURATION) {\n      logWithLimit('No new recognition results for a while. Force restarting recognition...');\n      recognition.stop();\n      setTimeout(() => {\n        if (isRecognitionRunning) {\n          recognition.start();\n        }\n      }, 500); // Short delay before restarting\n    }\n  }, CHECK_INTERVAL);\n}\nfunction logWithLimit(message) {\n  const timestamp = new Date().toISOString();\n  logCount++;\n  if (logCount % 50 === 0) {\n    // Clear console after every 50 logs\n    console.clear();\n  }\n  console.log(`[${timestamp}] ${message}`);\n}\n\n// Function to request microphone permission\nasync function requestMicPermission() {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    logWithLimit('Microphone permission granted');\n    stream.getTracks().forEach(track => track.stop());\n    return true;\n  } catch (error) {\n    logWithLimit('Microphone permission denied: ' + error);\n    alert('Microphone access is required for speech recognition.');\n    return false;\n  }\n}\nfunction saveTranscriptToFile(transcript) {\n  const blob = new Blob([transcript], {\n    type: 'text/plain'\n  });\n  const link = document.createElement('a');\n  link.href = window.URL.createObjectURL(blob);\n  link.download = 'transcript.txt';\n  link.click();\n}\n\n// Initialize WebkitSpeechRecognition or fallback\nfunction initializeRecognition() {\n  window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  if (!window.SpeechRecognition) {\n    logWithLimit('Speech recognition API not supported in this browser.');\n    alert('Your browser does not support speech recognition.');\n    return;\n  }\n  recognition = new window.SpeechRecognition(); // Fallback to webkit if available\n  recognition.continuous = true; // Allow continuous recognition\n  recognition.interimResults = true; // Capture partial results for real-time updates\n  recognition.lang = 'en-US'; // Set recognition language\n\n  recognition.onresult = event => {\n    logWithLimit(\"Recognition received results:\");\n    let interimTranscript = '';\n    lastRecognitionTime = Date.now(); // Reset the timeout when a new result is received\n\n    for (let i = event.resultIndex; i < event.results.length; i++) {\n      const result = event.results[i];\n      if (result.isFinal) {\n        finalTranscript += result[0].transcript;\n        logWithLimit('Final Transcript So Far: ' + finalTranscript);\n      } else {\n        interimTranscript += result[0].transcript;\n      }\n    }\n    if (interimTranscript.length >= INTERIM_THRESHOLD) {\n      logWithLimit('Interim Transcript: ' + interimTranscript);\n      lastLoggedInterimTranscript = interimTranscript;\n    }\n  };\n  let recognitionRestarting = false; // New flag to prevent overlapping restarts\n\n  recognition.onend = () => {\n    logWithLimit('Speech recognition ended.');\n\n    // Only restart recognition if it's supposed to be running and isn't already restarting\n    if (isRecognitionRunning && !recognitionRestarting) {\n      recognitionRestarting = true; // Set the flag to prevent multiple restarts\n      logWithLimit('Waiting a moment before restarting speech recognition...');\n      setTimeout(() => {\n        if (isRecognitionRunning) {\n          logWithLimit('Restarting speech recognition...');\n          recognition.start(); // Automatically restart recognition\n          recognitionRestarting = false; // Reset the flag after restarting\n        }\n      }, 1000); // Short delay before restarting\n    }\n  };\n  recognition.onerror = event => {\n    logWithLimit('Speech Recognition Error: ' + event.error);\n    if (event.error === 'no-speech') {\n      logWithLimit('No speech detected.');\n      setTimeout(() => {\n        if (!isRecognitionRunning) {\n          startSpeechRecognition();\n        }\n      }, 1000);\n    }\n    if (event.error === 'audio-capture') {\n      alert('Please check your microphone permissions.');\n    }\n    if (event.error === 'aborted' || event.error === 'network') {\n      logWithLimit('Speech recognition was aborted or there was a network issue.');\n      if (!recognitionRestarting) {\n        recognitionRestarting = true; // Prevent multiple restarts\n        setTimeout(() => {\n          if (isRecognitionRunning) {\n            logWithLimit('Attempting to restart speech recognition after error...');\n            recognition.start(); // Restart if not already running\n            recognitionRestarting = false; // Reset flag after restarting\n          }\n        }, 1000);\n      }\n    }\n  };\n}\n\n// Start speech recognition function\nexport async function startSpeechRecognition() {\n  const permissionGranted = await requestMicPermission();\n  if (!permissionGranted) return;\n  if (isRecognitionRunning) {\n    logWithLimit(\"Speech recognition is already running.\");\n    return;\n  }\n  finalTranscript = '';\n  initializeRecognition();\n  if (!recognition) return; // Exit if recognition could not be initialized\n\n  try {\n    recognition.start();\n    isRecognitionRunning = true;\n    logWithLimit('Speech recognition started.');\n    lastRecognitionTime = Date.now(); // Initialize the recognition timer\n    monitorRecognitionTimeout(); // Start monitoring for timeouts\n  } catch (error) {\n    logWithLimit('Error starting speech recognition: ' + error);\n  }\n}\n\n// Stop speech recognition function (and send transcript)\nexport function stopSpeechRecognition() {\n  if (!isRecognitionRunning) {\n    logWithLimit(\"Speech recognition is not running.\");\n    return;\n  }\n  logWithLimit('Stopping speech recognition...');\n  recognition.stop();\n  isRecognitionRunning = false;\n  if (finalTranscript) {\n    logWithLimit('Sending final transcript to backend.');\n    processTranscript(finalTranscript);\n    saveTranscriptToFile(finalTranscript);\n    finalTranscript = '';\n  }\n}\n\n// Process the final transcript and send to backend\nexport const processTranscript = async transcript => {\n  try {\n    const response = await fetch('http://localhost:3001/generateNotes', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        transcript\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Server error: ${response.status}`);\n    }\n    const result = await response.json();\n    logWithLimit('Generated notes: ' + JSON.stringify(result));\n  } catch (error) {\n    logWithLimit('Error sending transcript to backend: ' + error);\n  }\n};","map":{"version":3,"names":["isRecognitionRunning","finalTranscript","recognition","INTERIM_THRESHOLD","lastLoggedInterimTranscript","lastRecognitionTime","Date","now","logCount","TIMEOUT_DURATION","CHECK_INTERVAL","monitorRecognitionTimeout","setInterval","currentTime","logWithLimit","stop","setTimeout","start","message","timestamp","toISOString","console","clear","log","requestMicPermission","stream","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","track","error","alert","saveTranscriptToFile","transcript","blob","Blob","type","link","document","createElement","href","window","URL","createObjectURL","download","click","initializeRecognition","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","interimTranscript","i","resultIndex","results","length","result","isFinal","recognitionRestarting","onend","onerror","startSpeechRecognition","permissionGranted","stopSpeechRecognition","processTranscript","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","json"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["let isRecognitionRunning = false;\nlet finalTranscript = ''; \nlet recognition;\nconst INTERIM_THRESHOLD = 20;  // Set a character length threshold for interim transcript\nlet lastLoggedInterimTranscript = '';  // Store the last logged interim transcript to compare\nlet lastRecognitionTime = Date.now();  // Track the last time recognition received results\nlet logCount = 0;\n\nconst TIMEOUT_DURATION = 8000;  // 8 seconds timeout for checking if recognition is stuck\nconst CHECK_INTERVAL = 3000;  // Check every 3 seconds to see if recognition is still working\n\n// Monitor if speech recognition has stopped responding\nfunction monitorRecognitionTimeout() {\n    setInterval(() => {\n        const currentTime = Date.now();\n        if (isRecognitionRunning && (currentTime - lastRecognitionTime > TIMEOUT_DURATION)) {\n            logWithLimit('No new recognition results for a while. Force restarting recognition...');\n            recognition.stop();\n            setTimeout(() => {\n                if (isRecognitionRunning) {\n                    recognition.start();\n                }\n            }, 500);  // Short delay before restarting\n        }\n    }, CHECK_INTERVAL);\n}\n\nfunction logWithLimit(message) {\n    const timestamp = new Date().toISOString();\n    logCount++;\n\n    if (logCount % 50 === 0) {  // Clear console after every 50 logs\n        console.clear();\n    }\n\n    console.log(`[${timestamp}] ${message}`);\n}\n\n// Function to request microphone permission\nasync function requestMicPermission() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        logWithLimit('Microphone permission granted');\n        stream.getTracks().forEach(track => track.stop());  \n        return true;\n    } catch (error) {\n        logWithLimit('Microphone permission denied: ' + error);\n        alert('Microphone access is required for speech recognition.');\n        return false;\n    }\n}\n\nfunction saveTranscriptToFile(transcript) {\n    const blob = new Blob([transcript], { type: 'text/plain' });\n    const link = document.createElement('a');\n    link.href = window.URL.createObjectURL(blob);\n    link.download = 'transcript.txt';\n    link.click();\n}\n\n// Initialize WebkitSpeechRecognition or fallback\nfunction initializeRecognition() {\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n\n    if (!window.SpeechRecognition) {\n        logWithLimit('Speech recognition API not supported in this browser.');\n        alert('Your browser does not support speech recognition.');\n        return;\n    }\n\n    recognition = new window.SpeechRecognition();  // Fallback to webkit if available\n    recognition.continuous = true;  // Allow continuous recognition\n    recognition.interimResults = true;  // Capture partial results for real-time updates\n    recognition.lang = 'en-US';  // Set recognition language\n\n    recognition.onresult = (event) => {\n        logWithLimit(\"Recognition received results:\");\n        let interimTranscript = '';\n        lastRecognitionTime = Date.now();  // Reset the timeout when a new result is received\n\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n            const result = event.results[i];\n            if (result.isFinal) {\n                finalTranscript += result[0].transcript;\n                logWithLimit('Final Transcript So Far: ' + finalTranscript);\n            } else {\n                interimTranscript += result[0].transcript;\n            }\n        }\n\n        if (interimTranscript.length >= INTERIM_THRESHOLD) {\n            logWithLimit('Interim Transcript: ' + interimTranscript);\n            lastLoggedInterimTranscript = interimTranscript;\n        }\n    };\n\n    let recognitionRestarting = false;  // New flag to prevent overlapping restarts\n\n    recognition.onend = () => {\n        logWithLimit('Speech recognition ended.');\n    \n        // Only restart recognition if it's supposed to be running and isn't already restarting\n        if (isRecognitionRunning && !recognitionRestarting) {\n            recognitionRestarting = true;  // Set the flag to prevent multiple restarts\n            logWithLimit('Waiting a moment before restarting speech recognition...');\n            setTimeout(() => {\n                if (isRecognitionRunning) {\n                    logWithLimit('Restarting speech recognition...');\n                    recognition.start();  // Automatically restart recognition\n                    recognitionRestarting = false;  // Reset the flag after restarting\n                }\n            }, 1000);  // Short delay before restarting\n        }\n    };\n    \n    recognition.onerror = (event) => {\n        logWithLimit('Speech Recognition Error: ' + event.error);\n        \n        if (event.error === 'no-speech') {\n            logWithLimit('No speech detected.');\n            setTimeout(() => {\n                if (!isRecognitionRunning) {\n                    startSpeechRecognition();\n                }\n            }, 1000);\n        }\n    \n        if (event.error === 'audio-capture') {\n            alert('Please check your microphone permissions.');\n        }\n    \n        if (event.error === 'aborted' || event.error === 'network') {\n            logWithLimit('Speech recognition was aborted or there was a network issue.');\n            if (!recognitionRestarting) {\n                recognitionRestarting = true;  // Prevent multiple restarts\n                setTimeout(() => {\n                    if (isRecognitionRunning) {\n                        logWithLimit('Attempting to restart speech recognition after error...');\n                        recognition.start();  // Restart if not already running\n                        recognitionRestarting = false;  // Reset flag after restarting\n                    }\n                }, 1000);\n            }\n        }\n    };\n}    \n\n// Start speech recognition function\nexport async function startSpeechRecognition() {\n    const permissionGranted = await requestMicPermission();  \n    if (!permissionGranted) return;\n\n    if (isRecognitionRunning) {\n        logWithLimit(\"Speech recognition is already running.\");\n        return;\n    }\n\n    finalTranscript = '';  \n    initializeRecognition();  \n    if (!recognition) return;  // Exit if recognition could not be initialized\n\n    try {\n        recognition.start();  \n        isRecognitionRunning = true;  \n        logWithLimit('Speech recognition started.');\n        lastRecognitionTime = Date.now();  // Initialize the recognition timer\n        monitorRecognitionTimeout();  // Start monitoring for timeouts\n    } catch (error) {\n        logWithLimit('Error starting speech recognition: ' + error);\n    }\n}\n\n// Stop speech recognition function (and send transcript)\nexport function stopSpeechRecognition() {\n    if (!isRecognitionRunning) {\n        logWithLimit(\"Speech recognition is not running.\");\n        return;\n    }\n    logWithLimit('Stopping speech recognition...');\n    recognition.stop();  \n    isRecognitionRunning = false;  \n\n    if (finalTranscript) {\n        logWithLimit('Sending final transcript to backend.');\n        processTranscript(finalTranscript); \n        saveTranscriptToFile(finalTranscript);\n        finalTranscript = '';  \n    }\n}\n\n// Process the final transcript and send to backend\nexport const processTranscript = async (transcript) => {\n    try {\n        const response = await fetch('http://localhost:3001/generateNotes', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ transcript }),  \n        });\n\n        if (!response.ok) {\n            throw new Error(`Server error: ${response.status}`);\n        }\n\n        const result = await response.json();\n        logWithLimit('Generated notes: ' + JSON.stringify(result));  \n    } catch (error) {\n        logWithLimit('Error sending transcript to backend: ' + error);  \n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}