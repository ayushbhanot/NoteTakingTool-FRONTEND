{"ast":null,"code":"import React,{useState}from'react';import axios from'axios';import NotesUI from'./components/NotesUI';import{startSpeechRecognition,stopRecognition,getFinalTranscript,resetTranscript}from'./services/audioRecording';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[isRecording,setIsRecording]=useState(false);const[generatedNotes,setGeneratedNotes]=useState({});const handleStartRecording=async()=>{if(isRecording)return;setIsRecording(true);try{await startSpeechRecognition();}catch(error){console.error(\"Error starting speech recognition:\",error);setIsRecording(false);}};const handleReset=()=>{resetTranscript();// Manually reset the transcript\n};const handleStopRecording=async()=>{try{console.log(\"Stopping recognition...\");stopRecognition();setIsRecording(false);// Disable stop button after stopping\nconst finalTranscript=getFinalTranscript();if(!finalTranscript.trim()){console.log(\"Final transcript is empty. Not sending to server.\");return;// Exit if no transcript exists\n}console.log(\"Sending final transcript to server:\",finalTranscript);// Send the transcript to the backend for note generation\nconst response=await axios.post('http://localhost:3001/transcribe',{transcript:finalTranscript});const notes=response.data.notes;console.log(\"Received notes:\",notes);setGeneratedNotes(notes);// Pass the notes to your NotesUI component\n}catch(error){console.error(\"Error stopping speech recognition or sending transcript:\",error);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Speech to Notes\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleStartRecording,disabled:isRecording,children:\"Start Recording\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleStopRecording,disabled:!isRecording,children:\"Stop Recording\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleReset,children:\"Reset\"}),/*#__PURE__*/_jsx(NotesUI,{notes:generatedNotes}),\" \"]});}export default App;","map":{"version":3,"names":["React","useState","axios","NotesUI","startSpeechRecognition","stopRecognition","getFinalTranscript","resetTranscript","jsx","_jsx","jsxs","_jsxs","App","isRecording","setIsRecording","generatedNotes","setGeneratedNotes","handleStartRecording","error","console","handleReset","handleStopRecording","log","finalTranscript","trim","response","post","transcript","notes","data","className","children","onClick","disabled"],"sources":["/Users/ayushbhanot/Documents/Coding/SideProjects/SideProject-AITranscriptionApp/sideproj-aitranscriptionapp/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport NotesUI from './components/NotesUI';\nimport { startSpeechRecognition, stopRecognition, getFinalTranscript, resetTranscript } from './services/audioRecording';\n\nfunction App() {\n    const [isRecording, setIsRecording] = useState(false);\n    const [generatedNotes, setGeneratedNotes] = useState({});\n\n    const handleStartRecording = async () => {\n        if (isRecording) return;\n        setIsRecording(true);\n        try {\n            await startSpeechRecognition();\n        } catch (error) {\n            console.error(\"Error starting speech recognition:\", error);\n            setIsRecording(false);\n        }\n    };\n    const handleReset = () => {\n        resetTranscript();  // Manually reset the transcript\n    };\n    const handleStopRecording = async () => {\n        try {\n            console.log(\"Stopping recognition...\");\n            stopRecognition();\n            setIsRecording(false); // Disable stop button after stopping\n\n            const finalTranscript = getFinalTranscript();\n\n            if (!finalTranscript.trim()) {\n                console.log(\"Final transcript is empty. Not sending to server.\");\n                return; // Exit if no transcript exists\n            }\n\n            console.log(\"Sending final transcript to server:\", finalTranscript);\n\n            // Send the transcript to the backend for note generation\n            const response = await axios.post('http://localhost:3001/transcribe', { transcript: finalTranscript });\n            const notes = response.data.notes;\n\n            console.log(\"Received notes:\", notes);\n            setGeneratedNotes(notes);  // Pass the notes to your NotesUI component\n        } catch (error) {\n            console.error(\"Error stopping speech recognition or sending transcript:\", error);\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>Speech to Notes</h1>\n            <button onClick={handleStartRecording} disabled={isRecording}>\n                Start Recording\n            </button>\n            <button onClick={handleStopRecording} disabled={!isRecording}>\n                Stop Recording\n            </button>\n            <button onClick={handleReset}>Reset</button>\n            <NotesUI notes={generatedNotes} /> {/* Pass generated notes to your NotesUI */}\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,CAAAC,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,OAAO,KAAM,sBAAsB,CAC1C,OAASC,sBAAsB,CAAEC,eAAe,CAAEC,kBAAkB,CAAEC,eAAe,KAAQ,2BAA2B,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEzH,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACX,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGb,QAAQ,CAAC,KAAK,CAAC,CACrD,KAAM,CAACc,cAAc,CAAEC,iBAAiB,CAAC,CAAGf,QAAQ,CAAC,CAAC,CAAC,CAAC,CAExD,KAAM,CAAAgB,oBAAoB,CAAG,KAAAA,CAAA,GAAY,CACrC,GAAIJ,WAAW,CAAE,OACjBC,cAAc,CAAC,IAAI,CAAC,CACpB,GAAI,CACA,KAAM,CAAAV,sBAAsB,CAAC,CAAC,CAClC,CAAE,MAAOc,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,oCAAoC,CAAEA,KAAK,CAAC,CAC1DJ,cAAc,CAAC,KAAK,CAAC,CACzB,CACJ,CAAC,CACD,KAAM,CAAAM,WAAW,CAAGA,CAAA,GAAM,CACtBb,eAAe,CAAC,CAAC,CAAG;AACxB,CAAC,CACD,KAAM,CAAAc,mBAAmB,CAAG,KAAAA,CAAA,GAAY,CACpC,GAAI,CACAF,OAAO,CAACG,GAAG,CAAC,yBAAyB,CAAC,CACtCjB,eAAe,CAAC,CAAC,CACjBS,cAAc,CAAC,KAAK,CAAC,CAAE;AAEvB,KAAM,CAAAS,eAAe,CAAGjB,kBAAkB,CAAC,CAAC,CAE5C,GAAI,CAACiB,eAAe,CAACC,IAAI,CAAC,CAAC,CAAE,CACzBL,OAAO,CAACG,GAAG,CAAC,mDAAmD,CAAC,CAChE,OAAQ;AACZ,CAEAH,OAAO,CAACG,GAAG,CAAC,qCAAqC,CAAEC,eAAe,CAAC,CAEnE;AACA,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAvB,KAAK,CAACwB,IAAI,CAAC,kCAAkC,CAAE,CAAEC,UAAU,CAAEJ,eAAgB,CAAC,CAAC,CACtG,KAAM,CAAAK,KAAK,CAAGH,QAAQ,CAACI,IAAI,CAACD,KAAK,CAEjCT,OAAO,CAACG,GAAG,CAAC,iBAAiB,CAAEM,KAAK,CAAC,CACrCZ,iBAAiB,CAACY,KAAK,CAAC,CAAG;AAC/B,CAAE,MAAOV,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,0DAA0D,CAAEA,KAAK,CAAC,CACpF,CACJ,CAAC,CAED,mBACIP,KAAA,QAAKmB,SAAS,CAAC,KAAK,CAAAC,QAAA,eAChBtB,IAAA,OAAAsB,QAAA,CAAI,iBAAe,CAAI,CAAC,cACxBtB,IAAA,WAAQuB,OAAO,CAAEf,oBAAqB,CAACgB,QAAQ,CAAEpB,WAAY,CAAAkB,QAAA,CAAC,iBAE9D,CAAQ,CAAC,cACTtB,IAAA,WAAQuB,OAAO,CAAEX,mBAAoB,CAACY,QAAQ,CAAE,CAACpB,WAAY,CAAAkB,QAAA,CAAC,gBAE9D,CAAQ,CAAC,cACTtB,IAAA,WAAQuB,OAAO,CAAEZ,WAAY,CAAAW,QAAA,CAAC,OAAK,CAAQ,CAAC,cAC5CtB,IAAA,CAACN,OAAO,EAACyB,KAAK,CAAEb,cAAe,CAAE,CAAC,IAAC,EAClC,CAAC,CAEd,CAEA,cAAe,CAAAH,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}