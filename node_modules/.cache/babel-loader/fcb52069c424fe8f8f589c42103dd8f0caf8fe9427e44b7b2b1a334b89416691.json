{"ast":null,"code":"// Function to check WebkitSpeechRecognition support\nfunction checkSpeechRecognitionSupport() {\n  window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  if (!window.SpeechRecognition) {\n    console.error('SpeechRecognition API not supported.');\n    alert('Your browser does not support speech recognition features.');\n    return false;\n  }\n  return true;\n}\n\n// Check for WebkitSpeechRecognition support early\nif (!checkSpeechRecognitionSupport()) {\n  alert('Your browser does not support the necessary speech recognition features.');\n}\n\n// Initialize WebkitSpeechRecognition\nconst recognition = new window.SpeechRecognition();\nrecognition.continuous = true;\nrecognition.interimResults = true; // Set to true to capture partial results\nrecognition.lang = 'en-US';\nlet isRecognitionRunning = false;\nlet finalTranscript = ''; // Store final transcript globally\n\n// Function to request microphone permission\nasync function requestMicPermission() {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    console.log('Microphone permission granted');\n    stream.getTracks().forEach(track => track.stop()); // Stop the stream immediately\n    return true;\n  } catch (error) {\n    console.error('Microphone permission denied:', error);\n    alert('Microphone access is required for speech recognition.');\n    return false;\n  }\n}\n\n// Start speech recognition function\nexport async function startSpeechRecognition() {\n  const permissionGranted = await requestMicPermission(); // Ensure permission is granted\n  if (!permissionGranted) return;\n  if (isRecognitionRunning) {\n    console.error(\"Speech recognition is already running.\");\n    return;\n  }\n  try {\n    finalTranscript = ''; // Clear transcript on new session\n    recognition.start();\n    isRecognitionRunning = true;\n    console.log('Speech recognition started.');\n  } catch (error) {\n    console.error('Error starting speech recognition:', error);\n  }\n}\n\n// Stop speech recognition function\nexport function stopSpeechRecognition() {\n  if (!isRecognitionRunning) {\n    console.error(\"Speech recognition is not running.\");\n    return;\n  }\n  console.log('Stopping speech recognition...');\n  recognition.stop();\n}\n\n// Handle when recognition ends\nrecognition.onend = () => {\n  isRecognitionRunning = false;\n  console.log('Speech recognition stopped.');\n\n  // Send the final transcript to backend for transcription when stopped\n  if (finalTranscript) {\n    processTranscript(finalTranscript); // Send final transcript to backend\n  } else {\n    console.error(\"No transcript available to send.\");\n  }\n};\n\n// Process the transcript and send to backend\nexport const processTranscript = async transcript => {\n  try {\n    // Send as JSON, not FormData, because the backend likely expects a JSON payload\n    const response = await fetch('http://localhost:3001/generateNotes', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        transcript\n      }) // Send the transcript as JSON\n    });\n    if (!response.ok) {\n      throw new Error(`Server error: ${response.status}`);\n    }\n    const result = await response.json();\n    console.log('Generated notes:', result);\n  } catch (error) {\n    console.error('Error sending transcript to backend:', error);\n  }\n};\n\n// Event handler for when recognition results are available\nrecognition.onresult = event => {\n  let interimTranscript = '';\n  for (let i = event.resultIndex; i < event.results.length; i++) {\n    const result = event.results[i];\n    if (result.isFinal) {\n      finalTranscript += result[0].transcript;\n    } else {\n      interimTranscript += result[0].transcript;\n    }\n  }\n  console.log('Interim Transcript:', interimTranscript);\n  console.log('Final Transcript:', finalTranscript); // Only append the final result once\n};\n\n// Handle errors in recognition\nrecognition.onerror = event => {\n  console.error('Speech Recognition Error:', event.error);\n  if (event.error === 'no-speech') {\n    alert('No speech detected. Please try again.');\n    setTimeout(() => {\n      startSpeechRecognition();\n    }, 1000);\n  }\n  if (event.error === 'audio-capture') {\n    alert('Please check your microphone permissions.');\n  }\n};","map":{"version":3,"names":["checkSpeechRecognitionSupport","window","SpeechRecognition","webkitSpeechRecognition","console","error","alert","recognition","continuous","interimResults","lang","isRecognitionRunning","finalTranscript","requestMicPermission","stream","navigator","mediaDevices","getUserMedia","audio","log","getTracks","forEach","track","stop","startSpeechRecognition","permissionGranted","start","stopSpeechRecognition","onend","processTranscript","transcript","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","result","json","onresult","event","interimTranscript","i","resultIndex","results","length","isFinal","onerror","setTimeout"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["// Function to check WebkitSpeechRecognition support\nfunction checkSpeechRecognitionSupport() {\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!window.SpeechRecognition) {\n        console.error('SpeechRecognition API not supported.');\n        alert('Your browser does not support speech recognition features.');\n        return false;\n    }\n    return true;\n}\n\n// Check for WebkitSpeechRecognition support early\nif (!checkSpeechRecognitionSupport()) {\n    alert('Your browser does not support the necessary speech recognition features.');\n}\n\n// Initialize WebkitSpeechRecognition\nconst recognition = new window.SpeechRecognition();\nrecognition.continuous = true;\nrecognition.interimResults = true; // Set to true to capture partial results\nrecognition.lang = 'en-US';\n\nlet isRecognitionRunning = false;\nlet finalTranscript = '';  // Store final transcript globally\n\n// Function to request microphone permission\nasync function requestMicPermission() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        console.log('Microphone permission granted');\n        stream.getTracks().forEach(track => track.stop());  // Stop the stream immediately\n        return true;\n    } catch (error) {\n        console.error('Microphone permission denied:', error);\n        alert('Microphone access is required for speech recognition.');\n        return false;\n    }\n}\n\n// Start speech recognition function\nexport async function startSpeechRecognition() {\n    const permissionGranted = await requestMicPermission();  // Ensure permission is granted\n    if (!permissionGranted) return;\n\n    if (isRecognitionRunning) {\n        console.error(\"Speech recognition is already running.\");\n        return;\n    }\n    try {\n        finalTranscript = '';  // Clear transcript on new session\n        recognition.start();\n        isRecognitionRunning = true;\n        console.log('Speech recognition started.');\n    } catch (error) {\n        console.error('Error starting speech recognition:', error);\n    }\n}\n\n// Stop speech recognition function\nexport function stopSpeechRecognition() {\n    if (!isRecognitionRunning) {\n        console.error(\"Speech recognition is not running.\");\n        return;\n    }\n    console.log('Stopping speech recognition...');\n    recognition.stop();\n}\n\n// Handle when recognition ends\nrecognition.onend = () => {\n    isRecognitionRunning = false;\n    console.log('Speech recognition stopped.');\n    \n    // Send the final transcript to backend for transcription when stopped\n    if (finalTranscript) {\n        processTranscript(finalTranscript);  // Send final transcript to backend\n    } else {\n        console.error(\"No transcript available to send.\");\n    }\n};\n\n// Process the transcript and send to backend\nexport const processTranscript = async (transcript) => {\n    try {\n        // Send as JSON, not FormData, because the backend likely expects a JSON payload\n        const response = await fetch('http://localhost:3001/generateNotes', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ transcript }),  // Send the transcript as JSON\n        });\n\n        if (!response.ok) {\n            throw new Error(`Server error: ${response.status}`);\n        }\n\n        const result = await response.json();\n        console.log('Generated notes:', result);\n    } catch (error) {\n        console.error('Error sending transcript to backend:', error);\n    }\n};\n\n// Event handler for when recognition results are available\nrecognition.onresult = (event) => {\n    let interimTranscript = '';\n\n    for (let i = event.resultIndex; i < event.results.length; i++) {\n        const result = event.results[i];\n        if (result.isFinal) {\n            finalTranscript += result[0].transcript;\n        } else {\n            interimTranscript += result[0].transcript;\n        }\n    }\n\n    console.log('Interim Transcript:', interimTranscript);\n    console.log('Final Transcript:', finalTranscript);  // Only append the final result once\n};\n\n// Handle errors in recognition\nrecognition.onerror = (event) => {\n    console.error('Speech Recognition Error:', event.error);\n\n    if (event.error === 'no-speech') {\n        alert('No speech detected. Please try again.');\n        setTimeout(() => {\n            startSpeechRecognition();\n        }, 1000);\n    }\n\n    if (event.error === 'audio-capture') {\n        alert('Please check your microphone permissions.');\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}