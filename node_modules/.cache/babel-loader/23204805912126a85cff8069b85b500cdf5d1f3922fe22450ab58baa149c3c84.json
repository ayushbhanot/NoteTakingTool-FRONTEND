{"ast":null,"code":"let isRecognitionRunning = false;\nlet finalTranscript = '';\nlet recognition;\nconst INTERIM_THRESHOLD = 50; // Set a character length threshold for interim transcript\nlet lastLoggedInterimTranscript = ''; // Store the last logged interim transcript to compare\n\nlet logCount = 0;\nfunction logWithLimit(message) {\n  logCount++;\n  if (logCount % 50 === 0) {\n    // Clear console after every 50 logs\n    console.clear();\n  }\n  console.log(message);\n}\n\n// Function to request microphone permission\nasync function requestMicPermission() {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    logWithLimit('Microphone permission granted');\n    stream.getTracks().forEach(track => track.stop()); // Stop the stream immediately after permission is granted\n    return true;\n  } catch (error) {\n    logWithLimit('Microphone permission denied: ' + error);\n    alert('Microphone access is required for speech recognition.');\n    return false;\n  }\n}\n\n// Function to check WebkitSpeechRecognition support\nfunction checkSpeechRecognitionSupport() {\n  window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  if (!window.SpeechRecognition) {\n    logWithLimit('SpeechRecognition API not supported.');\n    alert('Your browser does not support speech recognition features.');\n    return false;\n  }\n  return true;\n}\n\n// Check for WebkitSpeechRecognition support early\nif (!checkSpeechRecognitionSupport()) {\n  alert('Your browser does not support the necessary speech recognition features.');\n}\n\n// Initialize WebkitSpeechRecognition\nfunction initializeRecognition() {\n  recognition = new window.SpeechRecognition();\n  recognition.continuous = true; // Allow continuous recognition\n  recognition.interimResults = true; // Capture partial results for real-time updates\n  recognition.lang = 'en-US'; // Set recognition language\n\n  // Handle recognition results (interim and final)\n  recognition.onresult = event => {\n    console.log(\"Recognition received results:\", event); // Log the entire event to debug\n\n    let interimTranscript = '';\n    for (let i = event.resultIndex; i < event.results.length; i++) {\n      const result = event.results[i];\n      if (result.isFinal) {\n        finalTranscript += result[0].transcript;\n        logWithLimit('Final Transcript So Far: ' + finalTranscript);\n      } else {\n        interimTranscript += result[0].transcript;\n      }\n    }\n    if (interimTranscript.length > 0) {\n      logWithLimit('Interim Transcript: ' + interimTranscript);\n    }\n  };\n\n  // Handle when recognition ends and restart if necessary (without sending transcript)\n  recognition.onend = () => {\n    logWithLimit('Speech recognition ended.');\n    if (isRecognitionRunning) {\n      logWithLimit('Restarting speech recognition...');\n      recognition.start(); // Restart if it's still supposed to be running\n    }\n  };\n\n  // Handle errors during recognition\n  recognition.onerror = event => {\n    logWithLimit('Speech Recognition Error: ' + event.error);\n    if (event.error === 'no-speech') {\n      logWithLimit('No speech detected.');\n      setTimeout(() => {\n        if (!isRecognitionRunning) {\n          startSpeechRecognition();\n        }\n      }, 1000);\n    }\n    if (event.error === 'audio-capture') {\n      alert('Please check your microphone permissions.');\n    }\n    if (event.error === 'aborted' || event.error === 'network') {\n      logWithLimit('Speech recognition was aborted or there was a network issue.');\n      if (!isRecognitionRunning) {\n        recognition.start(); // Restart only if it's not already running\n      }\n    }\n  };\n}\n\n// Start speech recognition function\nexport async function startSpeechRecognition() {\n  const permissionGranted = await requestMicPermission(); // Ensure microphone permission is granted\n  if (!permissionGranted) return;\n  if (isRecognitionRunning) {\n    logWithLimit(\"Speech recognition is already running.\");\n    return;\n  }\n  finalTranscript = ''; // Clear the transcript at the start of a new session\n  initializeRecognition(); // Initialize the recognition instance\n  try {\n    recognition.start(); // Start speech recognition\n    isRecognitionRunning = true; // Mark recognition as running\n    logWithLimit('Speech recognition started.');\n  } catch (error) {\n    logWithLimit('Error starting speech recognition: ' + error);\n  }\n}\n\n// Stop speech recognition function (and send transcript)\nexport function stopSpeechRecognition() {\n  if (!isRecognitionRunning) {\n    logWithLimit(\"Speech recognition is not running.\");\n    return;\n  }\n  logWithLimit('Stopping speech recognition...');\n  recognition.stop(); // Stop recognition\n  isRecognitionRunning = false; // Mark recognition as stopped\n\n  // Send the final transcript to the backend for processing\n  if (finalTranscript) {\n    logWithLimit('Sending final transcript to backend.');\n    processTranscript(finalTranscript); // Send the complete transcript to the backend\n    finalTranscript = ''; // Clear the final transcript for the next session\n  }\n}\n\n// Process the final transcript and send to backend\nexport const processTranscript = async transcript => {\n  try {\n    // Send as JSON because the backend likely expects a JSON payload\n    const response = await fetch('http://localhost:3001/generateNotes', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        transcript\n      }) // Send the transcript as JSON\n    });\n    if (!response.ok) {\n      throw new Error(`Server error: ${response.status}`);\n    }\n    const result = await response.json();\n    logWithLimit('Generated notes: ' + JSON.stringify(result)); // Log the generated notes from the backend\n  } catch (error) {\n    logWithLimit('Error sending transcript to backend: ' + error); // Log errors that occur during the API call\n  }\n};","map":{"version":3,"names":["isRecognitionRunning","finalTranscript","recognition","INTERIM_THRESHOLD","lastLoggedInterimTranscript","logCount","logWithLimit","message","console","clear","log","requestMicPermission","stream","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","track","stop","error","alert","checkSpeechRecognitionSupport","window","SpeechRecognition","webkitSpeechRecognition","initializeRecognition","continuous","interimResults","lang","onresult","event","interimTranscript","i","resultIndex","results","length","result","isFinal","transcript","onend","start","onerror","setTimeout","startSpeechRecognition","permissionGranted","stopSpeechRecognition","processTranscript","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","json"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["let isRecognitionRunning = false;\nlet finalTranscript = ''; \nlet recognition;\nconst INTERIM_THRESHOLD = 50;  // Set a character length threshold for interim transcript\nlet lastLoggedInterimTranscript = '';  // Store the last logged interim transcript to compare\n\nlet logCount = 0;\n\nfunction logWithLimit(message) {\n    logCount++;\n\n    if (logCount % 50 === 0) {  // Clear console after every 50 logs\n        console.clear();\n    }\n\n    console.log(message);\n}\n\n// Function to request microphone permission\nasync function requestMicPermission() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        logWithLimit('Microphone permission granted');\n        stream.getTracks().forEach(track => track.stop());  // Stop the stream immediately after permission is granted\n        return true;\n    } catch (error) {\n        logWithLimit('Microphone permission denied: ' + error);\n        alert('Microphone access is required for speech recognition.');\n        return false;\n    }\n}\n\n// Function to check WebkitSpeechRecognition support\nfunction checkSpeechRecognitionSupport() {\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!window.SpeechRecognition) {\n        logWithLimit('SpeechRecognition API not supported.');\n        alert('Your browser does not support speech recognition features.');\n        return false;\n    }\n    return true;\n}\n\n// Check for WebkitSpeechRecognition support early\nif (!checkSpeechRecognitionSupport()) {\n    alert('Your browser does not support the necessary speech recognition features.');\n}\n\n// Initialize WebkitSpeechRecognition\nfunction initializeRecognition() {\n    recognition = new window.SpeechRecognition();\n    recognition.continuous = true;  // Allow continuous recognition\n    recognition.interimResults = true;  // Capture partial results for real-time updates\n    recognition.lang = 'en-US';  // Set recognition language\n\n    // Handle recognition results (interim and final)\n    recognition.onresult = (event) => {\n        console.log(\"Recognition received results:\", event);  // Log the entire event to debug\n        \n        let interimTranscript = '';\n    \n        for (let i = event.resultIndex; i < event.results.length; i++) {\n            const result = event.results[i];\n            if (result.isFinal) {\n                finalTranscript += result[0].transcript;\n                logWithLimit('Final Transcript So Far: ' + finalTranscript);\n            } else {\n                interimTranscript += result[0].transcript;\n            }\n        }\n    \n        if (interimTranscript.length > 0) {\n            logWithLimit('Interim Transcript: ' + interimTranscript);\n        }\n    };\n\n    // Handle when recognition ends and restart if necessary (without sending transcript)\n    recognition.onend = () => {\n        logWithLimit('Speech recognition ended.');\n    \n        if (isRecognitionRunning) {\n            logWithLimit('Restarting speech recognition...');\n            recognition.start();  // Restart if it's still supposed to be running\n        }\n    };\n\n    // Handle errors during recognition\n    recognition.onerror = (event) => {\n        logWithLimit('Speech Recognition Error: ' + event.error);\n    \n        if (event.error === 'no-speech') {\n            logWithLimit('No speech detected.');\n            setTimeout(() => {\n                if (!isRecognitionRunning) {\n                    startSpeechRecognition();\n                }\n            }, 1000);\n        }\n    \n        if (event.error === 'audio-capture') {\n            alert('Please check your microphone permissions.');\n        }\n    \n        if (event.error === 'aborted' || event.error === 'network') {\n            logWithLimit('Speech recognition was aborted or there was a network issue.');\n            if (!isRecognitionRunning) {\n                recognition.start();  // Restart only if it's not already running\n            }\n        }\n    };\n}\n\n// Start speech recognition function\nexport async function startSpeechRecognition() {\n    const permissionGranted = await requestMicPermission();  // Ensure microphone permission is granted\n    if (!permissionGranted) return;\n\n    if (isRecognitionRunning) {\n        logWithLimit(\"Speech recognition is already running.\");\n        return;\n    }\n\n    finalTranscript = '';  // Clear the transcript at the start of a new session\n    initializeRecognition();  // Initialize the recognition instance\n    try {\n        recognition.start();  // Start speech recognition\n        isRecognitionRunning = true;  // Mark recognition as running\n        logWithLimit('Speech recognition started.');\n    } catch (error) {\n        logWithLimit('Error starting speech recognition: ' + error);\n    }\n}\n\n// Stop speech recognition function (and send transcript)\nexport function stopSpeechRecognition() {\n    if (!isRecognitionRunning) {\n        logWithLimit(\"Speech recognition is not running.\");\n        return;\n    }\n    logWithLimit('Stopping speech recognition...');\n    recognition.stop();  // Stop recognition\n    isRecognitionRunning = false;  // Mark recognition as stopped\n\n    // Send the final transcript to the backend for processing\n    if (finalTranscript) {\n        logWithLimit('Sending final transcript to backend.');\n        processTranscript(finalTranscript);  // Send the complete transcript to the backend\n        finalTranscript = '';  // Clear the final transcript for the next session\n    }\n}\n\n// Process the final transcript and send to backend\nexport const processTranscript = async (transcript) => {\n    try {\n        // Send as JSON because the backend likely expects a JSON payload\n        const response = await fetch('http://localhost:3001/generateNotes', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ transcript }),  // Send the transcript as JSON\n        });\n\n        if (!response.ok) {\n            throw new Error(`Server error: ${response.status}`);\n        }\n\n        const result = await response.json();\n        logWithLimit('Generated notes: ' + JSON.stringify(result));  // Log the generated notes from the backend\n    } catch (error) {\n        logWithLimit('Error sending transcript to backend: ' + error);  // Log errors that occur during the API call\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}