{"ast":null,"code":"let isRecognitionRunning = false;\nlet isRestarting = false;\nlet finalTranscript = '';\nlet recognition;\nlet isRecognitionInitialized = false;\nlet restartCooldownActive = false; // Cooldown flag\nconst COOLDOWN_DURATION = 5000; // Cooldown period between restarts (5 seconds)\nconst INTERIM_THRESHOLD = 250;\nlet lastLoggedInterimTranscript = '';\nlet logCount = 0;\n\n// Function to request microphone permission\nasync function requestMicPermission() {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    stream.getTracks().forEach(track => track.stop());\n    return true;\n  } catch (error) {\n    alert('Microphone access is required for speech recognition.');\n    return false;\n  }\n}\n\n// Initialize SpeechRecognition\nfunction initializeRecognition() {\n  window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  if (!window.SpeechRecognition) {\n    alert('Your browser does not support the SpeechRecognition API.');\n    return;\n  }\n  recognition = new window.SpeechRecognition();\n  recognition.continuous = true;\n  recognition.interimResults = true;\n  recognition.lang = 'en-US';\n  recognition.onresult = event => {\n    let interimTranscript = '';\n    for (let i = event.resultIndex; i < event.results.length; i++) {\n      const result = event.results[i];\n      if (result.isFinal) {\n        finalTranscript += result[0].transcript + ' ';\n        console.log('Final Transcript: ', finalTranscript);\n      } else {\n        interimTranscript += result[0].transcript;\n      }\n    }\n    if (interimTranscript.length > INTERIM_THRESHOLD && interimTranscript !== lastLoggedInterimTranscript) {\n      lastLoggedInterimTranscript = interimTranscript;\n      console.log('Interim Transcript: ', interimTranscript);\n      if (!restartCooldownActive) {\n        restartRecognition();\n      }\n    }\n  };\n  recognition.onerror = event => {\n    console.log('Recognition error: ', event.error);\n    if (!restartCooldownActive) {\n      restartRecognition();\n    }\n  };\n  recognition.onend = () => {\n    console.log('Recognition ended.');\n    if (isRecognitionRunning && !restartCooldownActive) {\n      restartRecognition();\n    }\n  };\n  isRecognitionInitialized = true;\n  console.log('Recognition initialized.');\n}\n\n// Start Recognition\nfunction startRecognition() {\n  if (!isRecognitionInitialized) {\n    console.log('Cannot start recognition; initialization is not complete.');\n    return;\n  }\n  if (!isRecognitionRunning) {\n    console.log('Starting recognition...');\n    recognition.start();\n    isRecognitionRunning = true;\n  } else {\n    console.log('Recognition already running.');\n  }\n}\n\n// Restart Recognition with cooldown\nfunction restartRecognition() {\n  if (restartCooldownActive) {\n    console.log('Cooldown active, skipping restart.');\n    return;\n  }\n  console.log('Stopping recognition before restarting...');\n  isRecognitionRunning = false;\n  recognition.stop();\n  restartCooldownActive = true;\n  setTimeout(() => {\n    console.log('Restarting recognition...');\n    if (isRecognitionInitialized) {\n      startRecognition();\n      restartCooldownActive = false;\n      console.log('Recognition successfully restarted.');\n    }\n  }, COOLDOWN_DURATION);\n}\n\n// Stop Recognition\nexport function stopRecognition() {\n  if (isRecognitionRunning) {\n    console.log('Stopping recognition...');\n    recognition.stop();\n    isRecognitionRunning = false;\n  }\n}\n\n// Start Speech Recognition\nexport async function startSpeechRecognition() {\n  const permissionGranted = await requestMicPermission();\n  if (!permissionGranted) return;\n  if (!isRecognitionInitialized) {\n    initializeRecognition();\n  }\n  startRecognition();\n}","map":{"version":3,"names":["isRecognitionRunning","isRestarting","finalTranscript","recognition","isRecognitionInitialized","restartCooldownActive","COOLDOWN_DURATION","INTERIM_THRESHOLD","lastLoggedInterimTranscript","logCount","requestMicPermission","stream","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","track","stop","error","alert","initializeRecognition","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","interimTranscript","i","resultIndex","results","length","result","isFinal","transcript","console","log","restartRecognition","onerror","onend","startRecognition","start","setTimeout","stopRecognition","startSpeechRecognition","permissionGranted"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["let isRecognitionRunning = false;\nlet isRestarting = false;\nlet finalTranscript = '';\nlet recognition;\nlet isRecognitionInitialized = false;\nlet restartCooldownActive = false;  // Cooldown flag\nconst COOLDOWN_DURATION = 5000;  // Cooldown period between restarts (5 seconds)\nconst INTERIM_THRESHOLD = 250;\nlet lastLoggedInterimTranscript = '';\nlet logCount = 0;\n\n// Function to request microphone permission\nasync function requestMicPermission() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        stream.getTracks().forEach(track => track.stop());\n        return true;\n    } catch (error) {\n        alert('Microphone access is required for speech recognition.');\n        return false;\n    }\n}\n\n// Initialize SpeechRecognition\nfunction initializeRecognition() {\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!window.SpeechRecognition) {\n        alert('Your browser does not support the SpeechRecognition API.');\n        return;\n    }\n\n    recognition = new window.SpeechRecognition();\n    recognition.continuous = true;\n    recognition.interimResults = true;\n    recognition.lang = 'en-US';\n\n    recognition.onresult = (event) => {\n        let interimTranscript = '';\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n            const result = event.results[i];\n            if (result.isFinal) {\n                finalTranscript += result[0].transcript + ' ';\n                console.log('Final Transcript: ', finalTranscript);\n            } else {\n                interimTranscript += result[0].transcript;\n            }\n        }\n\n        if (interimTranscript.length > INTERIM_THRESHOLD && interimTranscript !== lastLoggedInterimTranscript) {\n            lastLoggedInterimTranscript = interimTranscript;\n            console.log('Interim Transcript: ', interimTranscript);\n            if (!restartCooldownActive) {\n                restartRecognition();\n            }\n        }\n    };\n\n    recognition.onerror = (event) => {\n        console.log('Recognition error: ', event.error);\n        if (!restartCooldownActive) {\n            restartRecognition();\n        }\n    };\n\n    recognition.onend = () => {\n        console.log('Recognition ended.');\n        if (isRecognitionRunning && !restartCooldownActive) {\n            restartRecognition();\n        }\n    };\n\n    isRecognitionInitialized = true;\n    console.log('Recognition initialized.');\n}\n\n// Start Recognition\nfunction startRecognition() {\n    if (!isRecognitionInitialized) {\n        console.log('Cannot start recognition; initialization is not complete.');\n        return;\n    }\n\n    if (!isRecognitionRunning) {\n        console.log('Starting recognition...');\n        recognition.start();\n        isRecognitionRunning = true;\n    } else {\n        console.log('Recognition already running.');\n    }\n}\n\n// Restart Recognition with cooldown\nfunction restartRecognition() {\n    if (restartCooldownActive) {\n        console.log('Cooldown active, skipping restart.');\n        return;\n    }\n\n    console.log('Stopping recognition before restarting...');\n    isRecognitionRunning = false;\n    recognition.stop();\n\n    restartCooldownActive = true;\n\n    setTimeout(() => {\n        console.log('Restarting recognition...');\n        if (isRecognitionInitialized) {\n            startRecognition();\n            restartCooldownActive = false;\n            console.log('Recognition successfully restarted.');\n        }\n    }, COOLDOWN_DURATION);\n}\n\n// Stop Recognition\nexport function stopRecognition() {\n    if (isRecognitionRunning) {\n        console.log('Stopping recognition...');\n        recognition.stop();\n        isRecognitionRunning = false;\n    }\n}\n\n// Start Speech Recognition\nexport async function startSpeechRecognition() {\n    const permissionGranted = await requestMicPermission();\n    if (!permissionGranted) return;\n\n    if (!isRecognitionInitialized) {\n        initializeRecognition();\n    }\n\n    startRecognition();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}