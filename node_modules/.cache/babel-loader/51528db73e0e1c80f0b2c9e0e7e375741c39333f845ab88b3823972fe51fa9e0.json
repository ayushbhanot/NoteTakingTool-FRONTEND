{"ast":null,"code":"let isRecognitionRunning = false;\nlet isRestarting = false;\nlet finalTranscript = '';\nlet recognition;\nconst INTERIM_THRESHOLD = 20;\nlet lastLoggedInterimTranscript = '';\nlet lastRecognitionTime = Date.now();\nlet logCount = 0;\nlet lastLogTime = 0; // Time to throttle logs\n\nconst TIMEOUT_DURATION = 3000; // Timeout duration for checking if recognition is stuck\nconst LOG_THROTTLE_DURATION = 1000; // Throttle log duration to log every 1 second\n\n// Function to log messages with a limit and throttle logging\nfunction logWithThrottle(message) {\n  const currentTime = Date.now();\n\n  // Throttle logging to only log once every 1 second\n  if (currentTime - lastLogTime >= LOG_THROTTLE_DURATION) {\n    const timestamp = new Date().toISOString();\n    logCount++;\n    if (logCount % 50 === 0) {\n      console.clear(); // Clear the console every 50 logs to avoid clutter\n    }\n    console.log(`[${timestamp}] ${message}`);\n    lastLogTime = currentTime; // Update the last log time\n  }\n}\n\n// Function to request microphone permission\nasync function requestMicPermission() {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    logWithThrottle('Microphone permission granted');\n    stream.getTracks().forEach(track => track.stop());\n    return true;\n  } catch (error) {\n    logWithThrottle('Microphone permission denied: ' + error);\n    alert('Microphone access is required for speech recognition.');\n    return false;\n  }\n}\nfunction initializeRecognition() {\n  window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  if (!window.SpeechRecognition) {\n    logWithThrottle('SpeechRecognition API is not supported in this browser.');\n    alert('Your browser does not support the SpeechRecognition API.');\n    return;\n  }\n  recognition = new window.SpeechRecognition();\n  recognition.continuous = true;\n  recognition.interimResults = true;\n  recognition.lang = 'en-US';\n\n  // Handle recognition results\n  recognition.onresult = event => {\n    logWithThrottle(\"Recognition received results:\");\n    let interimTranscript = '';\n    lastRecognitionTime = Date.now();\n    for (let i = event.resultIndex; i < event.results.length; i++) {\n      const result = event.results[i];\n      if (result.isFinal) {\n        finalTranscript += result[0].transcript;\n        logWithThrottle('Final Transcript So Far: ' + finalTranscript);\n      } else {\n        interimTranscript += result[0].transcript;\n      }\n    }\n    if (interimTranscript.length >= INTERIM_THRESHOLD) {\n      logWithThrottle('Interim Transcript: ' + interimTranscript);\n      lastLoggedInterimTranscript = interimTranscript;\n    }\n  };\n  recognition.onend = () => {\n    logWithThrottle('Speech recognition ended.');\n    if (isRecognitionRunning && !isRestarting) {\n      isRestarting = true;\n      logWithThrottle('Waiting a moment before restarting speech recognition...');\n      setTimeout(() => {\n        if (isRecognitionRunning && !recognitionIsActive()) {\n          logWithThrottle('Restarting speech recognition...');\n          try {\n            recognition.start();\n            isRestarting = false;\n          } catch (error) {\n            logWithThrottle('Error restarting recognition: ' + error);\n          }\n        }\n      }, 500);\n    }\n  };\n  recognition.onerror = event => {\n    logWithThrottle('Speech Recognition Error: ' + event.error);\n    if (event.error === 'no-speech') {\n      logWithThrottle('No speech detected.');\n      setTimeout(() => {\n        if (!isRestarting && !recognitionIsActive()) {\n          startSpeechRecognition();\n        }\n      }, 500);\n    }\n    if (event.error === 'audio-capture') {\n      alert('Please check your microphone permissions.');\n    }\n    if (event.error === 'aborted' || event.error === 'network') {\n      logWithThrottle('Speech recognition was aborted or there was a network issue.');\n      if (isRecognitionRunning && !isRestarting) {\n        isRestarting = true;\n        setTimeout(() => {\n          if (isRecognitionRunning && !recognitionIsActive()) {\n            logWithThrottle('Attempting to restart speech recognition after error...');\n            try {\n              recognition.start();\n              isRestarting = false;\n            } catch (error) {\n              logWithThrottle('Error restarting recognition after error: ' + error);\n            }\n          }\n        }, 500);\n      }\n    }\n  };\n}\n\n// Function to monitor recognition timeout and restart if necessary\nfunction monitorRecognitionTimeout() {\n  setInterval(() => {\n    const currentTime = Date.now();\n    if (isRecognitionRunning && currentTime - lastRecognitionTime > TIMEOUT_DURATION && !isRestarting && !recognitionIsActive()) {\n      logWithThrottle('No new recognition results for a while. Restarting recognition...');\n      recognition.stop();\n      setTimeout(() => {\n        if (isRecognitionRunning && !recognitionIsActive()) {\n          recognition.start();\n        }\n      }, 500);\n    }\n  }, TIMEOUT_DURATION);\n}\nfunction recognitionIsActive() {\n  return isRecognitionRunning && !isRestarting;\n}\n\n// Start speech recognition function\nexport async function startSpeechRecognition() {\n  const permissionGranted = await requestMicPermission();\n  if (!permissionGranted) return;\n  if (isRecognitionRunning || isRestarting || recognitionIsActive()) {\n    logWithThrottle(\"Speech recognition is already running or restarting.\");\n    return;\n  }\n  finalTranscript = '';\n  initializeRecognition();\n  try {\n    recognition.start();\n    isRecognitionRunning = true;\n    logWithThrottle('Speech recognition started.');\n    lastRecognitionTime = Date.now();\n    monitorRecognitionTimeout();\n  } catch (error) {\n    logWithThrottle('Error starting speech recognition: ' + error);\n  }\n}\n\n// Stop speech recognition function (and send transcript)\nexport function stopSpeechRecognition() {\n  if (!isRecognitionRunning) {\n    logWithThrottle(\"Speech recognition is not running.\");\n    return;\n  }\n  logWithThrottle('Stopping speech recognition...');\n  recognition.stop();\n  isRecognitionRunning = false;\n  isRestarting = false;\n  if (finalTranscript) {\n    logWithThrottle('Sending final transcript to backend.');\n    processTranscript(finalTranscript);\n    finalTranscript = '';\n  }\n}","map":{"version":3,"names":["isRecognitionRunning","isRestarting","finalTranscript","recognition","INTERIM_THRESHOLD","lastLoggedInterimTranscript","lastRecognitionTime","Date","now","logCount","lastLogTime","TIMEOUT_DURATION","LOG_THROTTLE_DURATION","logWithThrottle","message","currentTime","timestamp","toISOString","console","clear","log","requestMicPermission","stream","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","track","stop","error","alert","initializeRecognition","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","interimTranscript","i","resultIndex","results","length","result","isFinal","transcript","onend","setTimeout","recognitionIsActive","start","onerror","startSpeechRecognition","monitorRecognitionTimeout","setInterval","permissionGranted","stopSpeechRecognition","processTranscript"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["let isRecognitionRunning = false;\nlet isRestarting = false;\nlet finalTranscript = ''; \nlet recognition;\nconst INTERIM_THRESHOLD = 20;  \nlet lastLoggedInterimTranscript = '';  \nlet lastRecognitionTime = Date.now();  \nlet logCount = 0;\nlet lastLogTime = 0;  // Time to throttle logs\n\nconst TIMEOUT_DURATION = 3000;  // Timeout duration for checking if recognition is stuck\nconst LOG_THROTTLE_DURATION = 1000;  // Throttle log duration to log every 1 second\n\n// Function to log messages with a limit and throttle logging\nfunction logWithThrottle(message) {\n    const currentTime = Date.now();\n\n    // Throttle logging to only log once every 1 second\n    if (currentTime - lastLogTime >= LOG_THROTTLE_DURATION) {\n        const timestamp = new Date().toISOString();\n        logCount++;\n    \n        if (logCount % 50 === 0) {  \n            console.clear();  // Clear the console every 50 logs to avoid clutter\n        }\n    \n        console.log(`[${timestamp}] ${message}`);\n        lastLogTime = currentTime;  // Update the last log time\n    }\n}\n\n// Function to request microphone permission\nasync function requestMicPermission() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        logWithThrottle('Microphone permission granted');\n        stream.getTracks().forEach(track => track.stop());  \n        return true;\n    } catch (error) {\n        logWithThrottle('Microphone permission denied: ' + error);\n        alert('Microphone access is required for speech recognition.');\n        return false;\n    }\n}\n\nfunction initializeRecognition() {\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n\n    if (!window.SpeechRecognition) {\n        logWithThrottle('SpeechRecognition API is not supported in this browser.');\n        alert('Your browser does not support the SpeechRecognition API.');\n        return;\n    }\n\n    recognition = new window.SpeechRecognition();\n    recognition.continuous = true;  \n    recognition.interimResults = true;  \n    recognition.lang = 'en-US';  \n\n    // Handle recognition results\n    recognition.onresult = (event) => {\n        logWithThrottle(\"Recognition received results:\");\n        let interimTranscript = '';\n        lastRecognitionTime = Date.now();  \n\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n            const result = event.results[i];\n            if (result.isFinal) {\n                finalTranscript += result[0].transcript;\n                logWithThrottle('Final Transcript So Far: ' + finalTranscript);\n            } else {\n                interimTranscript += result[0].transcript;\n            }\n        }\n\n        if (interimTranscript.length >= INTERIM_THRESHOLD) {\n            logWithThrottle('Interim Transcript: ' + interimTranscript);\n            lastLoggedInterimTranscript = interimTranscript;\n        }\n    };\n\n    recognition.onend = () => {\n        logWithThrottle('Speech recognition ended.');\n        \n        if (isRecognitionRunning && !isRestarting) {\n            isRestarting = true;\n            logWithThrottle('Waiting a moment before restarting speech recognition...');\n            setTimeout(() => {\n                if (isRecognitionRunning && !recognitionIsActive()) {\n                    logWithThrottle('Restarting speech recognition...');\n                    try {\n                        recognition.start();  \n                        isRestarting = false;\n                    } catch (error) {\n                        logWithThrottle('Error restarting recognition: ' + error);\n                    }\n                }\n            }, 500);\n        }\n    };\n\n    recognition.onerror = (event) => {\n        logWithThrottle('Speech Recognition Error: ' + event.error);\n        if (event.error === 'no-speech') {\n            logWithThrottle('No speech detected.');\n            setTimeout(() => {\n                if (!isRestarting && !recognitionIsActive()) {\n                    startSpeechRecognition();\n                }\n            }, 500);\n        }\n\n        if (event.error === 'audio-capture') {\n            alert('Please check your microphone permissions.');\n        }\n\n        if (event.error === 'aborted' || event.error === 'network') {\n            logWithThrottle('Speech recognition was aborted or there was a network issue.');\n            if (isRecognitionRunning && !isRestarting) {\n                isRestarting = true;\n                setTimeout(() => {\n                    if (isRecognitionRunning && !recognitionIsActive()) {\n                        logWithThrottle('Attempting to restart speech recognition after error...');\n                        try {\n                            recognition.start();\n                            isRestarting = false;\n                        } catch (error) {\n                            logWithThrottle('Error restarting recognition after error: ' + error);\n                        }\n                    }\n                }, 500);\n            }\n        }\n    };\n}\n\n// Function to monitor recognition timeout and restart if necessary\nfunction monitorRecognitionTimeout() {\n    setInterval(() => {\n        const currentTime = Date.now();\n        if (isRecognitionRunning && (currentTime - lastRecognitionTime > TIMEOUT_DURATION) && !isRestarting && !recognitionIsActive()) {\n            logWithThrottle('No new recognition results for a while. Restarting recognition...');\n            recognition.stop();\n            setTimeout(() => {\n                if (isRecognitionRunning && !recognitionIsActive()) {\n                    recognition.start();\n                }\n            }, 500);  \n        }\n    }, TIMEOUT_DURATION);  \n}\n\nfunction recognitionIsActive() {\n    return isRecognitionRunning && !isRestarting;\n}\n\n// Start speech recognition function\nexport async function startSpeechRecognition() {\n    const permissionGranted = await requestMicPermission();  \n    if (!permissionGranted) return;\n\n    if (isRecognitionRunning || isRestarting || recognitionIsActive()) {\n        logWithThrottle(\"Speech recognition is already running or restarting.\");\n        return;\n    }\n\n    finalTranscript = '';  \n    initializeRecognition();  \n    try {\n        recognition.start();  \n        isRecognitionRunning = true;  \n        logWithThrottle('Speech recognition started.');\n        lastRecognitionTime = Date.now();  \n        monitorRecognitionTimeout();  \n    } catch (error) {\n        logWithThrottle('Error starting speech recognition: ' + error);\n    }\n}\n\n// Stop speech recognition function (and send transcript)\nexport function stopSpeechRecognition() {\n    if (!isRecognitionRunning) {\n        logWithThrottle(\"Speech recognition is not running.\");\n        return;\n    }\n    logWithThrottle('Stopping speech recognition...');\n    recognition.stop();  \n    isRecognitionRunning = false;  \n    isRestarting = false;\n\n    if (finalTranscript) {\n        logWithThrottle('Sending final transcript to backend.');\n        processTranscript(finalTranscript); \n        finalTranscript = '';  \n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}