{"ast":null,"code":"let mediaRecorder = null; // Declare globally\n\nexport async function startRecording() {\n  console.log('Attempting to start recording...');\n  try {\n    const screenStream = await navigator.mediaDevices.getDisplayMedia({\n      video: true,\n      audio: false\n    });\n    console.log('Screen stream acquired:', screenStream);\n    const micStream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    console.log('Microphone stream acquired:', micStream);\n    const combinedStream = new MediaStream([...screenStream.getAudioTracks(), ...micStream.getAudioTracks()]);\n    console.log('Combined stream:', combinedStream);\n    if (combinedStream.getAudioTracks().length === 0) {\n      throw new Error('Combined stream has no audio tracks.');\n    }\n    mediaRecorder = new MediaRecorder(combinedStream);\n    console.log('MediaRecorder initialized:', mediaRecorder);\n    let audioChunks = [];\n    mediaRecorder.ondataavailable = event => {\n      if (event.data.size > 0) {\n        audioChunks.push(event.data);\n        console.log('Audio chunk available:', event.data);\n      }\n    };\n    mediaRecorder.onstart = () => {\n      console.log('Recording started.');\n    };\n    mediaRecorder.onstop = () => {\n      console.log('Recording stopped.');\n      const audioBlob = new Blob(audioChunks, {\n        type: 'audio/webm'\n      });\n      processAudioChunk(audioBlob);\n    };\n    mediaRecorder.onerror = event => {\n      console.error('MediaRecorder error:', event.error);\n    };\n    mediaRecorder.start();\n  } catch (error) {\n    console.error('Error capturing audio:', error);\n  }\n}\nexport function stopRecording() {\n  if (mediaRecorder) {\n    if (mediaRecorder instanceof MediaRecorder) {\n      if (mediaRecorder.state !== 'inactive') {\n        console.log('Stopping recording...');\n        mediaRecorder.stop();\n      } else {\n        console.error('MediaRecorder is inactive.');\n      }\n    } else {\n      console.error('mediaRecorder is not an instance of MediaRecorder.');\n    }\n  } else {\n    console.error('No MediaRecorder instance found.');\n  }\n}\nexport const processAudioChunk = async audioBlob => {\n  if (!(audioBlob instanceof Blob)) {\n    console.error('audioBlob is not a Blob instance.');\n    return;\n  }\n  const formData = new FormData();\n  formData.append('audio', audioBlob, 'audio.webm');\n  try {\n    const response = await fetch('http://localhost:3001/transcribe', {\n      method: 'POST',\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error(`Server error: ${response.status}`);\n    }\n    const result = await response.json();\n    console.log('Transcription result:', result);\n  } catch (error) {\n    console.error('Error sending audio to backend:', error);\n  }\n};\nif (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n  alert('Your browser does not support the necessary APIs for recording.');\n}\nif (!(mediaRecorder instanceof MediaRecorder)) {\n  console.error('mediaRecorder is not an instance of MediaRecorder.');\n}","map":{"version":3,"names":["mediaRecorder","startRecording","console","log","screenStream","navigator","mediaDevices","getDisplayMedia","video","audio","micStream","getUserMedia","combinedStream","MediaStream","getAudioTracks","length","Error","MediaRecorder","audioChunks","ondataavailable","event","data","size","push","onstart","onstop","audioBlob","Blob","type","processAudioChunk","onerror","error","start","stopRecording","state","stop","formData","FormData","append","response","fetch","method","body","ok","status","result","json","alert"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["let mediaRecorder = null; // Declare globally\n\nexport async function startRecording() {\n    console.log('Attempting to start recording...');\n    try {\n        const screenStream = await navigator.mediaDevices.getDisplayMedia({\n            video: true,\n            audio: false\n        });\n        console.log('Screen stream acquired:', screenStream);\n\n        const micStream = await navigator.mediaDevices.getUserMedia({\n            audio: true\n        });\n        console.log('Microphone stream acquired:', micStream);\n\n        const combinedStream = new MediaStream([\n            ...screenStream.getAudioTracks(),\n            ...micStream.getAudioTracks()\n        ]);\n        console.log('Combined stream:', combinedStream);\n\n        if (combinedStream.getAudioTracks().length === 0) {\n            throw new Error('Combined stream has no audio tracks.');\n        }\n\n        mediaRecorder = new MediaRecorder(combinedStream);\n        console.log('MediaRecorder initialized:', mediaRecorder);\n\n        let audioChunks = [];\n        mediaRecorder.ondataavailable = (event) => {\n            if (event.data.size > 0) {\n                audioChunks.push(event.data);\n                console.log('Audio chunk available:', event.data);\n            }\n        };\n\n        mediaRecorder.onstart = () => {\n            console.log('Recording started.');\n        };\n\n        mediaRecorder.onstop = () => {\n            console.log('Recording stopped.');\n            const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });\n            processAudioChunk(audioBlob);\n        };\n\n        mediaRecorder.onerror = (event) => {\n            console.error('MediaRecorder error:', event.error);\n        };\n\n        mediaRecorder.start();\n    } catch (error) {\n        console.error('Error capturing audio:', error);\n    }\n}\n\nexport function stopRecording() {\n    if (mediaRecorder) {\n        if (mediaRecorder instanceof MediaRecorder) {\n            if (mediaRecorder.state !== 'inactive') {\n                console.log('Stopping recording...');\n                mediaRecorder.stop();\n            } else {\n                console.error('MediaRecorder is inactive.');\n            }\n        } else {\n            console.error('mediaRecorder is not an instance of MediaRecorder.');\n        }\n    } else {\n        console.error('No MediaRecorder instance found.');\n    }\n}\n\n\n\nexport const processAudioChunk = async (audioBlob) => {\n    if (!(audioBlob instanceof Blob)) {\n        console.error('audioBlob is not a Blob instance.');\n        return;\n    }\n\n    const formData = new FormData();\n    formData.append('audio', audioBlob, 'audio.webm');\n\n    try {\n        const response = await fetch('http://localhost:3001/transcribe', {\n            method: 'POST',\n            body: formData,\n        });\n\n        if (!response.ok) {\n            throw new Error(`Server error: ${response.status}`);\n        }\n\n        const result = await response.json();\n        console.log('Transcription result:', result);\n    } catch (error) {\n        console.error('Error sending audio to backend:', error);\n    }\n}\nif (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n    alert('Your browser does not support the necessary APIs for recording.');\n}\n\n\nif (!(mediaRecorder instanceof MediaRecorder)) {\n    console.error('mediaRecorder is not an instance of MediaRecorder.');\n}\n"],"mappings":"AAAA,IAAIA,aAAa,GAAG,IAAI,CAAC,CAAC;;AAE1B,OAAO,eAAeC,cAAcA,CAAA,EAAG;EACnCC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;EAC/C,IAAI;IACA,MAAMC,YAAY,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,eAAe,CAAC;MAC9DC,KAAK,EAAE,IAAI;MACXC,KAAK,EAAE;IACX,CAAC,CAAC;IACFP,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEC,YAAY,CAAC;IAEpD,MAAMM,SAAS,GAAG,MAAML,SAAS,CAACC,YAAY,CAACK,YAAY,CAAC;MACxDF,KAAK,EAAE;IACX,CAAC,CAAC;IACFP,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEO,SAAS,CAAC;IAErD,MAAME,cAAc,GAAG,IAAIC,WAAW,CAAC,CACnC,GAAGT,YAAY,CAACU,cAAc,CAAC,CAAC,EAChC,GAAGJ,SAAS,CAACI,cAAc,CAAC,CAAC,CAChC,CAAC;IACFZ,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAES,cAAc,CAAC;IAE/C,IAAIA,cAAc,CAACE,cAAc,CAAC,CAAC,CAACC,MAAM,KAAK,CAAC,EAAE;MAC9C,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;IAC3D;IAEAhB,aAAa,GAAG,IAAIiB,aAAa,CAACL,cAAc,CAAC;IACjDV,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEH,aAAa,CAAC;IAExD,IAAIkB,WAAW,GAAG,EAAE;IACpBlB,aAAa,CAACmB,eAAe,GAAIC,KAAK,IAAK;MACvC,IAAIA,KAAK,CAACC,IAAI,CAACC,IAAI,GAAG,CAAC,EAAE;QACrBJ,WAAW,CAACK,IAAI,CAACH,KAAK,CAACC,IAAI,CAAC;QAC5BnB,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEiB,KAAK,CAACC,IAAI,CAAC;MACrD;IACJ,CAAC;IAEDrB,aAAa,CAACwB,OAAO,GAAG,MAAM;MAC1BtB,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACrC,CAAC;IAEDH,aAAa,CAACyB,MAAM,GAAG,MAAM;MACzBvB,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;MACjC,MAAMuB,SAAS,GAAG,IAAIC,IAAI,CAACT,WAAW,EAAE;QAAEU,IAAI,EAAE;MAAa,CAAC,CAAC;MAC/DC,iBAAiB,CAACH,SAAS,CAAC;IAChC,CAAC;IAED1B,aAAa,CAAC8B,OAAO,GAAIV,KAAK,IAAK;MAC/BlB,OAAO,CAAC6B,KAAK,CAAC,sBAAsB,EAAEX,KAAK,CAACW,KAAK,CAAC;IACtD,CAAC;IAED/B,aAAa,CAACgC,KAAK,CAAC,CAAC;EACzB,CAAC,CAAC,OAAOD,KAAK,EAAE;IACZ7B,OAAO,CAAC6B,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;EAClD;AACJ;AAEA,OAAO,SAASE,aAAaA,CAAA,EAAG;EAC5B,IAAIjC,aAAa,EAAE;IACf,IAAIA,aAAa,YAAYiB,aAAa,EAAE;MACxC,IAAIjB,aAAa,CAACkC,KAAK,KAAK,UAAU,EAAE;QACpChC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;QACpCH,aAAa,CAACmC,IAAI,CAAC,CAAC;MACxB,CAAC,MAAM;QACHjC,OAAO,CAAC6B,KAAK,CAAC,4BAA4B,CAAC;MAC/C;IACJ,CAAC,MAAM;MACH7B,OAAO,CAAC6B,KAAK,CAAC,oDAAoD,CAAC;IACvE;EACJ,CAAC,MAAM;IACH7B,OAAO,CAAC6B,KAAK,CAAC,kCAAkC,CAAC;EACrD;AACJ;AAIA,OAAO,MAAMF,iBAAiB,GAAG,MAAOH,SAAS,IAAK;EAClD,IAAI,EAAEA,SAAS,YAAYC,IAAI,CAAC,EAAE;IAC9BzB,OAAO,CAAC6B,KAAK,CAAC,mCAAmC,CAAC;IAClD;EACJ;EAEA,MAAMK,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEZ,SAAS,EAAE,YAAY,CAAC;EAEjD,IAAI;IACA,MAAMa,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;MAC7DC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEN;IACV,CAAC,CAAC;IAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;MACd,MAAM,IAAI3B,KAAK,CAAC,iBAAiBuB,QAAQ,CAACK,MAAM,EAAE,CAAC;IACvD;IAEA,MAAMC,MAAM,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IACpC5C,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE0C,MAAM,CAAC;EAChD,CAAC,CAAC,OAAOd,KAAK,EAAE;IACZ7B,OAAO,CAAC6B,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;EAC3D;AACJ,CAAC;AACD,IAAI,CAAC1B,SAAS,CAACC,YAAY,IAAI,CAACD,SAAS,CAACC,YAAY,CAACK,YAAY,EAAE;EACjEoC,KAAK,CAAC,iEAAiE,CAAC;AAC5E;AAGA,IAAI,EAAE/C,aAAa,YAAYiB,aAAa,CAAC,EAAE;EAC3Cf,OAAO,CAAC6B,KAAK,CAAC,oDAAoD,CAAC;AACvE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}