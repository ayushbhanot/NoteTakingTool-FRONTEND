{"ast":null,"code":"let recognition;\nexport let finalTranscript = ''; // This will hold the full transcript\nlet interimTranscript = ''; // This will hold the interim transcript during a session\nlet isRecognitionRunning = false;\nlet shouldRestart = true; // New flag to control whether to restart\nlet inactivityTimeout; // For tracking inactivity timeout\nconst INACTIVITY_THRESHOLD = 30000; // 30 seconds of inactivity before restarting\nconst RESTART_DELAY = 550; // 2-second delay before restarting\nconst CHARACTER_THRESHOLD = 300; // Threshold for interim transcript size\n\nexport function initializeRecognition() {\n  window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  if (!window.SpeechRecognition) {\n    alert('Browser does not support SpeechRecognition API.');\n    console.log('SpeechRecognition API not supported');\n    return;\n  }\n  recognition = new window.SpeechRecognition();\n  recognition.continuous = true; // Keep recognition continuous\n  recognition.interimResults = true;\n  recognition.lang = 'en-US';\n  recognition.onresult = event => {\n    clearTimeout(inactivityTimeout); // Clear any existing inactivity timeout\n    let interim = '';\n    for (let i = event.resultIndex; i < event.results.length; i++) {\n      const transcript = event.results[i][0].transcript;\n      if (event.results[i].isFinal) {\n        finalTranscript += transcript + ' '; // Append final transcript\n        interimTranscript = ''; // Clear interim transcript\n        console.log('Final Transcript (updated):', finalTranscript);\n      } else {\n        // Continuously append interim results instead of replacing them\n        interimTranscript += transcript; // Append interim results\n        console.log('Interim Transcript (updated):', interimTranscript);\n      }\n    }\n  };\n  recognition.onspeechend = () => {\n    console.log('Speech ended. Waiting to see if the user continues...');\n    inactivityTimeout = setTimeout(() => {\n      if (isRecognitionRunning && shouldRestart) {\n        console.log('No further speech detected. Restarting recognition...');\n        restartRecognition();\n      }\n    }, 10000); // Wait for 10 seconds before considering it a full stop\n  };\n  recognition.onerror = event => {\n    console.log('Recognition error:', event.error);\n    if (event.error === 'no-speech') {\n      console.log('No speech detected.');\n    } else if (event.error === 'aborted') {\n      console.log('Recognition aborted unexpectedly.');\n    } else {\n      console.log('Other error:', event.error);\n    }\n\n    // Optionally restart recognition depending on error type\n    restartRecognition();\n  };\n  recognition.onend = () => {\n    console.log('Recognition ended.');\n    if (interimTranscript.trim() !== '') {\n      finalTranscript += interimTranscript.trim() + ' ';\n      interimTranscript = '';\n      console.log('Appended final Interim Transcript:', finalTranscript);\n    }\n    if (isRecognitionRunning && shouldRestart) {\n      console.log('Recognition stopped unexpectedly. Restarting...');\n      restartRecognition();\n    } else {\n      console.log('No restart needed.');\n    }\n  };\n  console.log('Speech recognition initialized.');\n}\n\n// Start Speech Recognition\nexport function startRecognition() {\n  if (!isRecognitionRunning) {\n    console.log('Starting recognition...');\n    try {\n      recognition.start();\n      isRecognitionRunning = true;\n    } catch (error) {\n      console.log('Recognition start failed:', error);\n      // Retry after a short delay if start fails\n      setTimeout(startRecognition, 1000);\n    }\n  } else {\n    console.log('Recognition already running.');\n  }\n}\nexport async function startSpeechRecognition() {\n  const permissionGranted = await requestMicPermission();\n  if (!permissionGranted) return;\n  if (!recognition) {\n    initializeRecognition();\n  }\n  startRecognition();\n}\n\n// Stop Speech Recognition\nexport function stopRecognition() {\n  if (isRecognitionRunning) {\n    console.log('Stopping recognition...');\n\n    // Append any remaining interim transcript to the final transcript\n    if (interimTranscript.trim() !== '') {\n      finalTranscript += interimTranscript.trim() + ' ';\n      interimTranscript = ''; // Clear interim transcript\n      console.log('Appended final Interim Transcript:', finalTranscript);\n    }\n    shouldRestart = false; // Prevent unwanted restarts\n    recognition.stop();\n    clearTimeout(inactivityTimeout);\n    isRecognitionRunning = false;\n  }\n}\nlet cooldownActive = false; // New flag to prevent immediate restarts\n\nfunction restartRecognition() {\n  if (!shouldRestart || cooldownActive) return; // Prevent restarts if manually stopped or cooldown active\n\n  cooldownActive = true; // Activate cooldown\n  console.log('Stopping recognition before restarting...');\n  recognition.stop();\n  isRecognitionRunning = false;\n  setTimeout(() => {\n    console.log('Restarting recognition...');\n    startRecognition();\n    cooldownActive = false; // Release cooldown after restart\n  }, 2000); // Adjust the restart delay as needed\n}\nexport function resetTranscript() {\n  finalTranscript = ''; // Reset the final transcript manually when called\n  console.log('Transcript has been reset.');\n}\n\n// Request microphone permission\nexport async function requestMicPermission() {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    stream.getTracks().forEach(track => track.stop());\n    console.log('Microphone permission granted');\n    return true;\n  } catch (error) {\n    alert('Microphone access is required.');\n    console.log('Microphone permission denied');\n    return false;\n  }\n}\n\n// Export the final transcript for use elsewhere\nexport const getFinalTranscript = () => finalTranscript;","map":{"version":3,"names":["recognition","finalTranscript","interimTranscript","isRecognitionRunning","shouldRestart","inactivityTimeout","INACTIVITY_THRESHOLD","RESTART_DELAY","CHARACTER_THRESHOLD","initializeRecognition","window","SpeechRecognition","webkitSpeechRecognition","alert","console","log","continuous","interimResults","lang","onresult","event","clearTimeout","interim","i","resultIndex","results","length","transcript","isFinal","onspeechend","setTimeout","restartRecognition","onerror","error","onend","trim","startRecognition","start","startSpeechRecognition","permissionGranted","requestMicPermission","stopRecognition","stop","cooldownActive","resetTranscript","stream","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","track","getFinalTranscript"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["let recognition;\nexport let finalTranscript = ''; // This will hold the full transcript\nlet interimTranscript = ''; // This will hold the interim transcript during a session\nlet isRecognitionRunning = false;\nlet shouldRestart = true;  // New flag to control whether to restart\nlet inactivityTimeout; // For tracking inactivity timeout\nconst INACTIVITY_THRESHOLD = 30000; // 30 seconds of inactivity before restarting\nconst RESTART_DELAY = 550;  // 2-second delay before restarting\nconst CHARACTER_THRESHOLD = 300; // Threshold for interim transcript size\n\nexport function initializeRecognition() {\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!window.SpeechRecognition) {\n        alert('Browser does not support SpeechRecognition API.');\n        console.log('SpeechRecognition API not supported');\n        return;\n    }\n\n    recognition = new window.SpeechRecognition();\n    recognition.continuous = true;  // Keep recognition continuous\n    recognition.interimResults = true;\n    recognition.lang = 'en-US';\n\n    recognition.onresult = (event) => {\n        clearTimeout(inactivityTimeout);  // Clear any existing inactivity timeout\n        let interim = '';\n    \n        for (let i = event.resultIndex; i < event.results.length; i++) {\n            const transcript = event.results[i][0].transcript;\n    \n            if (event.results[i].isFinal) {\n                finalTranscript += transcript + ' ';  // Append final transcript\n                interimTranscript = '';  // Clear interim transcript\n                console.log('Final Transcript (updated):', finalTranscript);\n            } else {\n                // Continuously append interim results instead of replacing them\n                interimTranscript += transcript;  // Append interim results\n                console.log('Interim Transcript (updated):', interimTranscript);\n            }\n        }\n    };\n    \n    \n    recognition.onspeechend = () => {\n        console.log('Speech ended. Waiting to see if the user continues...');\n        inactivityTimeout = setTimeout(() => {\n            if (isRecognitionRunning && shouldRestart) {\n                console.log('No further speech detected. Restarting recognition...');\n                restartRecognition();\n            }\n        }, 10000);  // Wait for 10 seconds before considering it a full stop\n    };\n    \n    \n    recognition.onerror = (event) => {\n        console.log('Recognition error:', event.error);\n    \n        if (event.error === 'no-speech') {\n            console.log('No speech detected.');\n        } else if (event.error === 'aborted') {\n            console.log('Recognition aborted unexpectedly.');\n        } else {\n            console.log('Other error:', event.error);\n        }\n        \n        // Optionally restart recognition depending on error type\n        restartRecognition();\n    };\n    \n    \n    recognition.onend = () => {\n        console.log('Recognition ended.');\n        if (interimTranscript.trim() !== '') {\n            finalTranscript += interimTranscript.trim() + ' ';\n            interimTranscript = '';\n            console.log('Appended final Interim Transcript:', finalTranscript);\n        }\n    \n        if (isRecognitionRunning && shouldRestart) {\n            console.log('Recognition stopped unexpectedly. Restarting...');\n            restartRecognition();\n        } else {\n            console.log('No restart needed.');\n        }\n    };\n    \n    \n\n    console.log('Speech recognition initialized.');\n}\n\n\n// Start Speech Recognition\nexport function startRecognition() {\n    if (!isRecognitionRunning) {\n        console.log('Starting recognition...');\n        try {\n            recognition.start();\n            isRecognitionRunning = true;\n        } catch (error) {\n            console.log('Recognition start failed:', error);\n            // Retry after a short delay if start fails\n            setTimeout(startRecognition, 1000);\n        }\n    } else {\n        console.log('Recognition already running.');\n    }\n}\n\nexport async function startSpeechRecognition() {\n    const permissionGranted = await requestMicPermission();\n    if (!permissionGranted) return;\n\n    if (!recognition) {\n        initializeRecognition();\n    }\n    startRecognition();\n}\n\n\n// Stop Speech Recognition\nexport function stopRecognition() {\n    if (isRecognitionRunning) {\n        console.log('Stopping recognition...');\n\n        // Append any remaining interim transcript to the final transcript\n        if (interimTranscript.trim() !== '') {\n            finalTranscript += interimTranscript.trim() + ' ';\n            interimTranscript = '';  // Clear interim transcript\n            console.log('Appended final Interim Transcript:', finalTranscript);\n        }\n\n        shouldRestart = false;  // Prevent unwanted restarts\n        recognition.stop();\n        clearTimeout(inactivityTimeout);\n        isRecognitionRunning = false;\n    }\n}\n\n\n\nlet cooldownActive = false;  // New flag to prevent immediate restarts\n\nfunction restartRecognition() {\n    if (!shouldRestart || cooldownActive) return;  // Prevent restarts if manually stopped or cooldown active\n\n    cooldownActive = true;  // Activate cooldown\n    console.log('Stopping recognition before restarting...');\n    recognition.stop();\n    isRecognitionRunning = false;\n\n    setTimeout(() => {\n        console.log('Restarting recognition...');\n        startRecognition();\n        cooldownActive = false;  // Release cooldown after restart\n    }, 2000);  // Adjust the restart delay as needed\n}\n\n\nexport function resetTranscript() {\n    finalTranscript = '';  // Reset the final transcript manually when called\n    console.log('Transcript has been reset.');\n}\n\n\n// Request microphone permission\nexport async function requestMicPermission() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        stream.getTracks().forEach(track => track.stop());\n        console.log('Microphone permission granted');\n        return true;\n    } catch (error) {\n        alert('Microphone access is required.');\n        console.log('Microphone permission denied');\n        return false;\n    }\n}\n\n// Export the final transcript for use elsewhere\nexport const getFinalTranscript = () => finalTranscript;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}