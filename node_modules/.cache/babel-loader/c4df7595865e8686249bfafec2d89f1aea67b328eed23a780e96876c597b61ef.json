{"ast":null,"code":"let recognition;\nexport let finalTranscript = ''; // This will hold the full transcript\nlet interimTranscript = ''; // This will hold the interim transcript during a session\nlet isRecognitionRunning = false;\nlet inactivityTimeout; // For tracking inactivity timeout\nconst INACTIVITY_THRESHOLD = 10000; // Waits 10 seconds of inactivity before restarting\nconst RESTART_DELAY = 1000; // 1-second delay before restarting\nconst CHARACTER_THRESHOLD = 300; // Threshold for interim transcript size\n\n// Request microphone permission\nasync function requestMicPermission() {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    stream.getTracks().forEach(track => track.stop());\n    console.log('Microphone permission granted');\n    return true;\n  } catch (error) {\n    alert('Microphone access is required.');\n    console.log('Microphone permission denied');\n    return false;\n  }\n}\n\n// Initialize SpeechRecognition API\nfunction initializeRecognition() {\n  window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  if (!window.SpeechRecognition) {\n    alert('Browser does not support SpeechRecognition API.');\n    console.log('SpeechRecognition API not supported');\n    return;\n  }\n  recognition = new window.SpeechRecognition();\n  recognition.continuous = true; // Keep recognition continuous\n  recognition.interimResults = true;\n  recognition.lang = 'en-US';\n  recognition.onresult = event => {\n    clearTimeout(inactivityTimeout); // Clear inactivity timeout on result\n    let interim = '';\n    for (let i = event.resultIndex; i < event.results.length; i++) {\n      const transcript = event.results[i][0].transcript;\n\n      // If result is final, add it to the final transcript\n      if (event.results[i].isFinal) {\n        finalTranscript += transcript + ' '; // Append final transcript\n        interimTranscript = ''; // Clear interim transcript when a final result is processed\n        console.log('Final Transcript (updated):', finalTranscript);\n      } else {\n        interim = transcript; // Update interim transcript\n      }\n    }\n\n    // Replace interim transcript, not append, to avoid duplicates\n    interimTranscript = interim;\n\n    // Log the latest interim result for debugging purposes\n    console.log('Interim Transcript (updated):', interimTranscript);\n\n    // Append interim transcript to finalTranscript if it exceeds the character threshold\n    if (interimTranscript.length > CHARACTER_THRESHOLD) {\n      finalTranscript += interimTranscript.trim() + ' ';\n      interimTranscript = ''; // Reset interim transcript after appending\n      console.log('Appended Interim Transcript:', finalTranscript);\n    }\n\n    // Restart if no activity for a defined threshold duration\n    inactivityTimeout = setTimeout(() => {\n      console.log('No activity detected. Restarting recognition...');\n      restartRecognition();\n    }, INACTIVITY_THRESHOLD);\n  };\n  recognition.onerror = event => {\n    console.log('Recognition error:', event.error);\n    restartRecognition();\n  };\n  recognition.onend = () => {\n    console.log('Recognition ended.');\n    // Append any remaining interim transcript to the final transcript\n    if (interimTranscript.trim() !== '') {\n      finalTranscript += interimTranscript.trim() + ' ';\n      interimTranscript = ''; // Reset interim transcript after appending\n      console.log('Appended final Interim Transcript:', finalTranscript);\n    }\n    if (isRecognitionRunning) {\n      console.log('Recognition stopped unexpectedly. Restarting...');\n      restartRecognition(); // Restart when stopped unexpectedly\n    }\n  };\n  console.log('Speech recognition initialized.');\n}\n\n// Start Speech Recognition\nexport async function startSpeechRecognition() {\n  if (!isRecognitionRunning) {\n    finalTranscript = ''; // Reset final transcript for new session\n    interimTranscript = ''; // Reset interim transcript for new session\n    const permissionGranted = await requestMicPermission();\n    if (!permissionGranted) return;\n    if (!recognition) initializeRecognition();\n    startRecognition();\n  }\n}\n\n// Function to start recognition\nfunction startRecognition() {\n  if (!isRecognitionRunning) {\n    console.log('Starting recognition...');\n    try {\n      recognition.start();\n      isRecognitionRunning = true;\n    } catch (error) {\n      console.log('Recognition start failed:', error);\n    }\n  } else {\n    console.log('Recognition already running.');\n  }\n}\n\n// Restart recognition with a delay\nfunction restartRecognition() {\n  if (isRecognitionRunning) {\n    console.log('Stopping recognition before restarting...');\n    recognition.stop();\n    isRecognitionRunning = false;\n    setTimeout(() => {\n      console.log('Restarting recognition...');\n      startRecognition(); // Restart after delay\n    }, RESTART_DELAY);\n  }\n}\n\n// Stop recognition\nexport function stopRecognition() {\n  if (isRecognitionRunning) {\n    console.log('Stopping recognition...');\n    recognition.stop();\n    clearTimeout(inactivityTimeout); // Clear timeout when stopping\n    isRecognitionRunning = false;\n  }\n}\n\n// Export the final transcript for use elsewhere\nexport const getFinalTranscript = () => finalTranscript;","map":{"version":3,"names":["recognition","finalTranscript","interimTranscript","isRecognitionRunning","inactivityTimeout","INACTIVITY_THRESHOLD","RESTART_DELAY","CHARACTER_THRESHOLD","requestMicPermission","stream","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","track","stop","console","log","error","alert","initializeRecognition","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","clearTimeout","interim","i","resultIndex","results","length","transcript","isFinal","trim","setTimeout","restartRecognition","onerror","onend","startSpeechRecognition","permissionGranted","startRecognition","start","stopRecognition","getFinalTranscript"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["let recognition;\nexport let finalTranscript = ''; // This will hold the full transcript\nlet interimTranscript = ''; // This will hold the interim transcript during a session\nlet isRecognitionRunning = false;\nlet inactivityTimeout; // For tracking inactivity timeout\nconst INACTIVITY_THRESHOLD = 10000; // Waits 10 seconds of inactivity before restarting\nconst RESTART_DELAY = 1000;  // 1-second delay before restarting\nconst CHARACTER_THRESHOLD = 300; // Threshold for interim transcript size\n\n// Request microphone permission\nasync function requestMicPermission() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        stream.getTracks().forEach(track => track.stop());\n        console.log('Microphone permission granted');\n        return true;\n    } catch (error) {\n        alert('Microphone access is required.');\n        console.log('Microphone permission denied');\n        return false;\n    }\n}\n\n// Initialize SpeechRecognition API\nfunction initializeRecognition() {\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!window.SpeechRecognition) {\n        alert('Browser does not support SpeechRecognition API.');\n        console.log('SpeechRecognition API not supported');\n        return;\n    }\n\n    recognition = new window.SpeechRecognition();\n    recognition.continuous = true; // Keep recognition continuous\n    recognition.interimResults = true;\n    recognition.lang = 'en-US';\n\n    recognition.onresult = (event) => {\n        clearTimeout(inactivityTimeout); // Clear inactivity timeout on result\n        let interim = '';\n    \n        for (let i = event.resultIndex; i < event.results.length; i++) {\n            const transcript = event.results[i][0].transcript;\n    \n            // If result is final, add it to the final transcript\n            if (event.results[i].isFinal) {\n                finalTranscript += transcript + ' '; // Append final transcript\n                interimTranscript = ''; // Clear interim transcript when a final result is processed\n                console.log('Final Transcript (updated):', finalTranscript);\n            } else {\n                interim = transcript; // Update interim transcript\n            }\n        }\n    \n        // Replace interim transcript, not append, to avoid duplicates\n        interimTranscript = interim;\n        \n        // Log the latest interim result for debugging purposes\n        console.log('Interim Transcript (updated):', interimTranscript);\n    \n        // Append interim transcript to finalTranscript if it exceeds the character threshold\n        if (interimTranscript.length > CHARACTER_THRESHOLD) {\n            finalTranscript += interimTranscript.trim() + ' ';\n            interimTranscript = ''; // Reset interim transcript after appending\n            console.log('Appended Interim Transcript:', finalTranscript);\n        }\n    \n        // Restart if no activity for a defined threshold duration\n        inactivityTimeout = setTimeout(() => {\n            console.log('No activity detected. Restarting recognition...');\n            restartRecognition();\n        }, INACTIVITY_THRESHOLD);\n    };\n    \n    recognition.onerror = (event) => {\n        console.log('Recognition error:', event.error);\n        restartRecognition();\n    };\n\n    recognition.onend = () => {\n        console.log('Recognition ended.');\n        // Append any remaining interim transcript to the final transcript\n        if (interimTranscript.trim() !== '') {\n            finalTranscript += interimTranscript.trim() + ' ';\n            interimTranscript = ''; // Reset interim transcript after appending\n            console.log('Appended final Interim Transcript:', finalTranscript);\n        }\n\n        if (isRecognitionRunning) {\n            console.log('Recognition stopped unexpectedly. Restarting...');\n            restartRecognition(); // Restart when stopped unexpectedly\n        }\n    };\n\n    console.log('Speech recognition initialized.');\n}\n\n// Start Speech Recognition\nexport async function startSpeechRecognition() {\n    if (!isRecognitionRunning) {\n        finalTranscript = '';  // Reset final transcript for new session\n        interimTranscript = ''; // Reset interim transcript for new session\n        const permissionGranted = await requestMicPermission();\n        if (!permissionGranted) return;\n\n        if (!recognition) initializeRecognition();\n        startRecognition();\n    }\n}\n\n// Function to start recognition\nfunction startRecognition() {\n    if (!isRecognitionRunning) {\n        console.log('Starting recognition...');\n        try {\n            recognition.start();\n            isRecognitionRunning = true;\n        } catch (error) {\n            console.log('Recognition start failed:', error);\n        }\n    } else {\n        console.log('Recognition already running.');\n    }\n}\n\n// Restart recognition with a delay\nfunction restartRecognition() {\n    if (isRecognitionRunning) {\n        console.log('Stopping recognition before restarting...');\n        recognition.stop();\n        isRecognitionRunning = false;\n\n        setTimeout(() => {\n            console.log('Restarting recognition...');\n            startRecognition();  // Restart after delay\n        }, RESTART_DELAY);\n    }\n}\n\n// Stop recognition\nexport function stopRecognition() {\n    if (isRecognitionRunning) {\n        console.log('Stopping recognition...');\n        recognition.stop();\n        clearTimeout(inactivityTimeout); // Clear timeout when stopping\n        isRecognitionRunning = false;\n    }\n}\n\n// Export the final transcript for use elsewhere\nexport const getFinalTranscript = () => finalTranscript;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}