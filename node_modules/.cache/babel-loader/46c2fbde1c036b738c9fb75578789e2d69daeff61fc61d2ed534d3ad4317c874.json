{"ast":null,"code":"// let mediaRecorder = null; // Declare globally (commented out, we won't use MediaRecorder)\n// Function to check WebkitSpeechRecognition support\n/*function checkSpeechRecognitionSupport() {\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!window.SpeechRecognition) {\n        console.error('SpeechRecognition API not supported.');\n        alert('Your browser does not support speech recognition features.');\n        return false;\n    }\n    return true;\n}\n\n// Check for WebkitSpeechRecognition support early\nif (!checkSpeechRecognitionSupport()) {\n    alert('Your browser does not support the necessary speech recognition features.');\n}\n\n// Initialize WebkitSpeechRecognition\nconst recognition = new window.SpeechRecognition();\nrecognition.continuous = true;\nrecognition.interimResults = true; // Set to true to capture partial results\nrecognition.lang = 'en-US';\nlet isRecognitionRunning = false;\nlet finalTranscript = '';  // Store final transcript globally\n\n// Function to request microphone permission\nasync function requestMicPermission() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        console.log('Microphone permission granted');\n        stream.getTracks().forEach(track => track.stop());  // Stop the stream immediately\n        return true;\n    } catch (error) {\n        console.error('Microphone permission denied:', error);\n        alert('Microphone access is required for speech recognition.');\n        return false;\n    }\n}\n\n// Start speech recognition function\nexport async function startSpeechRecognition() {\n    const permissionGranted = await requestMicPermission();  // Ensure permission is granted\n    if (!permissionGranted) return;\n\n    if (isRecognitionRunning) {\n        console.error(\"Speech recognition is already running.\");\n        return;\n    }\n    try {\n        finalTranscript = '';  // Clear transcript on new session\n        recognition.start();\n        isRecognitionRunning = true;\n        console.log('Speech recognition started.');\n    } catch (error) {\n        console.error('Error starting speech recognition:', error);\n    }\n}\n\n// Stop speech recognition function\nexport function stopSpeechRecognition() {\n    if (!isRecognitionRunning) {\n        console.error(\"Speech recognition is not running.\");\n        return;\n    }\n    console.log('Stopping speech recognition...');\n    recognition.stop();\n}\n\n// Handle when recognition ends\nrecognition.onend = () => {\n    isRecognitionRunning = false;\n    console.log('Speech recognition stopped.');\n    \n    // Send the final transcript to backend for transcription when stopped\n    if (finalTranscript) {\n        processTranscript(finalTranscript);  // Send final transcript to backend\n    } else {\n        console.error(\"No transcript available to send.\");\n    }\n};\n\n// Handle when recognition is aborted\nrecognition.onabort = (event) => {\n    console.error('Speech recognition was aborted:', event);\n    // Optionally, restart recognition if needed\n    setTimeout(() => {\n        console.log('Attempting to restart speech recognition...');\n        startSpeechRecognition();\n    }, 1000);  // Delay to prevent immediate restart\n};\n\n// Process the transcript and send to backend\n// Process the transcript and send to backend\nexport const processTranscript = async (transcript) => {\n    try {\n        // Send as JSON, not FormData, because the backend likely expects a JSON payload\n        const response = await fetch('http://localhost:3001/generateNotes', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ transcript }),  // Send the transcript as JSON\n        });\n\n        if (!response.ok) {\n            throw new Error(`Server error: ${response.status}`);\n        }\n\n        const result = await response.json();\n        console.log('Generated notes:', result);\n    } catch (error) {\n        console.error('Error sending transcript to backend:', error);\n    }\n};\n\n\n// Event handler for when recognition results are available\nrecognition.onresult = (event) => {\n    let interimTranscript = '';\n\n    for (let i = event.resultIndex; i < event.results.length; i++) {\n        const result = event.results[i];\n        if (result.isFinal) {\n            finalTranscript += result[0].transcript;\n        } else {\n            interimTranscript += result[0].transcript;\n        }\n    }\n\n    console.log('Interim Transcript:', interimTranscript);\n    console.log('Final Transcript:', finalTranscript);  // Only append the final result once\n};\n\nrecognition.onerror = (event) => {\n    console.error('Speech Recognition Error:', event.error);\n\n    // Handle specific \"no-speech\" error\n    if (event.error === 'no-speech') {\n        console.log('No speech detected. Please try speaking more clearly.');\n        alert('No speech detected. Please try again.');\n        // Optionally, restart the recognition\n        setTimeout(() => {\n            console.log('Restarting speech recognition after no-speech error...');\n            startSpeechRecognition();\n        }, 1000);  // Delay before restarting\n    }\n\n    if (event.error === 'audio-capture') {\n        console.error('Microphone access issue.');\n        alert('Please check your microphone permissions.');\n    }\n};\nrecognition.onabort = (event) => {\n    console.error('Speech recognition was aborted:', event);\n    // Optionally restart recognition\n    setTimeout(() => {\n        console.log('Attempting to restart speech recognition...');\n        startSpeechRecognition();\n    }, 1000);  // Delay to prevent immediate restart\n};\n*/// COMMENTED OUT MEDIARECORDER CODE\nlet mediaRecorder=null;// Declare MediaRecorder globally\nexport async function startRecording(){console.log('Attempting to start recording...');try{const micStream=await navigator.mediaDevices.getUserMedia({audio:{echoCancellation:false,noiseSuppression:false,sampleRate:44100}});console.log('Microphone stream acquired:',micStream);const combinedStream=micStream;console.log('Combined stream:',combinedStream);if(combinedStream.getAudioTracks().length===0){throw new Error('Combined stream has no audio tracks.');}let options={mimeType:'audio/webm; codecs=opus'};if(!MediaRecorder.isTypeSupported(options.mimeType)){options={mimeType:'audio/webm'};}if(!MediaRecorder.isTypeSupported(options.mimeType)){options={mimeType:'audio/mp4'};}if(!MediaRecorder.isTypeSupported(options.mimeType)){options={};}mediaRecorder=new MediaRecorder(combinedStream,options);console.log('MediaRecorder initialized:',mediaRecorder);let audioChunks=[];mediaRecorder.ondataavailable=event=>{if(event.data.size>0){audioChunks.push(event.data);console.log('Audio chunk available:',event.data);// Process each audio chunk separately here\nprocessAudioChunk(event.data);// Process the audio chunk while recording\n}};mediaRecorder.onstart=()=>{console.log('Recording started.');};mediaRecorder.onstop=()=>{console.log('Recording stopped.');const audioBlob=new Blob(audioChunks,{type:options.mimeType||'audio/webm'});console.log('Audio Blob size:',audioBlob.size);if(audioBlob.size>0){processAudioChunk(audioBlob);// Process the full audio blob at the end of recording\n}else{console.error('Audio Blob is empty, not sending to backend');}};mediaRecorder.onerror=event=>{console.error('MediaRecorder error:',event.error);};// Start recording with a timeslice of 30 seconds (30000 ms) to generate chunks every 30 seconds\nmediaRecorder.start(30000);// Collect blobs every 30 seconds\n}catch(error){console.error('Error capturing audio:',error);}}export function stopRecording(){if(mediaRecorder){if(mediaRecorder.state!=='inactive'){console.log('Stopping recording...');mediaRecorder.stop();}else{console.error('MediaRecorder is inactive.');}}else{console.error('No MediaRecorder instance found.');}}// Process the recorded audio chunk and send it to the backend for transcription\nexport async function processAudioChunk(audioBlob){console.log('Processing audio chunk for upload...');const formData=new FormData();formData.append('audio',audioBlob,'recording.webm');// Append audio Blob to FormData\ntry{const response=await fetch('http://localhost:3001/transcribe',{method:'POST',body:formData// Send the FormData with the audio file\n});if(!response.ok){throw new Error(`Server error: ${response.status}`);}const result=await response.json();console.log('Transcription result:',result);}catch(error){console.error('Error uploading audio:',error);}}","map":{"version":3,"names":["mediaRecorder","startRecording","console","log","micStream","navigator","mediaDevices","getUserMedia","audio","echoCancellation","noiseSuppression","sampleRate","combinedStream","getAudioTracks","length","Error","options","mimeType","MediaRecorder","isTypeSupported","audioChunks","ondataavailable","event","data","size","push","processAudioChunk","onstart","onstop","audioBlob","Blob","type","error","onerror","start","stopRecording","state","stop","formData","FormData","append","response","fetch","method","body","ok","status","result","json"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["// let mediaRecorder = null; // Declare globally (commented out, we won't use MediaRecorder)\n\n// Function to check WebkitSpeechRecognition support\n/*function checkSpeechRecognitionSupport() {\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!window.SpeechRecognition) {\n        console.error('SpeechRecognition API not supported.');\n        alert('Your browser does not support speech recognition features.');\n        return false;\n    }\n    return true;\n}\n\n// Check for WebkitSpeechRecognition support early\nif (!checkSpeechRecognitionSupport()) {\n    alert('Your browser does not support the necessary speech recognition features.');\n}\n\n// Initialize WebkitSpeechRecognition\nconst recognition = new window.SpeechRecognition();\nrecognition.continuous = true;\nrecognition.interimResults = true; // Set to true to capture partial results\nrecognition.lang = 'en-US';\nlet isRecognitionRunning = false;\nlet finalTranscript = '';  // Store final transcript globally\n\n// Function to request microphone permission\nasync function requestMicPermission() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        console.log('Microphone permission granted');\n        stream.getTracks().forEach(track => track.stop());  // Stop the stream immediately\n        return true;\n    } catch (error) {\n        console.error('Microphone permission denied:', error);\n        alert('Microphone access is required for speech recognition.');\n        return false;\n    }\n}\n\n// Start speech recognition function\nexport async function startSpeechRecognition() {\n    const permissionGranted = await requestMicPermission();  // Ensure permission is granted\n    if (!permissionGranted) return;\n\n    if (isRecognitionRunning) {\n        console.error(\"Speech recognition is already running.\");\n        return;\n    }\n    try {\n        finalTranscript = '';  // Clear transcript on new session\n        recognition.start();\n        isRecognitionRunning = true;\n        console.log('Speech recognition started.');\n    } catch (error) {\n        console.error('Error starting speech recognition:', error);\n    }\n}\n\n// Stop speech recognition function\nexport function stopSpeechRecognition() {\n    if (!isRecognitionRunning) {\n        console.error(\"Speech recognition is not running.\");\n        return;\n    }\n    console.log('Stopping speech recognition...');\n    recognition.stop();\n}\n\n// Handle when recognition ends\nrecognition.onend = () => {\n    isRecognitionRunning = false;\n    console.log('Speech recognition stopped.');\n    \n    // Send the final transcript to backend for transcription when stopped\n    if (finalTranscript) {\n        processTranscript(finalTranscript);  // Send final transcript to backend\n    } else {\n        console.error(\"No transcript available to send.\");\n    }\n};\n\n// Handle when recognition is aborted\nrecognition.onabort = (event) => {\n    console.error('Speech recognition was aborted:', event);\n    // Optionally, restart recognition if needed\n    setTimeout(() => {\n        console.log('Attempting to restart speech recognition...');\n        startSpeechRecognition();\n    }, 1000);  // Delay to prevent immediate restart\n};\n\n// Process the transcript and send to backend\n// Process the transcript and send to backend\nexport const processTranscript = async (transcript) => {\n    try {\n        // Send as JSON, not FormData, because the backend likely expects a JSON payload\n        const response = await fetch('http://localhost:3001/generateNotes', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ transcript }),  // Send the transcript as JSON\n        });\n\n        if (!response.ok) {\n            throw new Error(`Server error: ${response.status}`);\n        }\n\n        const result = await response.json();\n        console.log('Generated notes:', result);\n    } catch (error) {\n        console.error('Error sending transcript to backend:', error);\n    }\n};\n\n\n// Event handler for when recognition results are available\nrecognition.onresult = (event) => {\n    let interimTranscript = '';\n\n    for (let i = event.resultIndex; i < event.results.length; i++) {\n        const result = event.results[i];\n        if (result.isFinal) {\n            finalTranscript += result[0].transcript;\n        } else {\n            interimTranscript += result[0].transcript;\n        }\n    }\n\n    console.log('Interim Transcript:', interimTranscript);\n    console.log('Final Transcript:', finalTranscript);  // Only append the final result once\n};\n\nrecognition.onerror = (event) => {\n    console.error('Speech Recognition Error:', event.error);\n\n    // Handle specific \"no-speech\" error\n    if (event.error === 'no-speech') {\n        console.log('No speech detected. Please try speaking more clearly.');\n        alert('No speech detected. Please try again.');\n        // Optionally, restart the recognition\n        setTimeout(() => {\n            console.log('Restarting speech recognition after no-speech error...');\n            startSpeechRecognition();\n        }, 1000);  // Delay before restarting\n    }\n\n    if (event.error === 'audio-capture') {\n        console.error('Microphone access issue.');\n        alert('Please check your microphone permissions.');\n    }\n};\nrecognition.onabort = (event) => {\n    console.error('Speech recognition was aborted:', event);\n    // Optionally restart recognition\n    setTimeout(() => {\n        console.log('Attempting to restart speech recognition...');\n        startSpeechRecognition();\n    }, 1000);  // Delay to prevent immediate restart\n};\n*/\n\n// COMMENTED OUT MEDIARECORDER CODE\n\nlet mediaRecorder = null; // Declare MediaRecorder globally\n\nexport async function startRecording() {\n    console.log('Attempting to start recording...');\n    try {\n        const micStream = await navigator.mediaDevices.getUserMedia({\n            audio: {\n                echoCancellation: false,\n                noiseSuppression: false,\n                sampleRate: 44100\n            }\n        });\n        console.log('Microphone stream acquired:', micStream);\n\n        const combinedStream = micStream;\n        console.log('Combined stream:', combinedStream);\n\n        if (combinedStream.getAudioTracks().length === 0) {\n            throw new Error('Combined stream has no audio tracks.');\n        }\n\n        let options = { mimeType: 'audio/webm; codecs=opus' };\n        if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n            options = { mimeType: 'audio/webm' };\n        }\n        if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n            options = { mimeType: 'audio/mp4' };\n        }\n        if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n            options = {};\n        }\n\n        mediaRecorder = new MediaRecorder(combinedStream, options);\n        console.log('MediaRecorder initialized:', mediaRecorder);\n\n        let audioChunks = [];\n        mediaRecorder.ondataavailable = (event) => {\n            if (event.data.size > 0) {\n                audioChunks.push(event.data);\n                console.log('Audio chunk available:', event.data);\n                // Process each audio chunk separately here\n                processAudioChunk(event.data);  // Process the audio chunk while recording\n            }\n        };\n\n        mediaRecorder.onstart = () => {\n            console.log('Recording started.');\n        };\n\n        mediaRecorder.onstop = () => {\n            console.log('Recording stopped.');\n            const audioBlob = new Blob(audioChunks, { type: options.mimeType || 'audio/webm' });\n            console.log('Audio Blob size:', audioBlob.size);\n            if (audioBlob.size > 0) {\n                processAudioChunk(audioBlob);  // Process the full audio blob at the end of recording\n            } else {\n                console.error('Audio Blob is empty, not sending to backend');\n            }\n        };\n\n        mediaRecorder.onerror = (event) => {\n            console.error('MediaRecorder error:', event.error);\n        };\n\n        // Start recording with a timeslice of 30 seconds (30000 ms) to generate chunks every 30 seconds\n        mediaRecorder.start(30000);  // Collect blobs every 30 seconds\n    } catch (error) {\n        console.error('Error capturing audio:', error);\n    }\n}\n\nexport function stopRecording() {\n    if (mediaRecorder) {\n        if (mediaRecorder.state !== 'inactive') {\n            console.log('Stopping recording...');\n            mediaRecorder.stop();\n        } else {\n            console.error('MediaRecorder is inactive.');\n        }\n    } else {\n        console.error('No MediaRecorder instance found.');\n    }\n}\n// Process the recorded audio chunk and send it to the backend for transcription\nexport async function processAudioChunk(audioBlob) {\n    console.log('Processing audio chunk for upload...');\n    const formData = new FormData();\n    formData.append('audio', audioBlob, 'recording.webm'); // Append audio Blob to FormData\n\n    try {\n        const response = await fetch('http://localhost:3001/transcribe', {\n            method: 'POST',\n            body: formData, // Send the FormData with the audio file\n        });\n\n        if (!response.ok) {\n            throw new Error(`Server error: ${response.status}`);\n        }\n\n        const result = await response.json();\n        console.log('Transcription result:', result);\n    } catch (error) {\n        console.error('Error uploading audio:', error);\n    }\n}\n\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}