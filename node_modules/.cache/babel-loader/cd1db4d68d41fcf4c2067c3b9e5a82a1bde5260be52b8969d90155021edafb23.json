{"ast":null,"code":"/*import React, { useState } from 'react';\nimport { startSpeechRecognition, stopSpeechRecognition } from './services/audioRecording'; // Adjust path as needed\n\nfunction App() {\n    const [isRecording, setIsRecording] = useState(false);\n\n    const handleStartRecording = async () => {\n        if (isRecording) return; // Prevent starting a new recording if one is already active\n        setIsRecording(true);\n        try {\n            await startSpeechRecognition();\n        } catch (error) {\n            console.error(\"Error starting speech recognition:\", error);\n            setIsRecording(false);\n        }\n    };\n\n    const handleStopRecording = async () => {\n        if (!isRecording) return; // Prevent stopping if no recording is active\n        try {\n            await stopSpeechRecognition();\n        } catch (error) {\n            console.error(\"Error stopping speech recognition:\", error);\n        } finally {\n            setIsRecording(false);\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>Zoom/Google Meet Audio Recorder</h1>\n            <button onClick={handleStartRecording} disabled={isRecording}>\n                Start Speech Recognition\n            </button>\n            <button onClick={handleStopRecording} disabled={!isRecording}>\n                Stop Speech Recognition\n            </button>\n        </div>\n    );\n}\n\nexport default App;\n*//* COMMENTED OUT MEDIARECORDER-BASED HANDLERS */import React,{useState,useEffect}from'react';import{startRecording,stopRecording}from'./services/audioRecording';import NotesUI from'./components/NotesUI';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{const[generatedNotes,setGeneratedNotes]=useState({});// State to hold the notes\nconst[isRecording,setIsRecording]=useState(false);// State to manage recording\n// Function to handle starting the recording\nconst handleStartRecording=async()=>{if(!isRecording){setIsRecording(true);// Set recording to true to disable start button\nawait startRecording(setGeneratedNotes);// Pass setGeneratedNotes to update notes\n}};// Function to handle stopping the recording\nconst handleStopRecording=async()=>{if(isRecording){setIsRecording(false);// Set recording to false to enable start button\nawait stopRecording();const organizedNotes=await generateNotesFromTranscript(combinedTranscript);setGeneratedNotes(organizedNotes);// Update state with organized notes    \n}};// Log whenever generated notes change\nuseEffect(()=>{console.log(\"Generated Notes updated in App:\",generatedNotes);},[generatedNotes]);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Audio Notes\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleStartRecording,disabled:isRecording,children:\"Start Recording\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleStopRecording,disabled:!isRecording,children:\"Stop Recording\"}),/*#__PURE__*/_jsx(NotesUI,{notes:generatedNotes})]});};export default App;","map":{"version":3,"names":["React","useState","useEffect","startRecording","stopRecording","NotesUI","jsx","_jsx","jsxs","_jsxs","App","generatedNotes","setGeneratedNotes","isRecording","setIsRecording","handleStartRecording","handleStopRecording","organizedNotes","generateNotesFromTranscript","combinedTranscript","console","log","children","onClick","disabled","notes"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/App.js"],"sourcesContent":["/*import React, { useState } from 'react';\nimport { startSpeechRecognition, stopSpeechRecognition } from './services/audioRecording'; // Adjust path as needed\n\nfunction App() {\n    const [isRecording, setIsRecording] = useState(false);\n\n    const handleStartRecording = async () => {\n        if (isRecording) return; // Prevent starting a new recording if one is already active\n        setIsRecording(true);\n        try {\n            await startSpeechRecognition();\n        } catch (error) {\n            console.error(\"Error starting speech recognition:\", error);\n            setIsRecording(false);\n        }\n    };\n\n    const handleStopRecording = async () => {\n        if (!isRecording) return; // Prevent stopping if no recording is active\n        try {\n            await stopSpeechRecognition();\n        } catch (error) {\n            console.error(\"Error stopping speech recognition:\", error);\n        } finally {\n            setIsRecording(false);\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>Zoom/Google Meet Audio Recorder</h1>\n            <button onClick={handleStartRecording} disabled={isRecording}>\n                Start Speech Recognition\n            </button>\n            <button onClick={handleStopRecording} disabled={!isRecording}>\n                Stop Speech Recognition\n            </button>\n        </div>\n    );\n}\n\nexport default App;\n*/\n/* COMMENTED OUT MEDIARECORDER-BASED HANDLERS */\nimport React, { useState, useEffect } from 'react';\nimport { startRecording, stopRecording } from './services/audioRecording';\nimport NotesUI from './components/NotesUI';\n\nconst App = () => {\n    const [generatedNotes, setGeneratedNotes] = useState({});  // State to hold the notes\n    const [isRecording, setIsRecording] = useState(false);     // State to manage recording\n\n    // Function to handle starting the recording\n    const handleStartRecording = async () => {\n        if (!isRecording) {\n            setIsRecording(true);  // Set recording to true to disable start button\n            await startRecording(setGeneratedNotes);  // Pass setGeneratedNotes to update notes\n        }\n    };\n\n    // Function to handle stopping the recording\n    const handleStopRecording = async () => {\n        if (isRecording) {\n            setIsRecording(false);  // Set recording to false to enable start button\n            await stopRecording();\n\n            const organizedNotes = await generateNotesFromTranscript(combinedTranscript);\n            setGeneratedNotes(organizedNotes);  // Update state with organized notes    \n        }\n    };\n\n    // Log whenever generated notes change\n    useEffect(() => {\n        console.log(\"Generated Notes updated in App:\", generatedNotes);\n    }, [generatedNotes]);\n\n    return (\n        <div>\n            <h1>Audio Notes</h1>\n            \n            <button onClick={handleStartRecording} disabled={isRecording}>\n                Start Recording\n            </button>\n            <button onClick={handleStopRecording} disabled={!isRecording}>\n                Stop Recording\n            </button>\n            \n            {/* Render Notes UI and pass down generated notes */}\n            <NotesUI notes={generatedNotes} />\n        </div>\n    );\n};\n\nexport default App;\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA,gDACA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,cAAc,CAAEC,aAAa,KAAQ,2BAA2B,CACzE,MAAO,CAAAC,OAAO,KAAM,sBAAsB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE3C,KAAM,CAAAC,GAAG,CAAGA,CAAA,GAAM,CACd,KAAM,CAACC,cAAc,CAAEC,iBAAiB,CAAC,CAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAG;AAC3D,KAAM,CAACY,WAAW,CAAEC,cAAc,CAAC,CAAGb,QAAQ,CAAC,KAAK,CAAC,CAAM;AAE3D;AACA,KAAM,CAAAc,oBAAoB,CAAG,KAAAA,CAAA,GAAY,CACrC,GAAI,CAACF,WAAW,CAAE,CACdC,cAAc,CAAC,IAAI,CAAC,CAAG;AACvB,KAAM,CAAAX,cAAc,CAACS,iBAAiB,CAAC,CAAG;AAC9C,CACJ,CAAC,CAED;AACA,KAAM,CAAAI,mBAAmB,CAAG,KAAAA,CAAA,GAAY,CACpC,GAAIH,WAAW,CAAE,CACbC,cAAc,CAAC,KAAK,CAAC,CAAG;AACxB,KAAM,CAAAV,aAAa,CAAC,CAAC,CAErB,KAAM,CAAAa,cAAc,CAAG,KAAM,CAAAC,2BAA2B,CAACC,kBAAkB,CAAC,CAC5EP,iBAAiB,CAACK,cAAc,CAAC,CAAG;AACxC,CACJ,CAAC,CAED;AACAf,SAAS,CAAC,IAAM,CACZkB,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAEV,cAAc,CAAC,CAClE,CAAC,CAAE,CAACA,cAAc,CAAC,CAAC,CAEpB,mBACIF,KAAA,QAAAa,QAAA,eACIf,IAAA,OAAAe,QAAA,CAAI,aAAW,CAAI,CAAC,cAEpBf,IAAA,WAAQgB,OAAO,CAAER,oBAAqB,CAACS,QAAQ,CAAEX,WAAY,CAAAS,QAAA,CAAC,iBAE9D,CAAQ,CAAC,cACTf,IAAA,WAAQgB,OAAO,CAAEP,mBAAoB,CAACQ,QAAQ,CAAE,CAACX,WAAY,CAAAS,QAAA,CAAC,gBAE9D,CAAQ,CAAC,cAGTf,IAAA,CAACF,OAAO,EAACoB,KAAK,CAAEd,cAAe,CAAE,CAAC,EACjC,CAAC,CAEd,CAAC,CAED,cAAe,CAAAD,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}