{"ast":null,"code":"let mediaRecorder=null;// Declare globally\nexport async function startRecording(){console.log('Attempting to start recording...');try{const screenStream=await navigator.mediaDevices.getDisplayMedia({video:true,audio:false});console.log('Screen stream acquired:',screenStream);const micStream=await navigator.mediaDevices.getUserMedia({audio:true});console.log('Microphone stream acquired:',micStream);const combinedStream=new MediaStream([...screenStream.getAudioTracks(),...micStream.getAudioTracks()]);console.log('Combined stream:',combinedStream);if(combinedStream.getAudioTracks().length===0){throw new Error('Combined stream has no audio tracks.');}mediaRecorder=new MediaRecorder(combinedStream);console.log('MediaRecorder initialized:',mediaRecorder);let audioChunks=[];mediaRecorder.ondataavailable=event=>{if(event.data.size>0){audioChunks.push(event.data);console.log('Audio chunk available:',event.data);}};mediaRecorder.onstart=()=>{console.log('Recording started.');};mediaRecorder.onstop=()=>{console.log('Recording stopped.');const audioBlob=new Blob(audioChunks,{type:'audio/webm'});processAudioChunk(audioBlob);};mediaRecorder.onerror=event=>{console.error('MediaRecorder error:',event.error);};mediaRecorder.start();}catch(error){console.error('Error capturing audio:',error);}}export function stopRecording(){if(mediaRecorder){if(mediaRecorder instanceof MediaRecorder){if(mediaRecorder.state!=='inactive'){console.log('Stopping recording...');mediaRecorder.stop();}else{console.error('MediaRecorder is inactive.');}}else{console.error('mediaRecorder is not an instance of MediaRecorder.');}}else{console.error('No MediaRecorder instance found.');}}export const processAudioChunk=async audioBlob=>{if(!(audioBlob instanceof Blob)){console.error('audioBlob is not a Blob instance.');return;}const formData=new FormData();formData.append('audio',audioBlob,'audio.webm');try{const response=await fetch('http://localhost:3001/transcribe',{method:'POST',body:formData});if(!response.ok){throw new Error(`Server error: ${response.status}`);}const result=await response.json();console.log('Transcription result:',result);}catch(error){console.error('Error sending audio to backend:',error);}};if(!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia){alert('Your browser does not support the necessary APIs for recording.');}if(!(mediaRecorder instanceof MediaRecorder)){console.error('mediaRecorder is not an instance of MediaRecorder.');}function checkMediaRecorderSupport(){if(!window.MediaRecorder){console.error('MediaRecorder API not supported.');return;}}checkMediaRecorderSupport();","map":{"version":3,"names":["mediaRecorder","startRecording","console","log","screenStream","navigator","mediaDevices","getDisplayMedia","video","audio","micStream","getUserMedia","combinedStream","MediaStream","getAudioTracks","length","Error","MediaRecorder","audioChunks","ondataavailable","event","data","size","push","onstart","onstop","audioBlob","Blob","type","processAudioChunk","onerror","error","start","stopRecording","state","stop","formData","FormData","append","response","fetch","method","body","ok","status","result","json","alert","checkMediaRecorderSupport","window"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["let mediaRecorder = null; // Declare globally\n\nexport async function startRecording() {\n    console.log('Attempting to start recording...');\n    try {\n        const screenStream = await navigator.mediaDevices.getDisplayMedia({\n            video: true,\n            audio: false\n        });\n        console.log('Screen stream acquired:', screenStream);\n\n        const micStream = await navigator.mediaDevices.getUserMedia({\n            audio: true\n        });\n        console.log('Microphone stream acquired:', micStream);\n\n        const combinedStream = new MediaStream([\n            ...screenStream.getAudioTracks(),\n            ...micStream.getAudioTracks()\n        ]);\n        console.log('Combined stream:', combinedStream);\n\n        if (combinedStream.getAudioTracks().length === 0) {\n            throw new Error('Combined stream has no audio tracks.');\n        }\n\n        mediaRecorder = new MediaRecorder(combinedStream);\n        console.log('MediaRecorder initialized:', mediaRecorder);\n\n        let audioChunks = [];\n        mediaRecorder.ondataavailable = (event) => {\n            if (event.data.size > 0) {\n                audioChunks.push(event.data);\n                console.log('Audio chunk available:', event.data);\n            }\n        };\n\n        mediaRecorder.onstart = () => {\n            console.log('Recording started.');\n        };\n\n        mediaRecorder.onstop = () => {\n            console.log('Recording stopped.');\n            const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });\n            processAudioChunk(audioBlob);\n        };\n\n        mediaRecorder.onerror = (event) => {\n            console.error('MediaRecorder error:', event.error);\n        };\n\n        mediaRecorder.start();\n    } catch (error) {\n        console.error('Error capturing audio:', error);\n    }\n}\n\nexport function stopRecording() {\n    if (mediaRecorder) {\n        if (mediaRecorder instanceof MediaRecorder) {\n            if (mediaRecorder.state !== 'inactive') {\n                console.log('Stopping recording...');\n                mediaRecorder.stop();\n            } else {\n                console.error('MediaRecorder is inactive.');\n            }\n        } else {\n            console.error('mediaRecorder is not an instance of MediaRecorder.');\n        }\n    } else {\n        console.error('No MediaRecorder instance found.');\n    }\n}\n\n\n\nexport const processAudioChunk = async (audioBlob) => {\n    if (!(audioBlob instanceof Blob)) {\n        console.error('audioBlob is not a Blob instance.');\n        return;\n    }\n\n    const formData = new FormData();\n    formData.append('audio', audioBlob, 'audio.webm');\n\n    try {\n        const response = await fetch('http://localhost:3001/transcribe', {\n            method: 'POST',\n            body: formData,\n        });\n\n        if (!response.ok) {\n            throw new Error(`Server error: ${response.status}`);\n        }\n\n        const result = await response.json();\n        console.log('Transcription result:', result);\n    } catch (error) {\n        console.error('Error sending audio to backend:', error);\n    }\n}\nif (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n    alert('Your browser does not support the necessary APIs for recording.');\n}\n\n\nif (!(mediaRecorder instanceof MediaRecorder)) {\n    console.error('mediaRecorder is not an instance of MediaRecorder.');\n}\nfunction checkMediaRecorderSupport() {\n    if (!window.MediaRecorder) {\n        console.error('MediaRecorder API not supported.');\n        return;\n    }\n}\n\ncheckMediaRecorderSupport();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}