{"ast":null,"code":"let recognition;\nexport let finalTranscript = ''; // This will hold the full transcript\nlet interimTranscript = ''; // This will hold the interim transcript during a session\nlet isRecognitionRunning = false;\nlet shouldRestart = true; // New flag to control whether to restart\nlet inactivityTimeout; // For tracking inactivity timeout\nconst INACTIVITY_THRESHOLD = 30000; // 30 seconds of inactivity before restarting\nconst RESTART_DELAY = 550; // 2-second delay before restarting\nconst CHARACTER_THRESHOLD = 300; // Threshold for interim transcript size\n\n// Initialize SpeechRecognition API\nfunction initializeRecognition() {\n  window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  if (!window.SpeechRecognition) {\n    alert('Browser does not support SpeechRecognition API.');\n    console.log('SpeechRecognition API not supported');\n    return;\n  }\n  recognition = new window.SpeechRecognition();\n  recognition.continuous = true;\n  recognition.interimResults = true;\n  recognition.lang = 'en-US';\n  recognition.onresult = event => {\n    clearTimeout(inactivityTimeout); // Clear inactivity timeout on result\n    let interim = '';\n    for (let i = event.resultIndex; i < event.results.length; i++) {\n      const transcript = event.results[i][0].transcript;\n      if (event.results[i].isFinal) {\n        finalTranscript += transcript + ' ';\n        interimTranscript = ''; // Clear interim transcript when a final result is processed\n        console.log('Final Transcript (updated):', finalTranscript);\n      } else {\n        interim = transcript;\n      }\n    }\n    interimTranscript = interim;\n    console.log('Interim Transcript (updated):', interimTranscript);\n    if (interimTranscript.length > CHARACTER_THRESHOLD) {\n      finalTranscript += interimTranscript.trim() + ' ';\n      interimTranscript = '';\n      console.log('Appended Interim Transcript:', finalTranscript);\n    }\n    inactivityTimeout = setTimeout(() => {\n      if (shouldRestart) {\n        console.log('No activity detected. Restarting recognition...');\n        restartRecognition();\n      }\n    }, INACTIVITY_THRESHOLD);\n  };\n  recognition.onerror = event => {\n    console.log('Recognition error:', event.error);\n    if (shouldRestart) restartRecognition();\n  };\n  recognition.onend = () => {\n    console.log('Recognition ended.');\n    if (interimTranscript.trim() !== '') {\n      finalTranscript += interimTranscript.trim() + ' ';\n      interimTranscript = '';\n      console.log('Appended final Interim Transcript:', finalTranscript);\n    }\n    if (isRecognitionRunning && shouldRestart) {\n      console.log('Recognition stopped unexpectedly. Restarting...');\n      restartRecognition();\n    }\n  };\n  console.log('Speech recognition initialized.');\n}\n\n// Start Speech Recognition\nexport async function startSpeechRecognition() {\n  if (!isRecognitionRunning) {\n    finalTranscript = '';\n    interimTranscript = '';\n    const permissionGranted = await requestMicPermission();\n    if (!permissionGranted) return;\n    if (!recognition) initializeRecognition();\n    shouldRestart = true; // Allow recognition to restart\n    startRecognition();\n  }\n}\n\n// Stop Speech Recognition\nexport function stopRecognition() {\n  if (isRecognitionRunning) {\n    console.log('Stopping recognition...');\n    shouldRestart = false; // Prevent unwanted restarts\n    recognition.stop();\n    clearTimeout(inactivityTimeout);\n    isRecognitionRunning = false;\n  }\n}\n\n// Restart recognition with a delay\nfunction restartRecognition() {\n  if (!shouldRestart) return; // Prevent restarts if stopped manually\n  if (isRecognitionRunning) {\n    console.log('Stopping recognition before restarting...');\n    recognition.stop();\n    isRecognitionRunning = false;\n    setTimeout(() => {\n      console.log('Restarting recognition...');\n      startRecognition();\n    }, RESTART_DELAY);\n  }\n}\n\n// Function to start recognition\nfunction startRecognition() {\n  if (!isRecognitionRunning) {\n    console.log('Starting recognition...');\n    try {\n      recognition.start();\n      isRecognitionRunning = true;\n    } catch (error) {\n      console.log('Recognition start failed:', error);\n    }\n  } else {\n    console.log('Recognition already running.');\n  }\n}\n\n// Request microphone permission\nasync function requestMicPermission() {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    stream.getTracks().forEach(track => track.stop());\n    console.log('Microphone permission granted');\n    return true;\n  } catch (error) {\n    alert('Microphone access is required.');\n    console.log('Microphone permission denied');\n    return false;\n  }\n}\n\n// Export the final transcript for use elsewhere\nexport const getFinalTranscript = () => finalTranscript;","map":{"version":3,"names":["recognition","finalTranscript","interimTranscript","isRecognitionRunning","shouldRestart","inactivityTimeout","INACTIVITY_THRESHOLD","RESTART_DELAY","CHARACTER_THRESHOLD","initializeRecognition","window","SpeechRecognition","webkitSpeechRecognition","alert","console","log","continuous","interimResults","lang","onresult","event","clearTimeout","interim","i","resultIndex","results","length","transcript","isFinal","trim","setTimeout","restartRecognition","onerror","error","onend","startSpeechRecognition","permissionGranted","requestMicPermission","startRecognition","stopRecognition","stop","start","stream","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","track","getFinalTranscript"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["let recognition;\nexport let finalTranscript = ''; // This will hold the full transcript\nlet interimTranscript = ''; // This will hold the interim transcript during a session\nlet isRecognitionRunning = false;\nlet shouldRestart = true;  // New flag to control whether to restart\nlet inactivityTimeout; // For tracking inactivity timeout\nconst INACTIVITY_THRESHOLD = 30000; // 30 seconds of inactivity before restarting\nconst RESTART_DELAY = 550;  // 2-second delay before restarting\nconst CHARACTER_THRESHOLD = 300; // Threshold for interim transcript size\n\n// Initialize SpeechRecognition API\nfunction initializeRecognition() {\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!window.SpeechRecognition) {\n        alert('Browser does not support SpeechRecognition API.');\n        console.log('SpeechRecognition API not supported');\n        return;\n    }\n\n    recognition = new window.SpeechRecognition();\n    recognition.continuous = true;\n    recognition.interimResults = true;\n    recognition.lang = 'en-US';\n\n    recognition.onresult = (event) => {\n        clearTimeout(inactivityTimeout); // Clear inactivity timeout on result\n        let interim = '';\n\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n            const transcript = event.results[i][0].transcript;\n\n            if (event.results[i].isFinal) {\n                finalTranscript += transcript + ' ';\n                interimTranscript = ''; // Clear interim transcript when a final result is processed\n                console.log('Final Transcript (updated):', finalTranscript);\n            } else {\n                interim = transcript;\n            }\n        }\n\n        interimTranscript = interim;\n        console.log('Interim Transcript (updated):', interimTranscript);\n\n        if (interimTranscript.length > CHARACTER_THRESHOLD) {\n            finalTranscript += interimTranscript.trim() + ' ';\n            interimTranscript = '';\n            console.log('Appended Interim Transcript:', finalTranscript);\n        }\n\n        inactivityTimeout = setTimeout(() => {\n            if (shouldRestart) {\n                console.log('No activity detected. Restarting recognition...');\n                restartRecognition();\n            }\n        }, INACTIVITY_THRESHOLD);\n    };\n\n    recognition.onerror = (event) => {\n        console.log('Recognition error:', event.error);\n        if (shouldRestart) restartRecognition();\n    };\n\n    recognition.onend = () => {\n        console.log('Recognition ended.');\n        if (interimTranscript.trim() !== '') {\n            finalTranscript += interimTranscript.trim() + ' ';\n            interimTranscript = '';\n            console.log('Appended final Interim Transcript:', finalTranscript);\n        }\n\n        if (isRecognitionRunning && shouldRestart) {\n            console.log('Recognition stopped unexpectedly. Restarting...');\n            restartRecognition();\n        }\n    };\n\n    console.log('Speech recognition initialized.');\n}\n\n// Start Speech Recognition\nexport async function startSpeechRecognition() {\n    if (!isRecognitionRunning) {\n        finalTranscript = '';\n        interimTranscript = '';\n        const permissionGranted = await requestMicPermission();\n        if (!permissionGranted) return;\n\n        if (!recognition) initializeRecognition();\n        shouldRestart = true;  // Allow recognition to restart\n        startRecognition();\n    }\n}\n\n// Stop Speech Recognition\nexport function stopRecognition() {\n    if (isRecognitionRunning) {\n        console.log('Stopping recognition...');\n        shouldRestart = false;  // Prevent unwanted restarts\n        recognition.stop();\n        clearTimeout(inactivityTimeout);\n        isRecognitionRunning = false;\n    }\n}\n\n// Restart recognition with a delay\nfunction restartRecognition() {\n    if (!shouldRestart) return;  // Prevent restarts if stopped manually\n    if (isRecognitionRunning) {\n        console.log('Stopping recognition before restarting...');\n        recognition.stop();\n        isRecognitionRunning = false;\n\n        setTimeout(() => {\n            console.log('Restarting recognition...');\n            startRecognition();\n        }, RESTART_DELAY);\n    }\n}\n\n// Function to start recognition\nfunction startRecognition() {\n    if (!isRecognitionRunning) {\n        console.log('Starting recognition...');\n        try {\n            recognition.start();\n            isRecognitionRunning = true;\n        } catch (error) {\n            console.log('Recognition start failed:', error);\n        }\n    } else {\n        console.log('Recognition already running.');\n    }\n}\n\n// Request microphone permission\nasync function requestMicPermission() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        stream.getTracks().forEach(track => track.stop());\n        console.log('Microphone permission granted');\n        return true;\n    } catch (error) {\n        alert('Microphone access is required.');\n        console.log('Microphone permission denied');\n        return false;\n    }\n}\n\n// Export the final transcript for use elsewhere\nexport const getFinalTranscript = () => finalTranscript;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}