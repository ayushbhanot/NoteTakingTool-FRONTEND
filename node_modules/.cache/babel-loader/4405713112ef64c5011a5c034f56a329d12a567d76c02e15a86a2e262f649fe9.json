{"ast":null,"code":"let isRecognitionRunning = false;\nlet isRestarting = false;\nlet finalTranscript = '';\nlet recognition;\nlet isRecognitionInitialized = false;\nconst INTERIM_THRESHOLD = 40;\nlet lastLoggedInterimTranscript = '';\nlet lastRecognitionTime = Date.now();\nconst TIMEOUT_DURATION = 5000;\nfunction logWithLimit(message) {\n  const timestamp = new Date().toISOString();\n  console.log(`[${timestamp}] ${message}`);\n}\n\n// Function to request microphone permission\nasync function requestMicPermission() {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    stream.getTracks().forEach(track => track.stop());\n    return true;\n  } catch (error) {\n    alert('Microphone access is required for speech recognition.');\n    return false;\n  }\n}\n\n// Initialize SpeechRecognition\nfunction initializeRecognition() {\n  if (!window.SpeechRecognition && !window.webkitSpeechRecognition) {\n    alert('Your browser does not support the SpeechRecognition API.');\n    return;\n  }\n  window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  recognition = new window.SpeechRecognition();\n  recognition.continuous = true;\n  recognition.interimResults = true;\n  recognition.lang = 'en-US';\n  recognition.onresult = event => {\n    let interimTranscript = '';\n    lastRecognitionTime = Date.now();\n    for (let i = event.resultIndex; i < event.results.length; i++) {\n      const result = event.results[i];\n      if (result.isFinal) {\n        finalTranscript += result[0].transcript + ' ';\n        logWithLimit('Final Transcript So Far: ' + finalTranscript);\n      } else {\n        interimTranscript += result[0].transcript;\n      }\n    }\n    if (interimTranscript.length > INTERIM_THRESHOLD && interimTranscript !== lastLoggedInterimTranscript) {\n      lastLoggedInterimTranscript = interimTranscript;\n      logWithLimit('Interim Transcript: ' + interimTranscript);\n    }\n  };\n  recognition.onerror = event => {\n    logWithLimit('Recognition error: ' + event.error);\n    if (event.error === 'aborted') {\n      logWithLimit('Recognition aborted, waiting before restart...');\n      if (isRecognitionRunning) {\n        setTimeout(() => {\n          restartRecognition();\n        }, 5000); // Delay before restarting to avoid rapid restarts\n      }\n    }\n  };\n  recognition.onend = () => {\n    logWithLimit('Recognition ended.');\n    if (isRecognitionRunning && !isRestarting) {\n      restartRecognition();\n    }\n  };\n  isRecognitionInitialized = true;\n  logWithLimit('Recognition initialized.');\n}\n\n// Start SpeechRecognition if initialized\nfunction startRecognition() {\n  if (!isRecognitionInitialized) {\n    logWithLimit('Cannot start recognition; initialization is not complete.');\n    return;\n  }\n  if (!isRecognitionRunning) {\n    logWithLimit('Starting recognition...');\n    isRecognitionRunning = true;\n    recognition.start();\n  }\n}\n\n// Restart recognition with a cooldown\nfunction restartRecognition() {\n  if (isRecognitionRunning && recognition) {\n    logWithLimit('Stopping recognition before restarting...');\n    recognition.stop();\n  }\n  isRestarting = true;\n  setTimeout(() => {\n    if (isRestarting && isRecognitionInitialized) {\n      logWithLimit('Restarting recognition...');\n      startRecognition();\n      isRestarting = false;\n    }\n  }, 2000); // Added delay to avoid immediate restart\n}\n\n// Stop recognition\nexport function stopRecognition() {\n  if (isRecognitionRunning) {\n    logWithLimit('Stopping recognition...');\n    recognition.stop();\n    isRecognitionRunning = false;\n    isRestarting = false;\n  }\n}\n\n// Start recognition process with mic permission\nexport async function startSpeechRecognition() {\n  const permissionGranted = await requestMicPermission();\n  if (!permissionGranted) return;\n  if (!isRecognitionInitialized) {\n    initializeRecognition();\n  }\n  startRecognition();\n}","map":{"version":3,"names":["isRecognitionRunning","isRestarting","finalTranscript","recognition","isRecognitionInitialized","INTERIM_THRESHOLD","lastLoggedInterimTranscript","lastRecognitionTime","Date","now","TIMEOUT_DURATION","logWithLimit","message","timestamp","toISOString","console","log","requestMicPermission","stream","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","track","stop","error","alert","initializeRecognition","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","interimTranscript","i","resultIndex","results","length","result","isFinal","transcript","onerror","setTimeout","restartRecognition","onend","startRecognition","start","stopRecognition","startSpeechRecognition","permissionGranted"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["let isRecognitionRunning = false;\nlet isRestarting = false;\nlet finalTranscript = ''; \nlet recognition;\nlet isRecognitionInitialized = false;\nconst INTERIM_THRESHOLD = 40;  \nlet lastLoggedInterimTranscript = '';  \nlet lastRecognitionTime = Date.now();\nconst TIMEOUT_DURATION = 5000;  \n\nfunction logWithLimit(message) {\n    const timestamp = new Date().toISOString();\n    console.log(`[${timestamp}] ${message}`);\n}\n\n// Function to request microphone permission\nasync function requestMicPermission() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        stream.getTracks().forEach(track => track.stop());\n        return true;\n    } catch (error) {\n        alert('Microphone access is required for speech recognition.');\n        return false;\n    }\n}\n\n// Initialize SpeechRecognition\nfunction initializeRecognition() {\n    if (!window.SpeechRecognition && !window.webkitSpeechRecognition) {\n        alert('Your browser does not support the SpeechRecognition API.');\n        return;\n    }\n\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    recognition = new window.SpeechRecognition();\n    recognition.continuous = true;\n    recognition.interimResults = true;\n    recognition.lang = 'en-US';\n\n    recognition.onresult = (event) => {\n        let interimTranscript = '';\n        lastRecognitionTime = Date.now();\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n            const result = event.results[i];\n            if (result.isFinal) {\n                finalTranscript += result[0].transcript + ' ';\n                logWithLimit('Final Transcript So Far: ' + finalTranscript);\n            } else {\n                interimTranscript += result[0].transcript;\n            }\n        }\n\n        if (interimTranscript.length > INTERIM_THRESHOLD && interimTranscript !== lastLoggedInterimTranscript) {\n            lastLoggedInterimTranscript = interimTranscript;\n            logWithLimit('Interim Transcript: ' + interimTranscript);\n        }\n    };\n\n    recognition.onerror = (event) => {\n        logWithLimit('Recognition error: ' + event.error);\n        if (event.error === 'aborted') {\n            logWithLimit('Recognition aborted, waiting before restart...');\n            if (isRecognitionRunning) {\n                setTimeout(() => {\n                    restartRecognition();\n                }, 5000); // Delay before restarting to avoid rapid restarts\n            }\n        }\n    };\n\n    recognition.onend = () => {\n        logWithLimit('Recognition ended.');\n        if (isRecognitionRunning && !isRestarting) {\n            restartRecognition();\n        }\n    };\n\n    isRecognitionInitialized = true;\n    logWithLimit('Recognition initialized.');\n}\n\n// Start SpeechRecognition if initialized\nfunction startRecognition() {\n    if (!isRecognitionInitialized) {\n        logWithLimit('Cannot start recognition; initialization is not complete.');\n        return;\n    }\n\n    if (!isRecognitionRunning) {\n        logWithLimit('Starting recognition...');\n        isRecognitionRunning = true;\n        recognition.start();\n    }\n}\n\n// Restart recognition with a cooldown\nfunction restartRecognition() {\n    if (isRecognitionRunning && recognition) {\n        logWithLimit('Stopping recognition before restarting...');\n        recognition.stop();\n    }\n\n    isRestarting = true;\n    setTimeout(() => {\n        if (isRestarting && isRecognitionInitialized) {\n            logWithLimit('Restarting recognition...');\n            startRecognition();\n            isRestarting = false;\n        }\n    }, 2000); // Added delay to avoid immediate restart\n}\n\n// Stop recognition\nexport function stopRecognition() {\n    if (isRecognitionRunning) {\n        logWithLimit('Stopping recognition...');\n        recognition.stop();\n        isRecognitionRunning = false;\n        isRestarting = false;\n    }\n}\n\n// Start recognition process with mic permission\nexport async function startSpeechRecognition() {\n    const permissionGranted = await requestMicPermission();\n    if (!permissionGranted) return;\n\n    if (!isRecognitionInitialized) {\n        initializeRecognition();\n    }\n\n    startRecognition();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}