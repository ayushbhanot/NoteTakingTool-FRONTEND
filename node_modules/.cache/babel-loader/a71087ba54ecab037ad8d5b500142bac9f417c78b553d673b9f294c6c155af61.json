{"ast":null,"code":"let recognition,\n  isRecognitionRunning = false; // Declare global variables\nconst INTERIM_THRESHOLD = 250;\nconst RESTART_DELAY = 500; // Delay before restarting\n\n// Request microphone permission\nasync function requestMicPermission() {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    stream.getTracks().forEach(track => track.stop());\n    console.log('Microphone permission granted');\n    return true;\n  } catch (error) {\n    alert('Microphone access is required.');\n    console.log('Microphone permission denied');\n    return false;\n  }\n}\n\n// Initialize SpeechRecognition API\nfunction initializeRecognition() {\n  window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  if (!window.SpeechRecognition) {\n    alert('Browser does not support SpeechRecognition API.');\n    console.log('SpeechRecognition API not supported');\n    return;\n  }\n  recognition = new window.SpeechRecognition();\n  recognition.continuous = true;\n  recognition.interimResults = true;\n  recognition.lang = 'en-US';\n  recognition.onresult = event => {\n    let interim = '';\n    for (let i = event.resultIndex; i < event.results.length; i++) {\n      const transcript = event.results[i][0].transcript;\n      if (event.results[i].isFinal) {\n        finalTranscript += transcript + ' '; // Append to final transcript\n        console.log('Final Transcript: ', finalTranscript);\n      } else {\n        interim += transcript;\n      }\n    }\n    if (interim.length > INTERIM_THRESHOLD) {\n      console.log('Interim Transcript exceeded threshold, restarting...');\n      restartRecognition();\n    }\n  };\n  recognition.onerror = event => {\n    console.log('Recognition error: ', event.error);\n    restartRecognition();\n  };\n  recognition.onend = () => {\n    console.log('Recognition ended.');\n    if (isRecognitionRunning) {\n      setTimeout(() => {\n        console.log('Restarting due to recognition end...');\n        restartRecognition();\n      }, RESTART_DELAY); // Delay to avoid immediate restart loops\n    }\n  };\n  console.log('Speech recognition initialized.');\n}\n\n// Start Speech Recognition\nfunction startRecognition() {\n  if (!isRecognitionRunning) {\n    console.log('Starting recognition...');\n    try {\n      recognition.start();\n      isRecognitionRunning = true;\n    } catch (error) {\n      console.log('Recognition start failed: ', error);\n    }\n  } else {\n    console.log('Recognition already running.');\n  }\n}\n\n// Restart Speech Recognition with delay\nfunction restartRecognition() {\n  if (isRecognitionRunning) {\n    console.log('Stopping recognition before restarting...');\n    recognition.stop();\n    isRecognitionRunning = false;\n    setTimeout(() => {\n      console.log('Restarting recognition...');\n      startRecognition(); // Restart after delay\n    }, RESTART_DELAY); // 1-second delay before restart\n  }\n}\n\n// Stop Speech Recognition\nexport function stopRecognition() {\n  if (isRecognitionRunning) {\n    console.log('Stopping recognition...');\n    recognition.stop();\n    isRecognitionRunning = false;\n  }\n}\n\n// Function to start Speech Recognition after checking mic permissions\nexport async function startSpeechRecognition() {\n  finalTranscript = ''; // Reset transcript when starting a new session\n  const permissionGranted = await requestMicPermission();\n  if (!permissionGranted) return;\n  if (!recognition) initializeRecognition();\n  startRecognition();\n}\n\n// Function to handle stopping and sending the transcript\nexport const handleStopRecording = async () => {\n  try {\n    console.log(\"Stopping recognition...\");\n    stopRecognition(); // Stops the recognition process\n\n    // Ensure finalTranscript exists\n    if (!finalTranscript || finalTranscript.trim() === '') {\n      console.log(\"Final transcript is empty.\");\n      return;\n    }\n    console.log(\"Sending final transcript to server:\", finalTranscript);\n    const response = await axios.post('http://localhost:3001/transcribe', {\n      transcript: finalTranscript\n    });\n    const notes = response.data.notes;\n    console.log(\"Received notes:\", notes);\n    setGeneratedNotes(notes); // Pass notes to NotesUI or wherever they need to go\n  } catch (error) {\n    console.error(\"Error stopping speech recognition or sending transcript:\", error);\n  }\n};","map":{"version":3,"names":["recognition","isRecognitionRunning","INTERIM_THRESHOLD","RESTART_DELAY","requestMicPermission","stream","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","track","stop","console","log","error","alert","initializeRecognition","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","interim","i","resultIndex","results","length","transcript","isFinal","finalTranscript","restartRecognition","onerror","onend","setTimeout","startRecognition","start","stopRecognition","startSpeechRecognition","permissionGranted","handleStopRecording","trim","response","axios","post","notes","data","setGeneratedNotes"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["let recognition, isRecognitionRunning = false; // Declare global variables\nconst INTERIM_THRESHOLD = 250;\nconst RESTART_DELAY = 500;  // Delay before restarting\n\n// Request microphone permission\nasync function requestMicPermission() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        stream.getTracks().forEach(track => track.stop());\n        console.log('Microphone permission granted');\n        return true;\n    } catch (error) {\n        alert('Microphone access is required.');\n        console.log('Microphone permission denied');\n        return false;\n    }\n}\n\n// Initialize SpeechRecognition API\nfunction initializeRecognition() {\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!window.SpeechRecognition) {\n        alert('Browser does not support SpeechRecognition API.');\n        console.log('SpeechRecognition API not supported');\n        return;\n    }\n\n    recognition = new window.SpeechRecognition();\n    recognition.continuous = true;\n    recognition.interimResults = true;\n    recognition.lang = 'en-US';\n\n    recognition.onresult = (event) => {\n        let interim = '';\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n            const transcript = event.results[i][0].transcript;\n            if (event.results[i].isFinal) {\n                finalTranscript += transcript + ' ';  // Append to final transcript\n                console.log('Final Transcript: ', finalTranscript);\n            } else {\n                interim += transcript;\n            }\n        }\n\n        if (interim.length > INTERIM_THRESHOLD) {\n            console.log('Interim Transcript exceeded threshold, restarting...');\n            restartRecognition();\n        }\n    };\n\n    recognition.onerror = (event) => {\n        console.log('Recognition error: ', event.error);\n        restartRecognition();\n    };\n\n    recognition.onend = () => {\n        console.log('Recognition ended.');\n        if (isRecognitionRunning) {\n            setTimeout(() => {\n                console.log('Restarting due to recognition end...');\n                restartRecognition();\n            }, RESTART_DELAY);  // Delay to avoid immediate restart loops\n        }\n    };\n\n    console.log('Speech recognition initialized.');\n}\n\n// Start Speech Recognition\nfunction startRecognition() {\n    if (!isRecognitionRunning) {\n        console.log('Starting recognition...');\n        try {\n            recognition.start();\n            isRecognitionRunning = true;\n        } catch (error) {\n            console.log('Recognition start failed: ', error);\n        }\n    } else {\n        console.log('Recognition already running.');\n    }\n}\n\n// Restart Speech Recognition with delay\nfunction restartRecognition() {\n    if (isRecognitionRunning) {\n        console.log('Stopping recognition before restarting...');\n        recognition.stop();\n        isRecognitionRunning = false;\n\n        setTimeout(() => {\n            console.log('Restarting recognition...');\n            startRecognition();  // Restart after delay\n        }, RESTART_DELAY);  // 1-second delay before restart\n    }\n}\n\n// Stop Speech Recognition\nexport function stopRecognition() {\n    if (isRecognitionRunning) {\n        console.log('Stopping recognition...');\n        recognition.stop();\n        isRecognitionRunning = false;\n    }\n}\n\n// Function to start Speech Recognition after checking mic permissions\nexport async function startSpeechRecognition() {\n    finalTranscript = '';  // Reset transcript when starting a new session\n    const permissionGranted = await requestMicPermission();\n    if (!permissionGranted) return;\n\n    if (!recognition) initializeRecognition();\n    startRecognition();\n}\n\n// Function to handle stopping and sending the transcript\nexport const handleStopRecording = async () => {\n    try {\n        console.log(\"Stopping recognition...\");\n        stopRecognition(); // Stops the recognition process\n        \n        // Ensure finalTranscript exists\n        if (!finalTranscript || finalTranscript.trim() === '') {\n            console.log(\"Final transcript is empty.\");\n            return;\n        }\n        \n        console.log(\"Sending final transcript to server:\", finalTranscript);\n        const response = await axios.post('http://localhost:3001/transcribe', { transcript: finalTranscript });\n        const notes = response.data.notes;\n        \n        console.log(\"Received notes:\", notes);\n        setGeneratedNotes(notes);  // Pass notes to NotesUI or wherever they need to go\n    } catch (error) {\n        console.error(\"Error stopping speech recognition or sending transcript:\", error);\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}