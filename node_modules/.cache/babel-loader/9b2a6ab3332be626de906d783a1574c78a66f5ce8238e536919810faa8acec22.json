{"ast":null,"code":"let isRecognitionRunning = false;\nlet finalTranscript = '';\nlet recognition;\nconst INTERIM_THRESHOLD = 20; // Set a character length threshold for interim transcript\nlet lastLoggedInterimTranscript = ''; // Store the last logged interim transcript to compare\nlet lastRecognitionTime = Date.now(); // Track the last time recognition received results\nlet logCount = 0;\nconst TIMEOUT_DURATION = 20000; // 20 seconds timeout for checking if recognition is stuck\n\n// Monitor if speech recognition has stopped responding\nfunction monitorRecognitionTimeout() {\n  setInterval(() => {\n    const currentTime = Date.now();\n    if (isRecognitionRunning && currentTime - lastRecognitionTime > TIMEOUT_DURATION) {\n      logWithLimit('No new recognition results for a while. Restarting recognition...');\n      recognition.stop();\n      setTimeout(() => {\n        if (isRecognitionRunning) {\n          recognition.start();\n        }\n      }, 500); // Short delay before restarting\n    }\n  }, TIMEOUT_DURATION);\n}\nfunction logWithLimit(message) {\n  const timestamp = new Date().toISOString();\n  logCount++;\n  if (logCount % 50 === 0) {\n    // Clear console after every 50 logs\n    console.clear();\n  }\n  console.log(`[${timestamp}] ${message}`);\n}\n\n// Function to request microphone permission\nasync function requestMicPermission() {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    logWithLimit('Microphone permission granted');\n    stream.getTracks().forEach(track => track.stop());\n    return true;\n  } catch (error) {\n    logWithLimit('Microphone permission denied: ' + error);\n    alert('Microphone access is required for speech recognition.');\n    return false;\n  }\n}\nfunction saveTranscriptToFile(transcript) {\n  const blob = new Blob([transcript], {\n    type: 'text/plain'\n  });\n  const link = document.createElement('a');\n  link.href = window.URL.createObjectURL(blob);\n  link.download = 'transcript.txt';\n  link.click();\n}\n\n// Initialize WebkitSpeechRecognition\nfunction initializeRecognition() {\n  recognition = new window.SpeechRecognition();\n  recognition.continuous = true; // Allow continuous recognition\n  recognition.interimResults = true; // Capture partial results for real-time updates\n  recognition.lang = 'en-US'; // Set recognition language\n\n  recognition.onresult = event => {\n    logWithLimit(\"Recognition received results:\");\n    let interimTranscript = '';\n    lastRecognitionTime = Date.now(); // Reset the timeout when a new result is received\n\n    for (let i = event.resultIndex; i < event.results.length; i++) {\n      const result = event.results[i];\n      if (result.isFinal) {\n        finalTranscript += result[0].transcript;\n        logWithLimit('Final Transcript So Far: ' + finalTranscript);\n      } else {\n        interimTranscript += result[0].transcript;\n      }\n    }\n    if (interimTranscript.length >= INTERIM_THRESHOLD) {\n      logWithLimit('Interim Transcript: ' + interimTranscript);\n      lastLoggedInterimTranscript = interimTranscript;\n    }\n  };\n  recognition.onend = () => {\n    logWithLimit('Speech recognition ended.');\n\n    // Only restart recognition if it wasn't manually stopped\n    if (isRecognitionRunning) {\n      logWithLimit('Restarting speech recognition...');\n      recognition.start(); // Automatically restart recognition\n    }\n  };\n  recognition.onerror = event => {\n    logWithLimit('Speech Recognition Error: ' + event.error);\n    if (event.error === 'no-speech') {\n      logWithLimit('No speech detected.');\n      setTimeout(() => {\n        if (!isRecognitionRunning) {\n          startSpeechRecognition();\n        }\n      }, 1000);\n    }\n    if (event.error === 'audio-capture') {\n      alert('Please check your microphone permissions.');\n    }\n    if (event.error === 'aborted' || event.error === 'network') {\n      logWithLimit('Speech recognition was aborted or there was a network issue.');\n      if (isRecognitionRunning) {\n        setTimeout(() => {\n          logWithLimit('Attempting to restart speech recognition after error...');\n          recognition.start();\n        }, 1000);\n      }\n    }\n  };\n}\nfunction periodicallyRestartRecognition() {\n  setInterval(() => {\n    if (isRecognitionRunning) {\n      logWithLimit('Restarting speech recognition to prevent buffer overflow.');\n      recognition.stop(); // Stop and then start to reset internal buffer\n      setTimeout(() => {\n        recognition.start();\n      }, 500); // Short delay before restarting\n    }\n  }, 20000); // Restart every 20 seconds\n}\n\n// Start speech recognition function\nexport async function startSpeechRecognition() {\n  const permissionGranted = await requestMicPermission();\n  if (!permissionGranted) return;\n  if (isRecognitionRunning) {\n    logWithLimit(\"Speech recognition is already running.\");\n    return;\n  }\n  finalTranscript = '';\n  initializeRecognition();\n  try {\n    recognition.start();\n    isRecognitionRunning = true;\n    logWithLimit('Speech recognition started.');\n    lastRecognitionTime = Date.now(); // Initialize the recognition timer\n    monitorRecognitionTimeout(); // Start monitoring for timeouts\n  } catch (error) {\n    logWithLimit('Error starting speech recognition: ' + error);\n  }\n}\n\n// Stop speech recognition function (and send transcript)\nexport function stopSpeechRecognition() {\n  if (!isRecognitionRunning) {\n    logWithLimit(\"Speech recognition is not running.\");\n    return;\n  }\n  logWithLimit('Stopping speech recognition...');\n  recognition.stop();\n  isRecognitionRunning = false;\n  if (finalTranscript) {\n    logWithLimit('Sending final transcript to backend.');\n    processTranscript(finalTranscript);\n    saveTranscriptToFile(finalTranscript);\n    finalTranscript = '';\n  }\n}\n\n// Process the final transcript and send to backend\nexport const processTranscript = async transcript => {\n  try {\n    const response = await fetch('http://localhost:3001/generateNotes', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        transcript\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Server error: ${response.status}`);\n    }\n    const result = await response.json();\n    logWithLimit('Generated notes: ' + JSON.stringify(result));\n  } catch (error) {\n    logWithLimit('Error sending transcript to backend: ' + error);\n  }\n};","map":{"version":3,"names":["isRecognitionRunning","finalTranscript","recognition","INTERIM_THRESHOLD","lastLoggedInterimTranscript","lastRecognitionTime","Date","now","logCount","TIMEOUT_DURATION","monitorRecognitionTimeout","setInterval","currentTime","logWithLimit","stop","setTimeout","start","message","timestamp","toISOString","console","clear","log","requestMicPermission","stream","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","track","error","alert","saveTranscriptToFile","transcript","blob","Blob","type","link","document","createElement","href","window","URL","createObjectURL","download","click","initializeRecognition","SpeechRecognition","continuous","interimResults","lang","onresult","event","interimTranscript","i","resultIndex","results","length","result","isFinal","onend","onerror","startSpeechRecognition","periodicallyRestartRecognition","permissionGranted","stopSpeechRecognition","processTranscript","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","json"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["let isRecognitionRunning = false;\nlet finalTranscript = ''; \nlet recognition;\nconst INTERIM_THRESHOLD = 20;  // Set a character length threshold for interim transcript\nlet lastLoggedInterimTranscript = '';  // Store the last logged interim transcript to compare\nlet lastRecognitionTime = Date.now();  // Track the last time recognition received results\nlet logCount = 0;\n\nconst TIMEOUT_DURATION = 20000;  // 20 seconds timeout for checking if recognition is stuck\n\n// Monitor if speech recognition has stopped responding\nfunction monitorRecognitionTimeout() {\n    setInterval(() => {\n        const currentTime = Date.now();\n        if (isRecognitionRunning && (currentTime - lastRecognitionTime > TIMEOUT_DURATION)) {\n            logWithLimit('No new recognition results for a while. Restarting recognition...');\n            recognition.stop();\n            setTimeout(() => {\n                if (isRecognitionRunning) {\n                    recognition.start();\n                }\n            }, 500);  // Short delay before restarting\n        }\n    }, TIMEOUT_DURATION);\n}\n\n\nfunction logWithLimit(message) {\n    const timestamp = new Date().toISOString();\n    logCount++;\n\n    if (logCount % 50 === 0) {  // Clear console after every 50 logs\n        console.clear();\n    }\n\n    console.log(`[${timestamp}] ${message}`);\n}\n\n// Function to request microphone permission\nasync function requestMicPermission() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        logWithLimit('Microphone permission granted');\n        stream.getTracks().forEach(track => track.stop());  \n        return true;\n    } catch (error) {\n        logWithLimit('Microphone permission denied: ' + error);\n        alert('Microphone access is required for speech recognition.');\n        return false;\n    }\n}\n\nfunction saveTranscriptToFile(transcript) {\n    const blob = new Blob([transcript], { type: 'text/plain' });\n    const link = document.createElement('a');\n    link.href = window.URL.createObjectURL(blob);\n    link.download = 'transcript.txt';\n    link.click();\n}\n\n// Initialize WebkitSpeechRecognition\nfunction initializeRecognition() {\n    recognition = new window.SpeechRecognition();\n    recognition.continuous = true;  // Allow continuous recognition\n    recognition.interimResults = true;  // Capture partial results for real-time updates\n    recognition.lang = 'en-US';  // Set recognition language\n\n    recognition.onresult = (event) => {\n        logWithLimit(\"Recognition received results:\");\n        let interimTranscript = '';\n        lastRecognitionTime = Date.now();  // Reset the timeout when a new result is received\n\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n            const result = event.results[i];\n            if (result.isFinal) {\n                finalTranscript += result[0].transcript;\n                logWithLimit('Final Transcript So Far: ' + finalTranscript);\n            } else {\n                interimTranscript += result[0].transcript;\n            }\n        }\n\n        if (interimTranscript.length >= INTERIM_THRESHOLD) {\n            logWithLimit('Interim Transcript: ' + interimTranscript);\n            lastLoggedInterimTranscript = interimTranscript;\n        }\n    };\n\n    recognition.onend = () => {\n        logWithLimit('Speech recognition ended.');\n        \n        // Only restart recognition if it wasn't manually stopped\n        if (isRecognitionRunning) {\n            logWithLimit('Restarting speech recognition...');\n            recognition.start();  // Automatically restart recognition\n        }\n    };\n    \n\n    recognition.onerror = (event) => {\n        logWithLimit('Speech Recognition Error: ' + event.error);\n        if (event.error === 'no-speech') {\n            logWithLimit('No speech detected.');\n            setTimeout(() => {\n                if (!isRecognitionRunning) {\n                    startSpeechRecognition();\n                }\n            }, 1000);\n        }\n\n        if (event.error === 'audio-capture') {\n            alert('Please check your microphone permissions.');\n        }\n\n        if (event.error === 'aborted' || event.error === 'network') {\n            logWithLimit('Speech recognition was aborted or there was a network issue.');\n            if (isRecognitionRunning) {\n                setTimeout(() => {\n                    logWithLimit('Attempting to restart speech recognition after error...');\n                    recognition.start();\n                }, 1000);\n            }\n        }\n    };\n}\n\nfunction periodicallyRestartRecognition() {\n    setInterval(() => {\n        if (isRecognitionRunning) {\n            logWithLimit('Restarting speech recognition to prevent buffer overflow.');\n            recognition.stop();  // Stop and then start to reset internal buffer\n            setTimeout(() => {\n                recognition.start();\n            }, 500);  // Short delay before restarting\n        }\n    }, 20000);  // Restart every 20 seconds\n}\n\n\n\n// Start speech recognition function\nexport async function startSpeechRecognition() {\n    const permissionGranted = await requestMicPermission();  \n    if (!permissionGranted) return;\n\n    if (isRecognitionRunning) {\n        logWithLimit(\"Speech recognition is already running.\");\n        return;\n    }\n\n    finalTranscript = '';  \n    initializeRecognition();  \n    try {\n        recognition.start();  \n        isRecognitionRunning = true;  \n        logWithLimit('Speech recognition started.');\n        lastRecognitionTime = Date.now();  // Initialize the recognition timer\n        monitorRecognitionTimeout();  // Start monitoring for timeouts\n    } catch (error) {\n        logWithLimit('Error starting speech recognition: ' + error);\n    }\n}\n\n// Stop speech recognition function (and send transcript)\nexport function stopSpeechRecognition() {\n    if (!isRecognitionRunning) {\n        logWithLimit(\"Speech recognition is not running.\");\n        return;\n    }\n    logWithLimit('Stopping speech recognition...');\n    recognition.stop();  \n    isRecognitionRunning = false;  \n\n    if (finalTranscript) {\n        logWithLimit('Sending final transcript to backend.');\n        processTranscript(finalTranscript); \n        saveTranscriptToFile(finalTranscript);\n        finalTranscript = '';  \n    }\n}\n\n// Process the final transcript and send to backend\nexport const processTranscript = async (transcript) => {\n    try {\n        const response = await fetch('http://localhost:3001/generateNotes', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ transcript }),  \n        });\n\n        if (!response.ok) {\n            throw new Error(`Server error: ${response.status}`);\n        }\n\n        const result = await response.json();\n        logWithLimit('Generated notes: ' + JSON.stringify(result));  \n    } catch (error) {\n        logWithLimit('Error sending transcript to backend: ' + error);  \n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}