{"ast":null,"code":"var _jsxFileName = \"/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/App.js\",\n  _s = $RefreshSig$();\n/*import React, { useState } from 'react';\nimport { startSpeechRecognition, stopSpeechRecognition } from './services/audioRecording'; // Adjust path as needed\n\nfunction App() {\n    const [isRecording, setIsRecording] = useState(false);\n\n    const handleStartRecording = async () => {\n        if (isRecording) return; // Prevent starting a new recording if one is already active\n        setIsRecording(true);\n        try {\n            await startSpeechRecognition();\n        } catch (error) {\n            console.error(\"Error starting speech recognition:\", error);\n            setIsRecording(false);\n        }\n    };\n\n    const handleStopRecording = async () => {\n        if (!isRecording) return; // Prevent stopping if no recording is active\n        try {\n            await stopSpeechRecognition();\n        } catch (error) {\n            console.error(\"Error stopping speech recognition:\", error);\n        } finally {\n            setIsRecording(false);\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>Zoom/Google Meet Audio Recorder</h1>\n            <button onClick={handleStartRecording} disabled={isRecording}>\n                Start Speech Recognition\n            </button>\n            <button onClick={handleStopRecording} disabled={!isRecording}>\n                Stop Speech Recognition\n            </button>\n        </div>\n    );\n}\n\nexport default App;\n*/\n/* COMMENTED OUT MEDIARECORDER-BASED HANDLERS */\nimport { sendTranscriptToBackend } from './services/noteservice'; // Adjust the path as needed\nimport { startRecording, stopRecording } from './services/audioRecording';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isRecording, setIsRecording] = useState(false); // To control recording state\n  const [notes, setNotes] = useState(''); // To store generated notes\n\n  const handleStartRecording = async () => {\n    if (isRecording) return;\n    setIsRecording(true);\n    try {\n      await startRecording();\n    } catch (error) {\n      console.error(\"Error starting recording:\", error);\n      setIsRecording(false);\n    }\n  };\n  const handleStopRecording = async () => {\n    if (!isRecording) return;\n    try {\n      await stopRecording();\n\n      // After stopping the recording, get the notes\n      const generatedNotes = await sendTranscriptToBackend(); // Assuming this sends the transcript to backend\n      if (generatedNotes) {\n        setNotes(generatedNotes); // Store the notes in state\n      }\n    } catch (error) {\n      console.error(\"Error stopping recording:\", error);\n    } finally {\n      setIsRecording(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Zoom/Google Meet Audio Recorder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStartRecording,\n      disabled: isRecording,\n      children: \"Start Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStopRecording,\n      disabled: !isRecording,\n      children: \"Stop Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), notes && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Generated Notes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: notes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"s3rJobvGOIfHPvpuzm3/MkZnEVU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["sendTranscriptToBackend","startRecording","stopRecording","jsxDEV","_jsxDEV","App","_s","isRecording","setIsRecording","useState","notes","setNotes","handleStartRecording","error","console","handleStopRecording","generatedNotes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/App.js"],"sourcesContent":["/*import React, { useState } from 'react';\nimport { startSpeechRecognition, stopSpeechRecognition } from './services/audioRecording'; // Adjust path as needed\n\nfunction App() {\n    const [isRecording, setIsRecording] = useState(false);\n\n    const handleStartRecording = async () => {\n        if (isRecording) return; // Prevent starting a new recording if one is already active\n        setIsRecording(true);\n        try {\n            await startSpeechRecognition();\n        } catch (error) {\n            console.error(\"Error starting speech recognition:\", error);\n            setIsRecording(false);\n        }\n    };\n\n    const handleStopRecording = async () => {\n        if (!isRecording) return; // Prevent stopping if no recording is active\n        try {\n            await stopSpeechRecognition();\n        } catch (error) {\n            console.error(\"Error stopping speech recognition:\", error);\n        } finally {\n            setIsRecording(false);\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>Zoom/Google Meet Audio Recorder</h1>\n            <button onClick={handleStartRecording} disabled={isRecording}>\n                Start Speech Recognition\n            </button>\n            <button onClick={handleStopRecording} disabled={!isRecording}>\n                Stop Speech Recognition\n            </button>\n        </div>\n    );\n}\n\nexport default App;\n*/\n/* COMMENTED OUT MEDIARECORDER-BASED HANDLERS */\nimport { sendTranscriptToBackend } from './services/noteservice'; // Adjust the path as needed\nimport { startRecording, stopRecording } from './services/audioRecording';\n\nfunction App() {\n    const [isRecording, setIsRecording] = useState(false);  // To control recording state\n    const [notes, setNotes] = useState('');  // To store generated notes\n\n    const handleStartRecording = async () => {\n        if (isRecording) return;\n        setIsRecording(true);\n        try {\n            await startRecording();\n        } catch (error) {\n            console.error(\"Error starting recording:\", error);\n            setIsRecording(false);\n        }\n    };\n\n    const handleStopRecording = async () => {\n        if (!isRecording) return;\n        try {\n            await stopRecording();\n\n            // After stopping the recording, get the notes\n            const generatedNotes = await sendTranscriptToBackend(); // Assuming this sends the transcript to backend\n            if (generatedNotes) {\n                setNotes(generatedNotes);  // Store the notes in state\n            }\n        } catch (error) {\n            console.error(\"Error stopping recording:\", error);\n        } finally {\n            setIsRecording(false);\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>Zoom/Google Meet Audio Recorder</h1>\n            <button onClick={handleStartRecording} disabled={isRecording}>\n                Start Recording\n            </button>\n            <button onClick={handleStopRecording} disabled={!isRecording}>\n                Stop Recording\n            </button>\n\n            {/* Display the generated notes */}\n            {notes && (\n                <div>\n                    <h2>Generated Notes</h2>\n                    <pre>{notes}</pre> {/* Render the notes in a <pre> tag to preserve formatting */}\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}