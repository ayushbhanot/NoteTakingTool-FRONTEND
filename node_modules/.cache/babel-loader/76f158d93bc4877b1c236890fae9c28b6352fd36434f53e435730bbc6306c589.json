{"ast":null,"code":"/*import React, { useState } from 'react';\nimport { startSpeechRecognition, stopSpeechRecognition } from './services/audioRecording'; // Adjust path as needed\n\nfunction App() {\n    const [isRecording, setIsRecording] = useState(false);\n\n    const handleStartRecording = async () => {\n        if (isRecording) return; // Prevent starting a new recording if one is already active\n        setIsRecording(true);\n        try {\n            await startSpeechRecognition();\n        } catch (error) {\n            console.error(\"Error starting speech recognition:\", error);\n            setIsRecording(false);\n        }\n    };\n\n    const handleStopRecording = async () => {\n        if (!isRecording) return; // Prevent stopping if no recording is active\n        try {\n            await stopSpeechRecognition();\n        } catch (error) {\n            console.error(\"Error stopping speech recognition:\", error);\n        } finally {\n            setIsRecording(false);\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>Zoom/Google Meet Audio Recorder</h1>\n            <button onClick={handleStartRecording} disabled={isRecording}>\n                Start Speech Recognition\n            </button>\n            <button onClick={handleStopRecording} disabled={!isRecording}>\n                Stop Speech Recognition\n            </button>\n        </div>\n    );\n}\n\nexport default App;\n*//* COMMENTED OUT MEDIARECORDER-BASED HANDLERS */import React,{useState}from'react';// Import useState for recording state\nimport{startRecording,stopRecording}from'./services/audioRecording';// Adjust path as needed\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[isRecording,setIsRecording]=useState(false);// useState for recording control\nconst handleStartRecording=async()=>{if(isRecording)return;setIsRecording(true);try{await startRecording();}catch(error){console.error(\"Error starting recording:\",error);setIsRecording(false);}};const handleStopRecording=async()=>{if(!isRecording)return;try{await stopRecording();}catch(error){console.error(\"Error stopping recording:\",error);}finally{setIsRecording(false);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Zoom/Google Meet Audio Recorder\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleStartRecording,disabled:isRecording,children:\"Start Recording\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleStopRecording,disabled:!isRecording,children:\"Stop Recording\"})]});}export default App;","map":{"version":3,"names":["React","useState","startRecording","stopRecording","jsx","_jsx","jsxs","_jsxs","App","isRecording","setIsRecording","handleStartRecording","error","console","handleStopRecording","className","children","onClick","disabled"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/App.js"],"sourcesContent":["/*import React, { useState } from 'react';\nimport { startSpeechRecognition, stopSpeechRecognition } from './services/audioRecording'; // Adjust path as needed\n\nfunction App() {\n    const [isRecording, setIsRecording] = useState(false);\n\n    const handleStartRecording = async () => {\n        if (isRecording) return; // Prevent starting a new recording if one is already active\n        setIsRecording(true);\n        try {\n            await startSpeechRecognition();\n        } catch (error) {\n            console.error(\"Error starting speech recognition:\", error);\n            setIsRecording(false);\n        }\n    };\n\n    const handleStopRecording = async () => {\n        if (!isRecording) return; // Prevent stopping if no recording is active\n        try {\n            await stopSpeechRecognition();\n        } catch (error) {\n            console.error(\"Error stopping speech recognition:\", error);\n        } finally {\n            setIsRecording(false);\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>Zoom/Google Meet Audio Recorder</h1>\n            <button onClick={handleStartRecording} disabled={isRecording}>\n                Start Speech Recognition\n            </button>\n            <button onClick={handleStopRecording} disabled={!isRecording}>\n                Stop Speech Recognition\n            </button>\n        </div>\n    );\n}\n\nexport default App;\n*/\n/* COMMENTED OUT MEDIARECORDER-BASED HANDLERS */\nimport React, { useState } from 'react'; // Import useState for recording state\nimport { startRecording, stopRecording } from './services/audioRecording'; // Adjust path as needed\n\nfunction App() {\n    const [isRecording, setIsRecording] = useState(false); // useState for recording control\n\n    const handleStartRecording = async () => {\n        if (isRecording) return;\n        setIsRecording(true);\n        try {\n            await startRecording();\n        } catch (error) {\n            console.error(\"Error starting recording:\", error);\n            setIsRecording(false);\n        }\n    };\n\n    const handleStopRecording = async () => {\n        if (!isRecording) return;\n        try {\n            await stopRecording();\n        } catch (error) {\n            console.error(\"Error stopping recording:\", error);\n        } finally {\n            setIsRecording(false);\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>Zoom/Google Meet Audio Recorder</h1>\n            <button onClick={handleStartRecording} disabled={isRecording}>\n                Start Recording\n            </button>\n            <button onClick={handleStopRecording} disabled={!isRecording}>\n                Stop Recording\n            </button>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA,gDACA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CAAE;AACzC,OAASC,cAAc,CAAEC,aAAa,KAAQ,2BAA2B,CAAE;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE3E,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACX,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGT,QAAQ,CAAC,KAAK,CAAC,CAAE;AAEvD,KAAM,CAAAU,oBAAoB,CAAG,KAAAA,CAAA,GAAY,CACrC,GAAIF,WAAW,CAAE,OACjBC,cAAc,CAAC,IAAI,CAAC,CACpB,GAAI,CACA,KAAM,CAAAR,cAAc,CAAC,CAAC,CAC1B,CAAE,MAAOU,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CACjDF,cAAc,CAAC,KAAK,CAAC,CACzB,CACJ,CAAC,CAED,KAAM,CAAAI,mBAAmB,CAAG,KAAAA,CAAA,GAAY,CACpC,GAAI,CAACL,WAAW,CAAE,OAClB,GAAI,CACA,KAAM,CAAAN,aAAa,CAAC,CAAC,CACzB,CAAE,MAAOS,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CACrD,CAAC,OAAS,CACNF,cAAc,CAAC,KAAK,CAAC,CACzB,CACJ,CAAC,CAED,mBACIH,KAAA,QAAKQ,SAAS,CAAC,KAAK,CAAAC,QAAA,eAChBX,IAAA,OAAAW,QAAA,CAAI,iCAA+B,CAAI,CAAC,cACxCX,IAAA,WAAQY,OAAO,CAAEN,oBAAqB,CAACO,QAAQ,CAAET,WAAY,CAAAO,QAAA,CAAC,iBAE9D,CAAQ,CAAC,cACTX,IAAA,WAAQY,OAAO,CAAEH,mBAAoB,CAACI,QAAQ,CAAE,CAACT,WAAY,CAAAO,QAAA,CAAC,gBAE9D,CAAQ,CAAC,EACR,CAAC,CAEd,CAEA,cAAe,CAAAR,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}