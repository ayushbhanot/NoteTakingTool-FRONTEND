{"ast":null,"code":"// let mediaRecorder = null; // Declare globally (commented out, we won't use MediaRecorder)\n\n// Function to check WebkitSpeechRecognition support\nfunction checkSpeechRecognitionSupport() {\n  window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  if (!window.SpeechRecognition) {\n    console.error('SpeechRecognition API not supported.');\n    alert('Your browser does not support speech recognition features.');\n    return false;\n  }\n  return true;\n}\n\n// Check for WebkitSpeechRecognition support early\nif (!checkSpeechRecognitionSupport()) {\n  alert('Your browser does not support the necessary speech recognition features.');\n}\n\n// Initialize WebkitSpeechRecognition\nconst recognition = new window.SpeechRecognition();\nrecognition.continuous = true;\nrecognition.interimResults = false;\nrecognition.lang = 'en-US';\n\n// Start speech recognition function\nexport async function startSpeechRecognition() {\n  if (isRecognitionRunning) {\n    console.error(\"Speech recognition is already running.\");\n    return;\n  }\n  try {\n    recognition.start();\n    isRecognitionRunning = true;\n    console.log('Speech recognition started.');\n  } catch (error) {\n    console.error('Error starting speech recognition:', error);\n  }\n}\n\n// Stop speech recognition function\nexport function stopSpeechRecognition() {\n  if (!isRecognitionRunning) {\n    console.error(\"Speech recognition is not running.\");\n    return;\n  }\n  console.log('Stopping speech recognition...');\n  recognition.stop();\n  isRecognitionRunning = false;\n}\nrecognition.onend = () => {\n  isRecognitionRunning = false;\n  console.log('Speech recognition stopped.');\n};\nrecognition.onabort = event => {\n  console.error('Speech recognition was aborted:', event);\n  // Optionally, restart recognition if needed\n  setTimeout(() => {\n    console.log('Attempting to restart speech recognition...');\n    startSpeechRecognition();\n  }, 1000); // Delay to prevent immediate restart\n};\n\n// Process the transcript and send to backend\nexport const processTranscript = async transcript => {\n  const formData = new FormData();\n  formData.append('transcript', transcript);\n  try {\n    const response = await fetch('http://localhost:3001/generateNotes', {\n      method: 'POST',\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error(`Server error: ${response.status}`);\n    }\n    const result = await response.json();\n    console.log('Generated notes:', result);\n  } catch (error) {\n    console.error('Error sending transcript to backend:', error);\n  }\n};\n\n// Event handler for when recognition results are available\nrecognition.onresult = event => {\n  const transcript = Array.from(event.results).map(result => result[0].transcript).join('');\n  console.log('Transcript:', transcript);\n  processTranscript(transcript); // Process the transcript\n};\nrecognition.onerror = event => {\n  console.error('Speech Recognition Error:', event.error);\n};\n\n// COMMENTED OUT MEDIARECORDER CODE\n/*\nexport async function startRecording() {\n    console.log('Attempting to start recording...');\n    try {\n        const micStream = await navigator.mediaDevices.getUserMedia({\n            audio: {\n                echoCancellation: false,\n                noiseSuppression: false,\n                sampleRate: 44100\n            }\n        });\n        console.log('Microphone stream acquired:', micStream);\n\n        const combinedStream = micStream;\n        console.log('Combined stream:', combinedStream);\n\n        if (combinedStream.getAudioTracks().length === 0) {\n            throw new Error('Combined stream has no audio tracks.');\n        }\n\n        let options = { mimeType: 'audio/webm; codecs=opus' };\n        if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n            options = { mimeType: 'audio/webm' };\n        }\n       if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n            options = { mimeType: 'audio/mp4' };\n        }\n        if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n            options = {};\n        }\n\n        mediaRecorder = new MediaRecorder(combinedStream, options);\n        console.log('MediaRecorder initialized:', mediaRecorder);\n\n        let audioChunks = [];\n        mediaRecorder.ondataavailable = (event) => {\n            if (event.data.size > 0) {\n                audioChunks.push(event.data);\n                console.log('Audio chunk available:', event.data);\n            }\n        };\n\n        mediaRecorder.onstart = () => {\n            console.log('Recording started.');\n        };\n\n        mediaRecorder.onstop = () => {\n            console.log('Recording stopped.');\n            const audioBlob = new Blob(audioChunks, { type: options.mimeType || 'audio/webm' });\n            console.log('Audio Blob size:', audioBlob.size);\n            if (audioBlob.size > 0) {\n                processAudioChunk(audioBlob);\n            } else {\n                console.error('Audio Blob is empty, not sending to backend');\n            }\n        };\n\n        mediaRecorder.onerror = (event) => {\n            console.error('MediaRecorder error:', event.error);\n        };\n\n        mediaRecorder.start();\n    } catch (error) {\n        console.error('Error capturing audio:', error);\n    }\n}\n\nexport function stopRecording() {\n    if (mediaRecorder) {\n        if (mediaRecorder.state !== 'inactive') {\n            console.log('Stopping recording...');\n            mediaRecorder.stop();\n        } else {\n            console.error('MediaRecorder is inactive.');\n        }\n    } else {\n        console.error('No MediaRecorder instance found.');\n    }\n}\n*/","map":{"version":3,"names":["checkSpeechRecognitionSupport","window","SpeechRecognition","webkitSpeechRecognition","console","error","alert","recognition","continuous","interimResults","lang","startSpeechRecognition","isRecognitionRunning","start","log","stopSpeechRecognition","stop","onend","onabort","event","setTimeout","processTranscript","transcript","formData","FormData","append","response","fetch","method","body","ok","Error","status","result","json","onresult","Array","from","results","map","join","onerror"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["// let mediaRecorder = null; // Declare globally (commented out, we won't use MediaRecorder)\n\n// Function to check WebkitSpeechRecognition support\nfunction checkSpeechRecognitionSupport() {\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!window.SpeechRecognition) {\n        console.error('SpeechRecognition API not supported.');\n        alert('Your browser does not support speech recognition features.');\n        return false;\n    }\n    return true;\n}\n\n// Check for WebkitSpeechRecognition support early\nif (!checkSpeechRecognitionSupport()) {\n    alert('Your browser does not support the necessary speech recognition features.');\n}\n\n// Initialize WebkitSpeechRecognition\nconst recognition = new window.SpeechRecognition();\nrecognition.continuous = true;\nrecognition.interimResults = false;\nrecognition.lang = 'en-US';\n\n// Start speech recognition function\nexport async function startSpeechRecognition() {\n    if (isRecognitionRunning) {\n        console.error(\"Speech recognition is already running.\");\n        return;\n    }\n    try {\n        recognition.start();\n        isRecognitionRunning = true;\n        console.log('Speech recognition started.');\n    } catch (error) {\n        console.error('Error starting speech recognition:', error);\n    }\n}\n\n// Stop speech recognition function\nexport function stopSpeechRecognition() {\n    if (!isRecognitionRunning) {\n        console.error(\"Speech recognition is not running.\");\n        return;\n    }\n    console.log('Stopping speech recognition...');\n    recognition.stop();\n    isRecognitionRunning = false;\n}\n\nrecognition.onend = () => {\n    isRecognitionRunning = false;\n    console.log('Speech recognition stopped.');\n};\n\nrecognition.onabort = (event) => {\n    console.error('Speech recognition was aborted:', event);\n    // Optionally, restart recognition if needed\n    setTimeout(() => {\n        console.log('Attempting to restart speech recognition...');\n        startSpeechRecognition();\n    }, 1000);  // Delay to prevent immediate restart\n};\n\n// Process the transcript and send to backend\nexport const processTranscript = async (transcript) => {\n    const formData = new FormData();\n    formData.append('transcript', transcript);\n\n    try {\n        const response = await fetch('http://localhost:3001/generateNotes', {\n            method: 'POST',\n            body: formData,\n        });\n\n        if (!response.ok) {\n            throw new Error(`Server error: ${response.status}`);\n        }\n\n        const result = await response.json();\n        console.log('Generated notes:', result);\n    } catch (error) {\n        console.error('Error sending transcript to backend:', error);\n    }\n};\n\n// Event handler for when recognition results are available\nrecognition.onresult = (event) => {\n    const transcript = Array.from(event.results)\n        .map(result => result[0].transcript)\n        .join('');\n    console.log('Transcript:', transcript);\n    processTranscript(transcript); // Process the transcript\n};\n\nrecognition.onerror = (event) => {\n    console.error('Speech Recognition Error:', event.error);\n};\n\n// COMMENTED OUT MEDIARECORDER CODE\n/*\nexport async function startRecording() {\n    console.log('Attempting to start recording...');\n    try {\n        const micStream = await navigator.mediaDevices.getUserMedia({\n            audio: {\n                echoCancellation: false,\n                noiseSuppression: false,\n                sampleRate: 44100\n            }\n        });\n        console.log('Microphone stream acquired:', micStream);\n\n        const combinedStream = micStream;\n        console.log('Combined stream:', combinedStream);\n\n        if (combinedStream.getAudioTracks().length === 0) {\n            throw new Error('Combined stream has no audio tracks.');\n        }\n\n        let options = { mimeType: 'audio/webm; codecs=opus' };\n        if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n            options = { mimeType: 'audio/webm' };\n        }\n       if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n            options = { mimeType: 'audio/mp4' };\n        }\n        if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n            options = {};\n        }\n\n        mediaRecorder = new MediaRecorder(combinedStream, options);\n        console.log('MediaRecorder initialized:', mediaRecorder);\n\n        let audioChunks = [];\n        mediaRecorder.ondataavailable = (event) => {\n            if (event.data.size > 0) {\n                audioChunks.push(event.data);\n                console.log('Audio chunk available:', event.data);\n            }\n        };\n\n        mediaRecorder.onstart = () => {\n            console.log('Recording started.');\n        };\n\n        mediaRecorder.onstop = () => {\n            console.log('Recording stopped.');\n            const audioBlob = new Blob(audioChunks, { type: options.mimeType || 'audio/webm' });\n            console.log('Audio Blob size:', audioBlob.size);\n            if (audioBlob.size > 0) {\n                processAudioChunk(audioBlob);\n            } else {\n                console.error('Audio Blob is empty, not sending to backend');\n            }\n        };\n\n        mediaRecorder.onerror = (event) => {\n            console.error('MediaRecorder error:', event.error);\n        };\n\n        mediaRecorder.start();\n    } catch (error) {\n        console.error('Error capturing audio:', error);\n    }\n}\n\nexport function stopRecording() {\n    if (mediaRecorder) {\n        if (mediaRecorder.state !== 'inactive') {\n            console.log('Stopping recording...');\n            mediaRecorder.stop();\n        } else {\n            console.error('MediaRecorder is inactive.');\n        }\n    } else {\n        console.error('No MediaRecorder instance found.');\n    }\n}\n*/\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}