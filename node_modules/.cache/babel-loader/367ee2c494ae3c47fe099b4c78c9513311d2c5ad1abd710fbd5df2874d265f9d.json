{"ast":null,"code":"let isRecognitionRunning = false;\nlet isRestarting = false;\nlet finalTranscript = '';\nlet recognition;\nconst INTERIM_THRESHOLD = 20; // Threshold for interim transcript length\nlet lastLoggedInterimTranscript = '';\nlet lastRecognitionTime = Date.now(); // Time of the last recognition result\nlet logCount = 0;\nconst TIMEOUT_DURATION = 5000; // Timeout duration for checking if recognition is stuck\n\n// Function to log messages with a limit\nfunction logWithLimit(message) {\n  const timestamp = new Date().toISOString();\n  logCount++;\n  if (logCount % 50 === 0) {\n    console.clear(); // Clear the console every 50 logs to avoid clutter\n  }\n  console.log(`[${timestamp}] ${message}`);\n}\n\n// Function to request microphone permission\nasync function requestMicPermission() {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    logWithLimit('Microphone permission granted');\n    stream.getTracks().forEach(track => track.stop()); // Stop the stream after permission is granted\n    return true;\n  } catch (error) {\n    logWithLimit('Microphone permission denied: ' + error);\n    alert('Microphone access is required for speech recognition.');\n    return false;\n  }\n}\nfunction initializeRecognition() {\n  // Check for SpeechRecognition API or webkitSpeechRecognition\n  window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  if (!window.SpeechRecognition) {\n    logWithLimit('SpeechRecognition API is not supported in this browser.');\n    alert('Your browser does not support the SpeechRecognition API.');\n    return;\n  }\n  recognition = new window.SpeechRecognition();\n  recognition.continuous = true;\n  recognition.interimResults = true;\n  recognition.lang = 'en-US';\n}\n\n// Function to monitor for recognition timeout and restart if necessary\nfunction monitorRecognitionTimeout() {\n  setInterval(() => {\n    const currentTime = Date.now();\n    if (isRecognitionRunning && currentTime - lastRecognitionTime > TIMEOUT_DURATION && !isRestarting && !recognitionIsActive()) {\n      logWithLimit('No new recognition results for a while. Restarting recognition...');\n      recognition.stop();\n      setTimeout(() => {\n        if (isRecognitionRunning && !recognitionIsActive()) {\n          recognition.start();\n        }\n      }, 1000); // Restart after 1 second\n    }\n  }, TIMEOUT_DURATION); // Check for inactivity every 5 seconds\n}\n\n// Check if recognition is active to prevent multiple starts\nfunction recognitionIsActive() {\n  return isRecognitionRunning && !isRestarting;\n}\n\n// Start speech recognition function\nexport async function startSpeechRecognition() {\n  const permissionGranted = await requestMicPermission();\n  if (!permissionGranted) return;\n  if (isRecognitionRunning || isRestarting || recognitionIsActive()) {\n    logWithLimit(\"Speech recognition is already running or restarting.\");\n    return;\n  }\n  finalTranscript = ''; // Clear transcript for a new session\n  initializeRecognition();\n  try {\n    recognition.start();\n    isRecognitionRunning = true;\n    logWithLimit('Speech recognition started.');\n    lastRecognitionTime = Date.now(); // Start the recognition timer\n    monitorRecognitionTimeout(); // Start monitoring for timeouts\n  } catch (error) {\n    logWithLimit('Error starting speech recognition: ' + error);\n  }\n}\n\n// Stop speech recognition function (and send transcript)\nexport function stopSpeechRecognition() {\n  if (!isRecognitionRunning) {\n    logWithLimit(\"Speech recognition is not running.\");\n    return;\n  }\n  logWithLimit('Stopping speech recognition...');\n  recognition.stop();\n  isRecognitionRunning = false;\n  isRestarting = false;\n  if (finalTranscript) {\n    logWithLimit('Sending final transcript to backend.');\n    processTranscript(finalTranscript);\n    finalTranscript = ''; // Clear transcript after sending\n  }\n}\n\n// Process the final transcript and send to backend\nexport const processTranscript = async transcript => {\n  try {\n    const response = await fetch('http://localhost:3001/generateNotes', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        transcript\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Server error: ${response.status}`);\n    }\n    const result = await response.json();\n    logWithLimit('Generated notes: ' + JSON.stringify(result));\n  } catch (error) {\n    logWithLimit('Error sending transcript to backend: ' + error);\n  }\n};","map":{"version":3,"names":["isRecognitionRunning","isRestarting","finalTranscript","recognition","INTERIM_THRESHOLD","lastLoggedInterimTranscript","lastRecognitionTime","Date","now","logCount","TIMEOUT_DURATION","logWithLimit","message","timestamp","toISOString","console","clear","log","requestMicPermission","stream","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","track","stop","error","alert","initializeRecognition","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","monitorRecognitionTimeout","setInterval","currentTime","recognitionIsActive","setTimeout","start","startSpeechRecognition","permissionGranted","stopSpeechRecognition","processTranscript","transcript","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","result","json"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["let isRecognitionRunning = false;\nlet isRestarting = false;\nlet finalTranscript = ''; \nlet recognition;\nconst INTERIM_THRESHOLD = 20;  // Threshold for interim transcript length\nlet lastLoggedInterimTranscript = '';  \nlet lastRecognitionTime = Date.now();  // Time of the last recognition result\nlet logCount = 0;\n\nconst TIMEOUT_DURATION = 5000;  // Timeout duration for checking if recognition is stuck\n\n// Function to log messages with a limit\nfunction logWithLimit(message) {\n    const timestamp = new Date().toISOString();\n    logCount++;\n\n    if (logCount % 50 === 0) {  \n        console.clear();  // Clear the console every 50 logs to avoid clutter\n    }\n\n    console.log(`[${timestamp}] ${message}`);\n}\n\n// Function to request microphone permission\nasync function requestMicPermission() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        logWithLimit('Microphone permission granted');\n        stream.getTracks().forEach(track => track.stop());  // Stop the stream after permission is granted\n        return true;\n    } catch (error) {\n        logWithLimit('Microphone permission denied: ' + error);\n        alert('Microphone access is required for speech recognition.');\n        return false;\n    }\n}\n\nfunction initializeRecognition() {\n    // Check for SpeechRecognition API or webkitSpeechRecognition\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n\n    if (!window.SpeechRecognition) {\n        logWithLimit('SpeechRecognition API is not supported in this browser.');\n        alert('Your browser does not support the SpeechRecognition API.');\n        return;\n    }\n\n    recognition = new window.SpeechRecognition();\n    recognition.continuous = true;  \n    recognition.interimResults = true;  \n    recognition.lang = 'en-US';  \n}\n\n\n// Function to monitor for recognition timeout and restart if necessary\nfunction monitorRecognitionTimeout() {\n    setInterval(() => {\n        const currentTime = Date.now();\n        if (isRecognitionRunning && (currentTime - lastRecognitionTime > TIMEOUT_DURATION) && !isRestarting && !recognitionIsActive()) {\n            logWithLimit('No new recognition results for a while. Restarting recognition...');\n            recognition.stop();\n            setTimeout(() => {\n                if (isRecognitionRunning && !recognitionIsActive()) {\n                    recognition.start();\n                }\n            }, 1000);  // Restart after 1 second\n        }\n    }, TIMEOUT_DURATION);  // Check for inactivity every 5 seconds\n}\n\n// Check if recognition is active to prevent multiple starts\nfunction recognitionIsActive() {\n    return isRecognitionRunning && !isRestarting;\n}\n\n// Start speech recognition function\nexport async function startSpeechRecognition() {\n    const permissionGranted = await requestMicPermission();  \n    if (!permissionGranted) return;\n\n    if (isRecognitionRunning || isRestarting || recognitionIsActive()) {\n        logWithLimit(\"Speech recognition is already running or restarting.\");\n        return;\n    }\n\n    finalTranscript = '';  // Clear transcript for a new session\n    initializeRecognition();  \n    try {\n        recognition.start();  \n        isRecognitionRunning = true;  \n        logWithLimit('Speech recognition started.');\n        lastRecognitionTime = Date.now();  // Start the recognition timer\n        monitorRecognitionTimeout();  // Start monitoring for timeouts\n    } catch (error) {\n        logWithLimit('Error starting speech recognition: ' + error);\n    }\n}\n\n// Stop speech recognition function (and send transcript)\nexport function stopSpeechRecognition() {\n    if (!isRecognitionRunning) {\n        logWithLimit(\"Speech recognition is not running.\");\n        return;\n    }\n    logWithLimit('Stopping speech recognition...');\n    recognition.stop();  \n    isRecognitionRunning = false;  \n    isRestarting = false;\n\n    if (finalTranscript) {\n        logWithLimit('Sending final transcript to backend.');\n        processTranscript(finalTranscript); \n        finalTranscript = '';  // Clear transcript after sending\n    }\n}\n\n// Process the final transcript and send to backend\nexport const processTranscript = async (transcript) => {\n    try {\n        const response = await fetch('http://localhost:3001/generateNotes', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ transcript }),  \n        });\n\n        if (!response.ok) {\n            throw new Error(`Server error: ${response.status}`);\n        }\n\n        const result = await response.json();\n        logWithLimit('Generated notes: ' + JSON.stringify(result));  \n    } catch (error) {\n        logWithLimit('Error sending transcript to backend: ' + error);  \n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}