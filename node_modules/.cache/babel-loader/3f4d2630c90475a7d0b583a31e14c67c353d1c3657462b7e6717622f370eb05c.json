{"ast":null,"code":"let isRecognitionRunning = false;\nlet isRestarting = false;\nlet recognition;\nlet isRecognitionInitialized = false;\nlet userStartedRecognition = false; // New flag to track if the user explicitly started the recognition\nconst COOLDOWN_DURATION = 3000; // Cooldown period before restarting\nconst RESTART_DELAY = 1000; // Delay between stop and start\nlet logCount = 0;\nlet lastLoggedMessage = '';\n\n// Log messages\nfunction logWithLimit(message) {\n  const timestamp = new Date().toISOString();\n  logCount++;\n\n  // Log only if significant new data is captured\n  if (message !== lastLoggedMessage) {\n    console.log(`[${timestamp}] ${message}`);\n    lastLoggedMessage = message;\n  }\n}\n\n// Request microphone permission\nasync function requestMicPermission() {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    stream.getTracks().forEach(track => track.stop()); // Stop stream to release the mic\n    return true;\n  } catch (error) {\n    alert('Microphone access is required for speech recognition.');\n    return false;\n  }\n}\n\n// Initialize SpeechRecognition\nfunction initializeRecognition() {\n  if (!window.SpeechRecognition && !window.webkitSpeechRecognition) {\n    alert('Your browser does not support the SpeechRecognition API.');\n    return;\n  }\n  window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  recognition = new window.SpeechRecognition();\n  recognition.continuous = true;\n  recognition.interimResults = true;\n  recognition.lang = 'en-US';\n  recognition.onresult = event => {\n    let interimTranscript = '';\n    let finalTranscript = '';\n    for (let i = event.resultIndex; i < event.results.length; i++) {\n      const result = event.results[i];\n      if (result.isFinal) {\n        finalTranscript += result[0].transcript + ' ';\n        logWithLimit('Final Transcript So Far: ' + finalTranscript);\n      } else {\n        interimTranscript += result[0].transcript;\n      }\n    }\n    if (interimTranscript.length > 0) {\n      logWithLimit('Interim Transcript: ' + interimTranscript);\n    }\n  };\n  recognition.onerror = event => {\n    logWithLimit('Recognition error: ' + event.error);\n    if (event.error === 'aborted' || event.error === 'no-speech') {\n      logWithLimit('Recognition aborted, waiting before restart...');\n      handleRestartWithCooldown();\n    }\n  };\n  recognition.onend = () => {\n    if (userStartedRecognition && isRecognitionRunning && !isRestarting) {\n      logWithLimit('Recognition ended, but user requested it to keep running.');\n      handleRestartWithCooldown();\n    } else {\n      logWithLimit('Recognition ended normally.');\n    }\n  };\n  isRecognitionInitialized = true;\n  logWithLimit('Recognition initialized.');\n}\n\n// Start recognition only when manually triggered\nfunction startRecognition() {\n  if (!isRecognitionInitialized) {\n    logWithLimit('Cannot start recognition; initialization is not complete.');\n    return;\n  }\n  if (!isRecognitionRunning && !isRestarting && userStartedRecognition) {\n    logWithLimit('Starting recognition...');\n    isRecognitionRunning = true;\n    try {\n      recognition.start();\n    } catch (error) {\n      logWithLimit('Error starting recognition: ' + error);\n    }\n  } else {\n    logWithLimit('Recognition is already running or restarting.');\n  }\n}\n\n// Cooldown before restarting recognition\nfunction handleRestartWithCooldown() {\n  if (!userStartedRecognition || !isRecognitionRunning || isRestarting) {\n    return;\n  }\n  isRestarting = true;\n  logWithLimit('Cooldown initiated, will restart in a few seconds...');\n  setTimeout(() => {\n    if (isRecognitionRunning && userStartedRecognition) {\n      logWithLimit('Restarting recognition...');\n      stopAndRestartRecognition(); // Stop and restart with delay\n    }\n    isRestarting = false;\n  }, COOLDOWN_DURATION); // Wait before restarting\n}\n\n// Stop and restart recognition with delay\nfunction stopAndRestartRecognition() {\n  try {\n    recognition.stop(); // Stop first\n    setTimeout(() => {\n      if (isRecognitionRunning && userStartedRecognition && !isRestarting) {\n        try {\n          logWithLimit('Attempting to restart recognition...');\n          recognition.start(); // Then restart after delay\n        } catch (error) {\n          logWithLimit('Error restarting recognition: ' + error);\n        }\n      }\n    }, RESTART_DELAY); // Wait before starting again\n  } catch (error) {\n    logWithLimit('Error stopping recognition: ' + error);\n  }\n}\n\n// Stop recognition\nexport function stopRecognition() {\n  if (isRecognitionRunning) {\n    logWithLimit('Stopping recognition...');\n    try {\n      recognition.stop();\n    } catch (error) {\n      logWithLimit('Error stopping recognition: ' + error);\n    }\n    isRecognitionRunning = false;\n    isRestarting = false;\n    userStartedRecognition = false; // Mark recognition as manually stopped by the user\n  } else {\n    logWithLimit('Recognition is not running.');\n  }\n}\n\n// Start speech recognition process when manually triggered\nexport async function startSpeechRecognition() {\n  const permissionGranted = await requestMicPermission();\n  if (!permissionGranted) return;\n  if (!isRecognitionInitialized) {\n    initializeRecognition();\n  }\n  userStartedRecognition = true; // Track that the user started the recognition\n  startRecognition();\n}","map":{"version":3,"names":["isRecognitionRunning","isRestarting","recognition","isRecognitionInitialized","userStartedRecognition","COOLDOWN_DURATION","RESTART_DELAY","logCount","lastLoggedMessage","logWithLimit","message","timestamp","Date","toISOString","console","log","requestMicPermission","stream","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","track","stop","error","alert","initializeRecognition","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","interimTranscript","finalTranscript","i","resultIndex","results","length","result","isFinal","transcript","onerror","handleRestartWithCooldown","onend","startRecognition","start","setTimeout","stopAndRestartRecognition","stopRecognition","startSpeechRecognition","permissionGranted"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["let isRecognitionRunning = false;\nlet isRestarting = false;\nlet recognition;\nlet isRecognitionInitialized = false;\nlet userStartedRecognition = false;  // New flag to track if the user explicitly started the recognition\nconst COOLDOWN_DURATION = 3000; // Cooldown period before restarting\nconst RESTART_DELAY = 1000; // Delay between stop and start\nlet logCount = 0;\nlet lastLoggedMessage = '';\n\n// Log messages\nfunction logWithLimit(message) {\n    const timestamp = new Date().toISOString();\n    logCount++;\n\n    // Log only if significant new data is captured\n    if (message !== lastLoggedMessage) {\n        console.log(`[${timestamp}] ${message}`);\n        lastLoggedMessage = message;\n    }\n}\n\n\n// Request microphone permission\nasync function requestMicPermission() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        stream.getTracks().forEach(track => track.stop()); // Stop stream to release the mic\n        return true;\n    } catch (error) {\n        alert('Microphone access is required for speech recognition.');\n        return false;\n    }\n}\n\n// Initialize SpeechRecognition\nfunction initializeRecognition() {\n    if (!window.SpeechRecognition && !window.webkitSpeechRecognition) {\n        alert('Your browser does not support the SpeechRecognition API.');\n        return;\n    }\n\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    recognition = new window.SpeechRecognition();\n    recognition.continuous = true;\n    recognition.interimResults = true;\n    recognition.lang = 'en-US';\n   \n    recognition.onresult = (event) => {\n        let interimTranscript = '';\n        let finalTranscript = '';\n    \n        for (let i = event.resultIndex; i < event.results.length; i++) {\n            const result = event.results[i];\n            if (result.isFinal) {\n                finalTranscript += result[0].transcript + ' ';\n                logWithLimit('Final Transcript So Far: ' + finalTranscript);\n            } else {\n                interimTranscript += result[0].transcript;\n            }\n        }\n    \n        if (interimTranscript.length > 0) {\n            logWithLimit('Interim Transcript: ' + interimTranscript);\n        }\n    };\n    \n    \n    \n\n    recognition.onerror = (event) => {\n        logWithLimit('Recognition error: ' + event.error);\n        if (event.error === 'aborted' || event.error === 'no-speech') {\n            logWithLimit('Recognition aborted, waiting before restart...');\n            handleRestartWithCooldown();\n        }\n    };\n\n    recognition.onend = () => {\n        if (userStartedRecognition && isRecognitionRunning && !isRestarting) {\n            logWithLimit('Recognition ended, but user requested it to keep running.');\n            handleRestartWithCooldown();\n        } else {\n            logWithLimit('Recognition ended normally.');\n        }\n    };\n\n    isRecognitionInitialized = true;\n    logWithLimit('Recognition initialized.');\n}\n\n// Start recognition only when manually triggered\nfunction startRecognition() {\n    if (!isRecognitionInitialized) {\n        logWithLimit('Cannot start recognition; initialization is not complete.');\n        return;\n    }\n\n    if (!isRecognitionRunning && !isRestarting && userStartedRecognition) {\n        logWithLimit('Starting recognition...');\n        isRecognitionRunning = true;\n        try {\n            recognition.start();\n        } catch (error) {\n            logWithLimit('Error starting recognition: ' + error);\n        }\n    } else {\n        logWithLimit('Recognition is already running or restarting.');\n    }\n}\n\n// Cooldown before restarting recognition\nfunction handleRestartWithCooldown() {\n    if (!userStartedRecognition || !isRecognitionRunning || isRestarting) {\n        return;\n    }\n\n    isRestarting = true;\n    logWithLimit('Cooldown initiated, will restart in a few seconds...');\n\n    setTimeout(() => {\n        if (isRecognitionRunning && userStartedRecognition) {\n            logWithLimit('Restarting recognition...');\n            stopAndRestartRecognition(); // Stop and restart with delay\n        }\n        isRestarting = false;\n    }, COOLDOWN_DURATION); // Wait before restarting\n}\n\n// Stop and restart recognition with delay\nfunction stopAndRestartRecognition() {\n    try {\n        recognition.stop(); // Stop first\n        setTimeout(() => {\n            if (isRecognitionRunning && userStartedRecognition && !isRestarting) {\n                try {\n                    logWithLimit('Attempting to restart recognition...');\n                    recognition.start(); // Then restart after delay\n                } catch (error) {\n                    logWithLimit('Error restarting recognition: ' + error);\n                }\n            }\n        }, RESTART_DELAY); // Wait before starting again\n    } catch (error) {\n        logWithLimit('Error stopping recognition: ' + error);\n    }\n}\n\n// Stop recognition\nexport function stopRecognition() {\n    if (isRecognitionRunning) {\n        logWithLimit('Stopping recognition...');\n        try {\n            recognition.stop();\n        } catch (error) {\n            logWithLimit('Error stopping recognition: ' + error);\n        }\n        isRecognitionRunning = false;\n        isRestarting = false;\n        userStartedRecognition = false; // Mark recognition as manually stopped by the user\n    } else {\n        logWithLimit('Recognition is not running.');\n    }\n}\n\n// Start speech recognition process when manually triggered\nexport async function startSpeechRecognition() {\n    const permissionGranted = await requestMicPermission();\n    if (!permissionGranted) return;\n\n    if (!isRecognitionInitialized) {\n        initializeRecognition();\n    }\n\n    userStartedRecognition = true;  // Track that the user started the recognition\n    startRecognition();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}