{"ast":null,"code":"let mediaRecorder = null; // Declare globally\n\nexport async function startRecording() {\n  console.log('Attempting to start recording...');\n  try {\n    // Request screen sharing (desktop) video stream\n    const screenStream = await navigator.mediaDevices.getDisplayMedia({\n      video: true,\n      audio: false\n    });\n    console.log('Screen stream acquired:', screenStream);\n\n    // Request microphone audio separately\n    const micStream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    console.log('Microphone stream acquired:', micStream);\n\n    // Combine the streams\n    const combinedStream = new MediaStream([...screenStream.getAudioTracks(), ...micStream.getAudioTracks()]);\n    console.log('Combined stream:', combinedStream);\n\n    // Initialize MediaRecorder\n    mediaRecorder = new MediaRecorder(combinedStream);\n    let audioChunks = [];\n    mediaRecorder.ondataavailable = event => {\n      if (event.data.size > 0) {\n        audioChunks.push(event.data);\n        console.log('Audio chunk available:', event.data);\n      }\n    };\n    mediaRecorder.onstart = () => {\n      console.log('Recording started.');\n    };\n    mediaRecorder.onstop = () => {\n      console.log('Recording stopped.');\n      const audioBlob = new Blob(audioChunks, {\n        type: 'audio/webm'\n      });\n      processAudioChunk(audioBlob);\n    };\n    mediaRecorder.start();\n  } catch (error) {\n    if (error.name === 'NotAllowedError') {\n      console.error('Permission denied or not granted.');\n    } else if (error.name === 'NotFoundError') {\n      console.error('Requested media is not found.');\n    } else {\n      console.error('Error capturing audio:', error);\n    }\n  }\n}\nexport function stopRecording() {\n  if (mediaRecorder) {\n    if (mediaRecorder.state !== 'inactive') {\n      console.log('Stopping recording...');\n      mediaRecorder.stop();\n    } else {\n      console.error('MediaRecorder is inactive.');\n    }\n  } else {\n    console.error('No MediaRecorder instance found.');\n  }\n}\nexport const processAudioChunk = async audioBlob => {\n  if (!(audioBlob instanceof Blob)) {\n    console.error('audioBlob is not a Blob instance.');\n    return;\n  }\n  const formData = new FormData();\n  formData.append('audio', audioBlob, 'audio.webm');\n  try {\n    const response = await fetch('http://localhost:3001/transcribe', {\n      method: 'POST',\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error(`Server error: ${response.status}`);\n    }\n    const result = await response.json();\n    console.log('Transcription result:', result);\n  } catch (error) {\n    console.error('Error sending audio to backend:', error);\n  }\n};","map":{"version":3,"names":["mediaRecorder","startRecording","console","log","screenStream","navigator","mediaDevices","getDisplayMedia","video","audio","micStream","getUserMedia","combinedStream","MediaStream","getAudioTracks","MediaRecorder","audioChunks","ondataavailable","event","data","size","push","onstart","onstop","audioBlob","Blob","type","processAudioChunk","start","error","name","stopRecording","state","stop","formData","FormData","append","response","fetch","method","body","ok","Error","status","result","json"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["let mediaRecorder = null; // Declare globally\n\nexport async function startRecording() {\n    console.log('Attempting to start recording...');\n    try {\n        // Request screen sharing (desktop) video stream\n        const screenStream = await navigator.mediaDevices.getDisplayMedia({\n            video: true,\n            audio: false\n        });\n\n        console.log('Screen stream acquired:', screenStream);\n\n        // Request microphone audio separately\n        const micStream = await navigator.mediaDevices.getUserMedia({\n            audio: true\n        });\n\n        console.log('Microphone stream acquired:', micStream);\n\n        // Combine the streams\n        const combinedStream = new MediaStream([\n            ...screenStream.getAudioTracks(),\n            ...micStream.getAudioTracks()\n        ]);\n\n        console.log('Combined stream:', combinedStream);\n\n        // Initialize MediaRecorder\n        mediaRecorder = new MediaRecorder(combinedStream);\n        let audioChunks = [];\n\n        mediaRecorder.ondataavailable = (event) => {\n            if (event.data.size > 0) {\n                audioChunks.push(event.data);\n                console.log('Audio chunk available:', event.data);\n            }\n        };\n\n        mediaRecorder.onstart = () => {\n            console.log('Recording started.');\n        };\n\n        mediaRecorder.onstop = () => {\n            console.log('Recording stopped.');\n            const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });\n            processAudioChunk(audioBlob);\n        };\n\n        mediaRecorder.start();\n    } catch (error) {\n        if (error.name === 'NotAllowedError') {\n            console.error('Permission denied or not granted.');\n        } else if (error.name === 'NotFoundError') {\n            console.error('Requested media is not found.');\n        } else {\n            console.error('Error capturing audio:', error);\n        }\n    }\n}\n\n\nexport function stopRecording() {\n    if (mediaRecorder) {\n        if (mediaRecorder.state !== 'inactive') {\n            console.log('Stopping recording...');\n            mediaRecorder.stop();\n        } else {\n            console.error('MediaRecorder is inactive.');\n        }\n    } else {\n        console.error('No MediaRecorder instance found.');\n    }\n}\n\n\nexport const processAudioChunk = async (audioBlob) => {\n    if (!(audioBlob instanceof Blob)) {\n        console.error('audioBlob is not a Blob instance.');\n        return;\n    }\n\n    const formData = new FormData();\n    formData.append('audio', audioBlob, 'audio.webm');\n\n    try {\n        const response = await fetch('http://localhost:3001/transcribe', {\n            method: 'POST',\n            body: formData,\n        });\n\n        if (!response.ok) {\n            throw new Error(`Server error: ${response.status}`);\n        }\n\n        const result = await response.json();\n        console.log('Transcription result:', result);\n    } catch (error) {\n        console.error('Error sending audio to backend:', error);\n    }\n}\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}