{"ast":null,"code":"let isRecognitionRunning = false;\nlet isRestarting = false;\nlet recognition;\nlet isRecognitionInitialized = false;\nconst COOLDOWN_DURATION = 3000; // Cooldown period before restarting\n\n// Log messages\nfunction logWithLimit(message) {\n  const timestamp = new Date().toISOString();\n  console.log(`[${timestamp}] ${message}`);\n}\n\n// Request microphone permission\nasync function requestMicPermission() {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    stream.getTracks().forEach(track => track.stop()); // Stop stream to release the mic\n    return true;\n  } catch (error) {\n    alert('Microphone access is required for speech recognition.');\n    return false;\n  }\n}\n\n// Initialize SpeechRecognition\nfunction initializeRecognition() {\n  if (!window.SpeechRecognition && !window.webkitSpeechRecognition) {\n    alert('Your browser does not support the SpeechRecognition API.');\n    return;\n  }\n  window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  recognition = new window.SpeechRecognition();\n  recognition.continuous = true;\n  recognition.interimResults = true;\n  recognition.lang = 'en-US';\n  recognition.onresult = event => {\n    // Handle results here (as per your existing logic)\n    logWithLimit('Recognition result received.');\n  };\n  recognition.onerror = event => {\n    logWithLimit('Recognition error: ' + event.error);\n    if (event.error === 'aborted') {\n      logWithLimit('Recognition aborted, waiting before restart...');\n      handleRestartWithCooldown();\n    }\n  };\n  recognition.onend = () => {\n    logWithLimit('Recognition ended.');\n    if (isRecognitionRunning && !isRestarting) {\n      handleRestartWithCooldown();\n    }\n  };\n  isRecognitionInitialized = true;\n  logWithLimit('Recognition initialized.');\n}\n\n// Start recognition if initialized\nfunction startRecognition() {\n  if (!isRecognitionInitialized) {\n    logWithLimit('Cannot start recognition; initialization is not complete.');\n    return;\n  }\n  if (!isRecognitionRunning) {\n    logWithLimit('Starting recognition...');\n    isRecognitionRunning = true;\n    recognition.start();\n  }\n}\n\n// Cooldown before restarting recognition\nfunction handleRestartWithCooldown() {\n  if (!isRecognitionRunning || isRestarting) {\n    return;\n  }\n  isRestarting = true;\n  logWithLimit('Cooldown initiated, will restart in a few seconds...');\n  setTimeout(() => {\n    if (isRecognitionRunning) {\n      logWithLimit('Restarting recognition...');\n      try {\n        recognition.stop();\n        recognition.start();\n      } catch (error) {\n        logWithLimit('Error restarting recognition: ' + error);\n      }\n    }\n    isRestarting = false;\n  }, COOLDOWN_DURATION); // Wait before restarting\n}\n\n// Stop recognition\nexport function stopRecognition() {\n  if (isRecognitionRunning) {\n    logWithLimit('Stopping recognition...');\n    recognition.stop();\n    isRecognitionRunning = false;\n    isRestarting = false;\n  }\n}\n\n// Start recognition with permission check\nexport async function startSpeechRecognition() {\n  const permissionGranted = await requestMicPermission();\n  if (!permissionGranted) return;\n  if (!isRecognitionInitialized) {\n    initializeRecognition();\n  }\n  startRecognition();\n}","map":{"version":3,"names":["isRecognitionRunning","isRestarting","recognition","isRecognitionInitialized","COOLDOWN_DURATION","logWithLimit","message","timestamp","Date","toISOString","console","log","requestMicPermission","stream","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","track","stop","error","alert","initializeRecognition","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","onerror","handleRestartWithCooldown","onend","startRecognition","start","setTimeout","stopRecognition","startSpeechRecognition","permissionGranted"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["let isRecognitionRunning = false;\nlet isRestarting = false;\nlet recognition;\nlet isRecognitionInitialized = false;\nconst COOLDOWN_DURATION = 3000;  // Cooldown period before restarting\n\n// Log messages\nfunction logWithLimit(message) {\n    const timestamp = new Date().toISOString();\n    console.log(`[${timestamp}] ${message}`);\n}\n\n// Request microphone permission\nasync function requestMicPermission() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        stream.getTracks().forEach(track => track.stop()); // Stop stream to release the mic\n        return true;\n    } catch (error) {\n        alert('Microphone access is required for speech recognition.');\n        return false;\n    }\n}\n\n// Initialize SpeechRecognition\nfunction initializeRecognition() {\n    if (!window.SpeechRecognition && !window.webkitSpeechRecognition) {\n        alert('Your browser does not support the SpeechRecognition API.');\n        return;\n    }\n\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    recognition = new window.SpeechRecognition();\n    recognition.continuous = true;\n    recognition.interimResults = true;\n    recognition.lang = 'en-US';\n\n    recognition.onresult = (event) => {\n        // Handle results here (as per your existing logic)\n        logWithLimit('Recognition result received.');\n    };\n\n    recognition.onerror = (event) => {\n        logWithLimit('Recognition error: ' + event.error);\n        if (event.error === 'aborted') {\n            logWithLimit('Recognition aborted, waiting before restart...');\n            handleRestartWithCooldown();\n        }\n    };\n\n    recognition.onend = () => {\n        logWithLimit('Recognition ended.');\n        if (isRecognitionRunning && !isRestarting) {\n            handleRestartWithCooldown();\n        }\n    };\n\n    isRecognitionInitialized = true;\n    logWithLimit('Recognition initialized.');\n}\n\n// Start recognition if initialized\nfunction startRecognition() {\n    if (!isRecognitionInitialized) {\n        logWithLimit('Cannot start recognition; initialization is not complete.');\n        return;\n    }\n\n    if (!isRecognitionRunning) {\n        logWithLimit('Starting recognition...');\n        isRecognitionRunning = true;\n        recognition.start();\n    }\n}\n\n// Cooldown before restarting recognition\nfunction handleRestartWithCooldown() {\n    if (!isRecognitionRunning || isRestarting) {\n        return;\n    }\n\n    isRestarting = true;\n    logWithLimit('Cooldown initiated, will restart in a few seconds...');\n\n    setTimeout(() => {\n        if (isRecognitionRunning) {\n            logWithLimit('Restarting recognition...');\n            try {\n                recognition.stop();\n                recognition.start();\n            } catch (error) {\n                logWithLimit('Error restarting recognition: ' + error);\n            }\n        }\n        isRestarting = false;\n    }, COOLDOWN_DURATION);  // Wait before restarting\n}\n\n// Stop recognition\nexport function stopRecognition() {\n    if (isRecognitionRunning) {\n        logWithLimit('Stopping recognition...');\n        recognition.stop();\n        isRecognitionRunning = false;\n        isRestarting = false;\n    }\n}\n\n// Start recognition with permission check\nexport async function startSpeechRecognition() {\n    const permissionGranted = await requestMicPermission();\n    if (!permissionGranted) return;\n\n    if (!isRecognitionInitialized) {\n        initializeRecognition();\n    }\n\n    startRecognition();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}