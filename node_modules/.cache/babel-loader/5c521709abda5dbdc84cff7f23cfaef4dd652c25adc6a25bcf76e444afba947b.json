{"ast":null,"code":"let isRecognitionRunning = false;\nlet isRestarting = false;\nlet recognition;\nlet isRecognitionInitialized = false;\nlet userStartedRecognition = false; // New flag to track if the user explicitly started the recognition\nconst COOLDOWN_DURATION = 3000; // Cooldown period before restarting\nconst RESTART_DELAY = 1000; // Delay between stop and start\n\n// Log messages\nfunction logWithLimit(message) {\n  const timestamp = new Date().toISOString();\n  console.log(`[${timestamp}] ${message}`);\n}\n\n// Request microphone permission\nasync function requestMicPermission() {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    stream.getTracks().forEach(track => track.stop()); // Stop stream to release the mic\n    return true;\n  } catch (error) {\n    alert('Microphone access is required for speech recognition.');\n    return false;\n  }\n}\n\n// Initialize SpeechRecognition\nfunction initializeRecognition() {\n  if (!window.SpeechRecognition && !window.webkitSpeechRecognition) {\n    alert('Your browser does not support the SpeechRecognition API.');\n    return;\n  }\n  window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  recognition = new window.SpeechRecognition();\n  recognition.continuous = true;\n  recognition.interimResults = true;\n  recognition.lang = 'en-US';\n  recognition.onresult = event => {\n    if (userStartedRecognition) {\n      logWithLimit('Recognition result received.');\n      // Handle results here\n    }\n  };\n  recognition.onerror = event => {\n    logWithLimit('Recognition error: ' + event.error);\n    if (event.error === 'aborted' || event.error === 'no-speech') {\n      logWithLimit('Recognition aborted, waiting before restart...');\n      handleRestartWithCooldown();\n    }\n  };\n  recognition.onend = () => {\n    if (userStartedRecognition && isRecognitionRunning && !isRestarting) {\n      logWithLimit('Recognition ended, but user requested it to keep running.');\n      handleRestartWithCooldown();\n    } else {\n      logWithLimit('Recognition ended normally.');\n    }\n  };\n  isRecognitionInitialized = true;\n  logWithLimit('Recognition initialized.');\n}\n\n// Start recognition only when manually triggered\nfunction startRecognition() {\n  if (!isRecognitionInitialized) {\n    logWithLimit('Cannot start recognition; initialization is not complete.');\n    return;\n  }\n  if (!isRecognitionRunning && !isRestarting && userStartedRecognition) {\n    logWithLimit('Starting recognition...');\n    isRecognitionRunning = true;\n    try {\n      recognition.start();\n    } catch (error) {\n      logWithLimit('Error starting recognition: ' + error);\n    }\n  } else {\n    logWithLimit('Recognition is already running or restarting.');\n  }\n}\n\n// Cooldown before restarting recognition\nfunction handleRestartWithCooldown() {\n  if (!userStartedRecognition || !isRecognitionRunning || isRestarting) {\n    return;\n  }\n  isRestarting = true;\n  logWithLimit('Cooldown initiated, will restart in a few seconds...');\n  setTimeout(() => {\n    if (isRecognitionRunning && userStartedRecognition) {\n      logWithLimit('Restarting recognition...');\n      stopAndRestartRecognition(); // Stop and restart with delay\n    }\n    isRestarting = false;\n  }, COOLDOWN_DURATION); // Wait before restarting\n}\n\n// Stop and restart recognition with delay\nfunction stopAndRestartRecognition() {\n  try {\n    recognition.stop(); // Stop first\n    setTimeout(() => {\n      if (isRecognitionRunning && userStartedRecognition && !isRestarting) {\n        try {\n          logWithLimit('Attempting to restart recognition...');\n          recognition.start(); // Then restart after delay\n        } catch (error) {\n          logWithLimit('Error restarting recognition: ' + error);\n        }\n      }\n    }, RESTART_DELAY); // Wait before starting again\n  } catch (error) {\n    logWithLimit('Error stopping recognition: ' + error);\n  }\n}\n\n// Stop recognition\nexport function stopRecognition() {\n  if (isRecognitionRunning) {\n    logWithLimit('Stopping recognition...');\n    try {\n      recognition.stop();\n    } catch (error) {\n      logWithLimit('Error stopping recognition: ' + error);\n    }\n    isRecognitionRunning = false;\n    isRestarting = false;\n    userStartedRecognition = false; // Mark recognition as manually stopped by the user\n  } else {\n    logWithLimit('Recognition is not running.');\n  }\n}\n\n// Start speech recognition process when manually triggered\nexport async function startSpeechRecognition() {\n  const permissionGranted = await requestMicPermission();\n  if (!permissionGranted) return;\n  if (!isRecognitionInitialized) {\n    initializeRecognition();\n  }\n  userStartedRecognition = true; // Track that the user started the recognition\n  startRecognition();\n}","map":{"version":3,"names":["isRecognitionRunning","isRestarting","recognition","isRecognitionInitialized","userStartedRecognition","COOLDOWN_DURATION","RESTART_DELAY","logWithLimit","message","timestamp","Date","toISOString","console","log","requestMicPermission","stream","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","track","stop","error","alert","initializeRecognition","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","onerror","handleRestartWithCooldown","onend","startRecognition","start","setTimeout","stopAndRestartRecognition","stopRecognition","startSpeechRecognition","permissionGranted"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["let isRecognitionRunning = false;\nlet isRestarting = false;\nlet recognition;\nlet isRecognitionInitialized = false;\nlet userStartedRecognition = false;  // New flag to track if the user explicitly started the recognition\nconst COOLDOWN_DURATION = 3000; // Cooldown period before restarting\nconst RESTART_DELAY = 1000; // Delay between stop and start\n\n// Log messages\nfunction logWithLimit(message) {\n    const timestamp = new Date().toISOString();\n    console.log(`[${timestamp}] ${message}`);\n}\n\n// Request microphone permission\nasync function requestMicPermission() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        stream.getTracks().forEach(track => track.stop()); // Stop stream to release the mic\n        return true;\n    } catch (error) {\n        alert('Microphone access is required for speech recognition.');\n        return false;\n    }\n}\n\n// Initialize SpeechRecognition\nfunction initializeRecognition() {\n    if (!window.SpeechRecognition && !window.webkitSpeechRecognition) {\n        alert('Your browser does not support the SpeechRecognition API.');\n        return;\n    }\n\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    recognition = new window.SpeechRecognition();\n    recognition.continuous = true;\n    recognition.interimResults = true;\n    recognition.lang = 'en-US';\n\n    recognition.onresult = (event) => {\n        if (userStartedRecognition) {\n            logWithLimit('Recognition result received.');\n            // Handle results here\n        }\n    };\n\n    recognition.onerror = (event) => {\n        logWithLimit('Recognition error: ' + event.error);\n        if (event.error === 'aborted' || event.error === 'no-speech') {\n            logWithLimit('Recognition aborted, waiting before restart...');\n            handleRestartWithCooldown();\n        }\n    };\n\n    recognition.onend = () => {\n        if (userStartedRecognition && isRecognitionRunning && !isRestarting) {\n            logWithLimit('Recognition ended, but user requested it to keep running.');\n            handleRestartWithCooldown();\n        } else {\n            logWithLimit('Recognition ended normally.');\n        }\n    };\n\n    isRecognitionInitialized = true;\n    logWithLimit('Recognition initialized.');\n}\n\n// Start recognition only when manually triggered\nfunction startRecognition() {\n    if (!isRecognitionInitialized) {\n        logWithLimit('Cannot start recognition; initialization is not complete.');\n        return;\n    }\n\n    if (!isRecognitionRunning && !isRestarting && userStartedRecognition) {\n        logWithLimit('Starting recognition...');\n        isRecognitionRunning = true;\n        try {\n            recognition.start();\n        } catch (error) {\n            logWithLimit('Error starting recognition: ' + error);\n        }\n    } else {\n        logWithLimit('Recognition is already running or restarting.');\n    }\n}\n\n// Cooldown before restarting recognition\nfunction handleRestartWithCooldown() {\n    if (!userStartedRecognition || !isRecognitionRunning || isRestarting) {\n        return;\n    }\n\n    isRestarting = true;\n    logWithLimit('Cooldown initiated, will restart in a few seconds...');\n\n    setTimeout(() => {\n        if (isRecognitionRunning && userStartedRecognition) {\n            logWithLimit('Restarting recognition...');\n            stopAndRestartRecognition(); // Stop and restart with delay\n        }\n        isRestarting = false;\n    }, COOLDOWN_DURATION); // Wait before restarting\n}\n\n// Stop and restart recognition with delay\nfunction stopAndRestartRecognition() {\n    try {\n        recognition.stop(); // Stop first\n        setTimeout(() => {\n            if (isRecognitionRunning && userStartedRecognition && !isRestarting) {\n                try {\n                    logWithLimit('Attempting to restart recognition...');\n                    recognition.start(); // Then restart after delay\n                } catch (error) {\n                    logWithLimit('Error restarting recognition: ' + error);\n                }\n            }\n        }, RESTART_DELAY); // Wait before starting again\n    } catch (error) {\n        logWithLimit('Error stopping recognition: ' + error);\n    }\n}\n\n// Stop recognition\nexport function stopRecognition() {\n    if (isRecognitionRunning) {\n        logWithLimit('Stopping recognition...');\n        try {\n            recognition.stop();\n        } catch (error) {\n            logWithLimit('Error stopping recognition: ' + error);\n        }\n        isRecognitionRunning = false;\n        isRestarting = false;\n        userStartedRecognition = false; // Mark recognition as manually stopped by the user\n    } else {\n        logWithLimit('Recognition is not running.');\n    }\n}\n\n// Start speech recognition process when manually triggered\nexport async function startSpeechRecognition() {\n    const permissionGranted = await requestMicPermission();\n    if (!permissionGranted) return;\n\n    if (!isRecognitionInitialized) {\n        initializeRecognition();\n    }\n\n    userStartedRecognition = true;  // Track that the user started the recognition\n    startRecognition();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}