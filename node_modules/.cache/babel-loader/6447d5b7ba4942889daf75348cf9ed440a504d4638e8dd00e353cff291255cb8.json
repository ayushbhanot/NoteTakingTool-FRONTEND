{"ast":null,"code":"var _jsxFileName = \"/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { startSpeechRecognition, stopRecognition } from './services/audioRecording'; // Adjust path as needed\nimport NotesUI from './components/NotesUI'; // Assuming you have a NotesUI component to display the generated notes\nimport axios from 'axios'; // Import Axios for making API requests\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [generatedNotes, setGeneratedNotes] = useState({});\n  const [transcript, setTranscript] = useState(''); // Store the transcript\n\n  const handleStartRecording = async () => {\n    if (isRecording) return;\n    setIsRecording(true);\n    try {\n      await startSpeechRecognition();\n    } catch (error) {\n      console.error('Error starting speech recognition:', error);\n      setIsRecording(false);\n    }\n  };\n  const handleStopRecording = async () => {\n    if (!isRecording) return;\n    try {\n      const finalTranscript = await stopRecognition(); // Stop recognition and get the final transcript\n      setTranscript(finalTranscript); // Set transcript state\n\n      // Send the transcript to the backend API to generate notes\n      const response = await axios.post('http://localhost:3001/transcribe', {\n        transcript: finalTranscript\n      });\n\n      // Store the generated notes\n      setGeneratedNotes(response.data.notes);\n    } catch (error) {\n      console.error('Error stopping speech recognition or sending transcript:', error);\n    } finally {\n      setIsRecording(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Speech to Notes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStartRecording,\n      disabled: isRecording,\n      children: \"Start Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStopRecording,\n      disabled: !isRecording,\n      children: \"Stop Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), generatedNotes && /*#__PURE__*/_jsxDEV(NotesUI, {\n      notes: generatedNotes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 32\n    }, this), \"  \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"HvJGaCs8A/rnlQ5S4Hccyu4aGB4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","startSpeechRecognition","stopRecognition","NotesUI","axios","jsxDEV","_jsxDEV","App","_s","isRecording","setIsRecording","generatedNotes","setGeneratedNotes","transcript","setTranscript","handleStartRecording","error","console","handleStopRecording","finalTranscript","response","post","data","notes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { startSpeechRecognition, stopRecognition } from './services/audioRecording';  // Adjust path as needed\nimport NotesUI from './components/NotesUI';  // Assuming you have a NotesUI component to display the generated notes\nimport axios from 'axios';  // Import Axios for making API requests\n\nfunction App() {\n    const [isRecording, setIsRecording] = useState(false);\n    const [generatedNotes, setGeneratedNotes] = useState({});\n    const [transcript, setTranscript] = useState('');  // Store the transcript\n\n    const handleStartRecording = async () => {\n        if (isRecording) return;\n        setIsRecording(true);\n        try {\n            await startSpeechRecognition();\n        } catch (error) {\n            console.error('Error starting speech recognition:', error);\n            setIsRecording(false);\n        }\n    };\n\n    const handleStopRecording = async () => {\n        if (!isRecording) return;\n        try {\n            const finalTranscript = await stopRecognition();  // Stop recognition and get the final transcript\n            setTranscript(finalTranscript);  // Set transcript state\n\n            // Send the transcript to the backend API to generate notes\n            const response = await axios.post('http://localhost:3001/transcribe', { transcript: finalTranscript });\n\n            // Store the generated notes\n            setGeneratedNotes(response.data.notes);\n        } catch (error) {\n            console.error('Error stopping speech recognition or sending transcript:', error);\n        } finally {\n            setIsRecording(false);\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>Speech to Notes</h1>\n            <button onClick={handleStartRecording} disabled={isRecording}>\n                Start Recording\n            </button>\n            <button onClick={handleStopRecording} disabled={!isRecording}>\n                Stop Recording\n            </button>\n            {generatedNotes && <NotesUI notes={generatedNotes} />}  {/* Render generated notes */}\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,sBAAsB,EAAEC,eAAe,QAAQ,2BAA2B,CAAC,CAAE;AACtF,OAAOC,OAAO,MAAM,sBAAsB,CAAC,CAAE;AAC7C,OAAOC,KAAK,MAAM,OAAO,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE5B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACW,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxD,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;;EAEnD,MAAMe,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAIN,WAAW,EAAE;IACjBC,cAAc,CAAC,IAAI,CAAC;IACpB,IAAI;MACA,MAAMT,sBAAsB,CAAC,CAAC;IAClC,CAAC,CAAC,OAAOe,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC1DN,cAAc,CAAC,KAAK,CAAC;IACzB;EACJ,CAAC;EAED,MAAMQ,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI,CAACT,WAAW,EAAE;IAClB,IAAI;MACA,MAAMU,eAAe,GAAG,MAAMjB,eAAe,CAAC,CAAC,CAAC,CAAE;MAClDY,aAAa,CAACK,eAAe,CAAC,CAAC,CAAE;;MAEjC;MACA,MAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,IAAI,CAAC,kCAAkC,EAAE;QAAER,UAAU,EAAEM;MAAgB,CAAC,CAAC;;MAEtG;MACAP,iBAAiB,CAACQ,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;IAC1C,CAAC,CAAC,OAAOP,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,0DAA0D,EAAEA,KAAK,CAAC;IACpF,CAAC,SAAS;MACNN,cAAc,CAAC,KAAK,CAAC;IACzB;EACJ,CAAC;EAED,oBACIJ,OAAA;IAAKkB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAChBnB,OAAA;MAAAmB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxBvB,OAAA;MAAQwB,OAAO,EAAEf,oBAAqB;MAACgB,QAAQ,EAAEtB,WAAY;MAAAgB,QAAA,EAAC;IAE9D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACTvB,OAAA;MAAQwB,OAAO,EAAEZ,mBAAoB;MAACa,QAAQ,EAAE,CAACtB,WAAY;MAAAgB,QAAA,EAAC;IAE9D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACRlB,cAAc,iBAAIL,OAAA,CAACH,OAAO;MAACoB,KAAK,EAAEZ;IAAe;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAAC,IAAE;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvD,CAAC;AAEd;AAACrB,EAAA,CA9CQD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAgDZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}