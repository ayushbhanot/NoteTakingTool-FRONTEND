{"ast":null,"code":"let recognition;\nexport let finalTranscript = ''; // This will hold the full transcript\nlet interimTranscript = ''; // This will hold the interim transcript during a session\nlet isRecognitionRunning = false;\nlet shouldRestart = true; // New flag to control whether to restart\nlet inactivityTimeout; // For tracking inactivity timeout\nconst INACTIVITY_THRESHOLD = 30000; // 30 seconds of inactivity before restarting\nconst RESTART_DELAY = 5500; // 2-second delay before restarting\nconst CHARACTER_THRESHOLD = 300; // Threshold for interim transcript size\n\nexport function initializeRecognition() {\n  window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  if (!window.SpeechRecognition) {\n    alert('Browser does not support SpeechRecognition API.');\n    console.log('SpeechRecognition API not supported');\n    return;\n  }\n  recognition = new window.SpeechRecognition();\n  recognition.continuous = true; // Keep recognition continuous\n  recognition.interimResults = true;\n  recognition.lang = 'en-US';\n  recognition.onresult = event => {\n    clearTimeout(inactivityTimeout); // Clear any existing inactivity timeout\n    let interim = '';\n    for (let i = event.resultIndex; i < event.results.length; i++) {\n      const transcript = event.results[i][0].transcript;\n      if (event.results[i].isFinal) {\n        finalTranscript += transcript + ' '; // Append final transcript\n        interimTranscript = ''; // Clear interim transcript\n        console.log('Final Transcript (updated):', finalTranscript);\n      } else {\n        // Only append interim results if they are significantly large\n        if (transcript.length > CHARACTER_THRESHOLD) {\n          interim = transcript;\n          console.log('Interim Transcript (updated):', interim);\n        }\n      }\n    }\n    interimTranscript = interim; // Update the interim transcript only after loop\n  };\n\n  // Fired when the user stops speaking but the recognition is still active\n  recognition.onspeechend = () => {\n    console.log('Speech ended. Waiting to see if the user continues...');\n    // Set a timeout to restart only if no further speech is detected\n    inactivityTimeout = setTimeout(() => {\n      if (isRecognitionRunning && shouldRestart) {\n        console.log('No further speech detected. Restarting recognition...');\n        restartRecognition();\n      }\n    }, 5000); // 5 seconds pause before considering the end of speech\n  };\n\n  // Fired when the recognition has stopped\n  recognition.onend = () => {\n    console.log('Recognition ended.');\n    // Append any remaining interim transcript to the final transcript\n    if (interimTranscript.trim() !== '') {\n      finalTranscript += interimTranscript.trim() + ' ';\n      interimTranscript = ''; // Clear interim transcript\n      console.log('Appended final Interim Transcript:', finalTranscript);\n    }\n    if (isRecognitionRunning && shouldRestart) {\n      console.log('Recognition stopped unexpectedly. Restarting...');\n      restartRecognition(); // Restart when recognition unexpectedly ends\n    }\n  };\n  recognition.onerror = event => {\n    console.log('Recognition error:', event.error);\n    restartRecognition(); // Restart if an error occurs\n  };\n  console.log('Speech recognition initialized.');\n}\n\n// Start Speech Recognition\nexport function startRecognition() {\n  if (!isRecognitionRunning) {\n    console.log('Starting recognition...');\n    try {\n      recognition.start();\n      isRecognitionRunning = true;\n    } catch (error) {\n      console.log('Recognition start failed:', error);\n      // Retry after a short delay if start fails\n      setTimeout(startRecognition, 1000);\n    }\n  } else {\n    console.log('Recognition already running.');\n  }\n}\nexport async function startSpeechRecognition() {\n  const permissionGranted = await requestMicPermission();\n  if (!permissionGranted) return;\n  if (!recognition) {\n    initializeRecognition();\n  }\n  startRecognition();\n}\n\n// Stop Speech Recognition\nexport function stopRecognition() {\n  if (isRecognitionRunning) {\n    console.log('Stopping recognition...');\n\n    // Append any remaining interim transcript to the final transcript\n    if (interimTranscript.trim() !== '') {\n      finalTranscript += interimTranscript.trim() + ' ';\n      interimTranscript = ''; // Clear interim transcript\n      console.log('Appended final Interim Transcript:', finalTranscript);\n    }\n    shouldRestart = false; // Prevent unwanted restarts\n    recognition.stop();\n    clearTimeout(inactivityTimeout);\n    isRecognitionRunning = false;\n  }\n}\n\n// Restart recognition after 3 seconds with a 500ms delay for the restart process\nfunction restartRecognition() {\n  if (!shouldRestart) return; // Prevent restarts if stopped manually\n\n  if (isRecognitionRunning) {\n    console.log('Stopping recognition before restarting...');\n    recognition.stop(); // Stop the current recognition\n    isRecognitionRunning = false;\n\n    // Wait for 3 seconds before restarting\n    setTimeout(() => {\n      console.log('Restarting recognition...');\n      setTimeout(() => {\n        startRecognition(); // Start the recognition after 500ms delay\n      }, 500); // 500ms for the actual restart process\n    }, 3000); // 3 seconds before initiating the restart\n  }\n}\nexport function resetTranscript() {\n  finalTranscript = ''; // Reset the final transcript manually when called\n  console.log('Transcript has been reset.');\n}\n\n// Request microphone permission\nexport async function requestMicPermission() {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    stream.getTracks().forEach(track => track.stop());\n    console.log('Microphone permission granted');\n    return true;\n  } catch (error) {\n    alert('Microphone access is required.');\n    console.log('Microphone permission denied');\n    return false;\n  }\n}\n\n// Export the final transcript for use elsewhere\nexport const getFinalTranscript = () => finalTranscript;","map":{"version":3,"names":["recognition","finalTranscript","interimTranscript","isRecognitionRunning","shouldRestart","inactivityTimeout","INACTIVITY_THRESHOLD","RESTART_DELAY","CHARACTER_THRESHOLD","initializeRecognition","window","SpeechRecognition","webkitSpeechRecognition","alert","console","log","continuous","interimResults","lang","onresult","event","clearTimeout","interim","i","resultIndex","results","length","transcript","isFinal","onspeechend","setTimeout","restartRecognition","onend","trim","onerror","error","startRecognition","start","startSpeechRecognition","permissionGranted","requestMicPermission","stopRecognition","stop","resetTranscript","stream","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","track","getFinalTranscript"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["let recognition;\nexport let finalTranscript = ''; // This will hold the full transcript\nlet interimTranscript = ''; // This will hold the interim transcript during a session\nlet isRecognitionRunning = false;\nlet shouldRestart = true;  // New flag to control whether to restart\nlet inactivityTimeout; // For tracking inactivity timeout\nconst INACTIVITY_THRESHOLD = 30000; // 30 seconds of inactivity before restarting\nconst RESTART_DELAY = 5500;  // 2-second delay before restarting\nconst CHARACTER_THRESHOLD = 300; // Threshold for interim transcript size\n\nexport function initializeRecognition() {\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!window.SpeechRecognition) {\n        alert('Browser does not support SpeechRecognition API.');\n        console.log('SpeechRecognition API not supported');\n        return;\n    }\n\n    recognition = new window.SpeechRecognition();\n    recognition.continuous = true;  // Keep recognition continuous\n    recognition.interimResults = true;\n    recognition.lang = 'en-US';\n\n    recognition.onresult = (event) => {\n        clearTimeout(inactivityTimeout);  // Clear any existing inactivity timeout\n        let interim = '';\n    \n        for (let i = event.resultIndex; i < event.results.length; i++) {\n            const transcript = event.results[i][0].transcript;\n    \n            if (event.results[i].isFinal) {\n                finalTranscript += transcript + ' ';  // Append final transcript\n                interimTranscript = '';  // Clear interim transcript\n                console.log('Final Transcript (updated):', finalTranscript);\n            } else {\n                // Only append interim results if they are significantly large\n                if (transcript.length > CHARACTER_THRESHOLD) {\n                    interim = transcript;\n                    console.log('Interim Transcript (updated):', interim);\n                }\n            }\n        }\n    \n        interimTranscript = interim;  // Update the interim transcript only after loop\n    };\n    \n\n    // Fired when the user stops speaking but the recognition is still active\n    recognition.onspeechend = () => {\n        console.log('Speech ended. Waiting to see if the user continues...');\n        // Set a timeout to restart only if no further speech is detected\n        inactivityTimeout = setTimeout(() => {\n            if (isRecognitionRunning && shouldRestart) {\n                console.log('No further speech detected. Restarting recognition...');\n                restartRecognition();\n            }\n        }, 5000);  // 5 seconds pause before considering the end of speech\n    };\n\n    // Fired when the recognition has stopped\n    recognition.onend = () => {\n        console.log('Recognition ended.');\n        // Append any remaining interim transcript to the final transcript\n        if (interimTranscript.trim() !== '') {\n            finalTranscript += interimTranscript.trim() + ' ';\n            interimTranscript = '';  // Clear interim transcript\n            console.log('Appended final Interim Transcript:', finalTranscript);\n        }\n\n        if (isRecognitionRunning && shouldRestart) {\n            console.log('Recognition stopped unexpectedly. Restarting...');\n            restartRecognition();  // Restart when recognition unexpectedly ends\n        }\n    };\n\n    recognition.onerror = (event) => {\n        console.log('Recognition error:', event.error);\n        restartRecognition();  // Restart if an error occurs\n    };\n\n    console.log('Speech recognition initialized.');\n}\n\n\n// Start Speech Recognition\nexport function startRecognition() {\n    if (!isRecognitionRunning) {\n        console.log('Starting recognition...');\n        try {\n            recognition.start();\n            isRecognitionRunning = true;\n        } catch (error) {\n            console.log('Recognition start failed:', error);\n            // Retry after a short delay if start fails\n            setTimeout(startRecognition, 1000);\n        }\n    } else {\n        console.log('Recognition already running.');\n    }\n}\n\nexport async function startSpeechRecognition() {\n    const permissionGranted = await requestMicPermission();\n    if (!permissionGranted) return;\n\n    if (!recognition) {\n        initializeRecognition();\n    }\n    startRecognition();\n}\n\n\n// Stop Speech Recognition\nexport function stopRecognition() {\n    if (isRecognitionRunning) {\n        console.log('Stopping recognition...');\n\n        // Append any remaining interim transcript to the final transcript\n        if (interimTranscript.trim() !== '') {\n            finalTranscript += interimTranscript.trim() + ' ';\n            interimTranscript = '';  // Clear interim transcript\n            console.log('Appended final Interim Transcript:', finalTranscript);\n        }\n\n        shouldRestart = false;  // Prevent unwanted restarts\n        recognition.stop();\n        clearTimeout(inactivityTimeout);\n        isRecognitionRunning = false;\n    }\n}\n\n\n// Restart recognition after 3 seconds with a 500ms delay for the restart process\nfunction restartRecognition() {\n    if (!shouldRestart) return;  // Prevent restarts if stopped manually\n\n    if (isRecognitionRunning) {\n        console.log('Stopping recognition before restarting...');\n        recognition.stop();  // Stop the current recognition\n        isRecognitionRunning = false;\n\n        // Wait for 3 seconds before restarting\n        setTimeout(() => {\n            console.log('Restarting recognition...');\n            setTimeout(() => {\n                startRecognition();  // Start the recognition after 500ms delay\n            }, 500);  // 500ms for the actual restart process\n        }, 3000);  // 3 seconds before initiating the restart\n    }\n}\n\nexport function resetTranscript() {\n    finalTranscript = '';  // Reset the final transcript manually when called\n    console.log('Transcript has been reset.');\n}\n\n\n// Request microphone permission\nexport async function requestMicPermission() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        stream.getTracks().forEach(track => track.stop());\n        console.log('Microphone permission granted');\n        return true;\n    } catch (error) {\n        alert('Microphone access is required.');\n        console.log('Microphone permission denied');\n        return false;\n    }\n}\n\n// Export the final transcript for use elsewhere\nexport const getFinalTranscript = () => finalTranscript;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}