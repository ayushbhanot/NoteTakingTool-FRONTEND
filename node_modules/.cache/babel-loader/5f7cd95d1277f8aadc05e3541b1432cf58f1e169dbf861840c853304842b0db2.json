{"ast":null,"code":"require('dotenv').config(); // Load environment variables from .env file\n\nconst {\n  OpenAI\n} = require(\"openai\");\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY // Initialize OpenAI with the API key from environment variables\n});\n// Import OpenAI Library so we can organize notes\n\nconst {\n  generateNotes\n} = require('../../speech-backend/backend-services/openAIService'); // Import the generateNotes function from openAIService.js\n\nconst identifyKeyTopics = async transcript => {\n  const response = await openai.chat.completions.create({\n    model: \"gpt-3.5-turbo\",\n    messages: [{\n      role: \"system\",\n      content: \"You are an assistant that identifies key topics from transcripts.\"\n    }, {\n      role: \"user\",\n      content: `List the key topics discussed in the following transcript:\\n\\n${transcript}`\n    }\n    // Asks GPT-3 to list key topics\n    ],\n    max_tokens: 100\n  });\n  const topics = response.choices[0].message.content.trim().split('\\n');\n  return topics;\n  // Returns list of topics as an array\n};\n// This function sends the transcript to GPT-3 and identifies key topics\n\nconst groupNotesByTopic = notes => {\n  const organizedNotes = {};\n  let currentTopic = null;\n  notes.forEach(note => {\n    //Loop through each note in the array \n    note = note.trim();\n    if (!note) return; //Skip empty notes\n\n    // Check if the note is a topic header (e.g., \"### Topic Name ###\")\n    if (note.startsWith(\"###\") && note.endsWith(\"###\")) {\n      currentTopic = note.slice(3, -3).trim(); // Extract the topic\n      organizedNotes[currentTopic] = [];\n    } else if (currentTopic) {\n      organizedNotes[currentTopic].push(note); // If not a topic, extract and add the note to the current topic\n    }\n  });\n  return organizedNotes;\n};\n// This function organizes the generated notes into key topics\n\nconst storeOrganizedNotes = organizedNotes => {\n  const organizedNotesJSON = JSON.stringify(organizedNotes, null, 2);\n  console.log(\"Organized Notes JSON:\", organizedNotesJSON);\n  // Save the JSON to a file or database here.\n};\n// Converts organized notes into a JSON format for easy storage and/or further processing\n\nconst organizeNotesByTopic = async transcript => {\n  console.log(\"Starting organization...\");\n  const topics = await identifyKeyTopics(transcript);\n  console.log(\"Identified Topics:\", topics);\n  const notes = await generateNotes(transcript);\n  console.log(\"Generated Notes:\", notes);\n  const organizedNotes = groupNotesByTopic(notes.split('\\n'), topics);\n  console.log(\"Organized Notes:\", organizedNotes);\n  storeOrganizedNotes(organizedNotes);\n  return organizedNotes;\n};\n\n// This function acts as the workflow, coordinating all the other functions\n\nmodule.exports = {\n  organizeNotesByTopic\n};\n// Export the organizeNotesByTopic function for use in other modules","map":{"version":3,"names":["require","config","OpenAI","openai","apiKey","process","env","REACT_APP_OPENAI_API_KEY","generateNotes","identifyKeyTopics","transcript","response","chat","completions","create","model","messages","role","content","max_tokens","topics","choices","message","trim","split","groupNotesByTopic","notes","organizedNotes","currentTopic","forEach","note","startsWith","endsWith","slice","push","storeOrganizedNotes","organizedNotesJSON","JSON","stringify","console","log","organizeNotesByTopic","module","exports"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/noteOrganizer.js"],"sourcesContent":["require('dotenv').config();  // Load environment variables from .env file\n\nconst { OpenAI } = require(\"openai\");\nconst openai = new OpenAI({\n    apiKey: process.env.REACT_APP_OPENAI_API_KEY,  // Initialize OpenAI with the API key from environment variables\n});\n// Import OpenAI Library so we can organize notes\n\nconst { generateNotes } = require('../../speech-backend/backend-services/openAIService');  // Import the generateNotes function from openAIService.js\n\nconst identifyKeyTopics = async (transcript) => {\n    const response = await openai.chat.completions.create({\n        model: \"gpt-3.5-turbo\",\n        messages: [\n            { role: \"system\", content: \"You are an assistant that identifies key topics from transcripts.\" },\n            { role: \"user\", content: `List the key topics discussed in the following transcript:\\n\\n${transcript}` }\n            // Asks GPT-3 to list key topics\n        ],\n        max_tokens: 100,\n    });\n    const topics = response.choices[0].message.content.trim().split('\\n');\n    return topics;\n    // Returns list of topics as an array\n};\n// This function sends the transcript to GPT-3 and identifies key topics\n\nconst groupNotesByTopic = (notes) => {\n    const organizedNotes = {};\n    let currentTopic = null;\n\n    notes.forEach(note => { //Loop through each note in the array \n        note = note.trim();\n        if (!note) return; //Skip empty notes\n\n        // Check if the note is a topic header (e.g., \"### Topic Name ###\")\n        if (note.startsWith(\"###\") && note.endsWith(\"###\")) {\n            currentTopic = note.slice(3, -3).trim(); // Extract the topic\n            organizedNotes[currentTopic] = [];\n        } else if (currentTopic) {\n            organizedNotes[currentTopic].push(note); // If not a topic, extract and add the note to the current topic\n        }\n    });\n\n    return organizedNotes;\n};\n// This function organizes the generated notes into key topics\n\nconst storeOrganizedNotes = (organizedNotes) => {\n    const organizedNotesJSON = JSON.stringify(organizedNotes, null, 2);\n    console.log(\"Organized Notes JSON:\", organizedNotesJSON);\n    // Save the JSON to a file or database here.\n};\n// Converts organized notes into a JSON format for easy storage and/or further processing\n\nconst organizeNotesByTopic = async (transcript) => {\n    console.log(\"Starting organization...\");\n    \n    const topics = await identifyKeyTopics(transcript);\n    console.log(\"Identified Topics:\", topics);\n\n    const notes = await generateNotes(transcript);\n    console.log(\"Generated Notes:\", notes);\n\n    const organizedNotes = groupNotesByTopic(notes.split('\\n'), topics);\n    console.log(\"Organized Notes:\", organizedNotes);\n\n    storeOrganizedNotes(organizedNotes);\n    return organizedNotes;\n};\n\n// This function acts as the workflow, coordinating all the other functions\n\nmodule.exports = { organizeNotesByTopic };\n// Export the organizeNotesByTopic function for use in other modules\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}