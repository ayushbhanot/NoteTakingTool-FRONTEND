{"ast":null,"code":"let isRecognitionRunning = false;\nlet isRestarting = false;\nlet finalTranscript = '';\nlet recognition;\nlet isRecognitionInitialized = false;\nconst INTERIM_THRESHOLD = 40; // Threshold for interim transcript length before appending\nlet lastLoggedInterimTranscript = '';\nlet lastRecognitionTime = Date.now(); // Time of the last recognition result\nlet logCount = 0;\nconst TIMEOUT_DURATION = 3000; // Timeout for handling short pauses\n\n// Function to log messages\nfunction logWithLimit(message) {\n  const timestamp = new Date().toISOString();\n  logCount++;\n  if (logCount % 50 === 0) {\n    console.clear(); // Clear the console every 50 logs to avoid clutter\n  }\n  console.log(`[${timestamp}] ${message}`);\n}\n\n// Function to request microphone permission\nasync function requestMicPermission() {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    stream.getTracks().forEach(track => track.stop()); // Stop the stream after permission is granted\n    return true;\n  } catch (error) {\n    alert('Microphone access is required for speech recognition.');\n    return false;\n  }\n}\n\n// Initialize SpeechRecognition\nfunction initializeRecognition() {\n  window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  if (!window.SpeechRecognition) {\n    alert('Your browser does not support the SpeechRecognition API.');\n    return;\n  }\n  recognition = new window.SpeechRecognition();\n  recognition.continuous = true;\n  recognition.interimResults = true;\n  recognition.lang = 'en-US';\n  recognition.onresult = event => {\n    let interimTranscript = '';\n    lastRecognitionTime = Date.now();\n    for (let i = event.resultIndex; i < event.results.length; i++) {\n      const result = event.results[i];\n      if (result.isFinal) {\n        finalTranscript += result[0].transcript.trim() + ' ';\n        logWithLimit('Final Transcript So Far: ' + finalTranscript);\n      } else {\n        interimTranscript += result[0].transcript;\n      }\n    }\n\n    // Prevent duplicate logging of similar interim transcripts\n    if (interimTranscript.length > INTERIM_THRESHOLD && interimTranscript !== lastLoggedInterimTranscript) {\n      if (!finalTranscript.includes(interimTranscript.trim())) {\n        lastLoggedInterimTranscript = interimTranscript;\n        logWithLimit('Interim Transcript: ' + interimTranscript);\n      }\n    }\n  };\n  recognition.onerror = event => {\n    logWithLimit('Recognition error: ' + event.error);\n    restartRecognition();\n  };\n  recognition.onend = () => {\n    logWithLimit('Recognition ended.');\n    if (isRecognitionRunning && !isRestarting) {\n      restartRecognition();\n    }\n  };\n  isRecognitionInitialized = true;\n  logWithLimit('Recognition initialized.');\n}\n\n// Start SpeechRecognition if initialized\nfunction startRecognition() {\n  if (!isRecognitionInitialized) {\n    logWithLimit('Cannot start recognition; initialization is not complete.');\n    return;\n  }\n  if (!isRecognitionRunning) {\n    logWithLimit('Starting recognition...');\n    isRecognitionRunning = true;\n    recognition.start();\n  }\n}\n\n// Restart recognition if necessary\nfunction restartRecognition() {\n  if (isRecognitionRunning && recognition) {\n    logWithLimit('Stopping recognition before restarting...');\n    recognition.stop();\n  }\n  isRestarting = true;\n  setTimeout(() => {\n    if (isRestarting && isRecognitionInitialized) {\n      logWithLimit('Restarting recognition...');\n      startRecognition();\n      isRestarting = false;\n    }\n  }, 1000);\n}\n\n// Stop recognition\nexport function stopRecognition() {\n  if (isRecognitionRunning) {\n    logWithLimit('Stopping recognition...');\n    recognition.stop();\n    isRecognitionRunning = false;\n    isRestarting = false;\n  }\n}\n\n// Ensure recognition is initialized only when starting the process manually\nexport async function startSpeechRecognition() {\n  const permissionGranted = await requestMicPermission();\n  if (!permissionGranted) return;\n  if (!isRecognitionInitialized) {\n    initializeRecognition();\n  }\n  startRecognition();\n}","map":{"version":3,"names":["isRecognitionRunning","isRestarting","finalTranscript","recognition","isRecognitionInitialized","INTERIM_THRESHOLD","lastLoggedInterimTranscript","lastRecognitionTime","Date","now","logCount","TIMEOUT_DURATION","logWithLimit","message","timestamp","toISOString","console","clear","log","requestMicPermission","stream","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","track","stop","error","alert","initializeRecognition","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","interimTranscript","i","resultIndex","results","length","result","isFinal","transcript","trim","includes","onerror","restartRecognition","onend","startRecognition","start","setTimeout","stopRecognition","startSpeechRecognition","permissionGranted"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["let isRecognitionRunning = false;\nlet isRestarting = false;\nlet finalTranscript = ''; \nlet recognition;\nlet isRecognitionInitialized = false;\nconst INTERIM_THRESHOLD = 40;  // Threshold for interim transcript length before appending\nlet lastLoggedInterimTranscript = '';  \nlet lastRecognitionTime = Date.now();  // Time of the last recognition result\nlet logCount = 0;\nconst TIMEOUT_DURATION = 3000;  // Timeout for handling short pauses\n\n// Function to log messages\nfunction logWithLimit(message) {\n    const timestamp = new Date().toISOString();\n    logCount++;\n\n    if (logCount % 50 === 0) {  \n        console.clear();  // Clear the console every 50 logs to avoid clutter\n    }\n\n    console.log(`[${timestamp}] ${message}`);\n}\n\n// Function to request microphone permission\nasync function requestMicPermission() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        stream.getTracks().forEach(track => track.stop());  // Stop the stream after permission is granted\n        return true;\n    } catch (error) {\n        alert('Microphone access is required for speech recognition.');\n        return false;\n    }\n}\n\n// Initialize SpeechRecognition\nfunction initializeRecognition() {\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n\n    if (!window.SpeechRecognition) {\n        alert('Your browser does not support the SpeechRecognition API.');\n        return;\n    }\n\n    recognition = new window.SpeechRecognition();\n    recognition.continuous = true;  \n    recognition.interimResults = true;  \n    recognition.lang = 'en-US';  \n\n    recognition.onresult = (event) => {\n        let interimTranscript = '';\n        lastRecognitionTime = Date.now();\n\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n            const result = event.results[i];\n            if (result.isFinal) {\n                finalTranscript += result[0].transcript.trim() + ' ';\n                logWithLimit('Final Transcript So Far: ' + finalTranscript);\n            } else {\n                interimTranscript += result[0].transcript;\n            }\n        }\n\n        // Prevent duplicate logging of similar interim transcripts\n        if (interimTranscript.length > INTERIM_THRESHOLD && interimTranscript !== lastLoggedInterimTranscript) {\n            if (!finalTranscript.includes(interimTranscript.trim())) {\n                lastLoggedInterimTranscript = interimTranscript;\n                logWithLimit('Interim Transcript: ' + interimTranscript);\n            }\n        }\n    };\n\n    recognition.onerror = (event) => {\n        logWithLimit('Recognition error: ' + event.error);\n        restartRecognition();\n    };\n\n    recognition.onend = () => {\n        logWithLimit('Recognition ended.');\n        if (isRecognitionRunning && !isRestarting) {\n            restartRecognition();\n        }\n    };\n\n    isRecognitionInitialized = true;\n    logWithLimit('Recognition initialized.');\n}\n\n// Start SpeechRecognition if initialized\nfunction startRecognition() {\n    if (!isRecognitionInitialized) {\n        logWithLimit('Cannot start recognition; initialization is not complete.');\n        return;\n    }\n\n    if (!isRecognitionRunning) {\n        logWithLimit('Starting recognition...');\n        isRecognitionRunning = true;\n        recognition.start();\n    }\n}\n\n// Restart recognition if necessary\nfunction restartRecognition() {\n    if (isRecognitionRunning && recognition) {\n        logWithLimit('Stopping recognition before restarting...');\n        recognition.stop();\n    }\n\n    isRestarting = true;\n    setTimeout(() => {\n        if (isRestarting && isRecognitionInitialized) {\n            logWithLimit('Restarting recognition...');\n            startRecognition();\n            isRestarting = false;\n        }\n    }, 1000);\n}\n\n// Stop recognition\nexport function stopRecognition() {\n    if (isRecognitionRunning) {\n        logWithLimit('Stopping recognition...');\n        recognition.stop();\n        isRecognitionRunning = false;\n        isRestarting = false;\n    }\n}\n\n// Ensure recognition is initialized only when starting the process manually\nexport async function startSpeechRecognition() {\n    const permissionGranted = await requestMicPermission();  \n    if (!permissionGranted) return;\n\n    if (!isRecognitionInitialized) {\n        initializeRecognition();\n    }\n\n    startRecognition();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}