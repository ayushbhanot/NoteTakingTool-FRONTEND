{"ast":null,"code":"let recognition;export let finalTranscript='';// This will hold the full transcript\nlet interimTranscript='';// This will hold the interim transcript during a session\nlet isRecognitionRunning=false;let shouldRestart=true;// New flag to control whether to restart\nlet inactivityTimeout;// For tracking inactivity timeout\nconst INACTIVITY_THRESHOLD=30000;// 30 seconds of inactivity before restarting\nconst RESTART_DELAY=550;// 2-second delay before restarting\nconst CHARACTER_THRESHOLD=300;// Threshold for interim transcript size\nexport function initializeRecognition(){window.SpeechRecognition=window.SpeechRecognition||window.webkitSpeechRecognition;if(!window.SpeechRecognition){alert('Browser does not support SpeechRecognition API.');console.log('SpeechRecognition API not supported');return;}recognition=new window.SpeechRecognition();recognition.continuous=true;// Keep recognition continuous\nrecognition.interimResults=true;recognition.lang='en-US';recognition.onresult=event=>{clearTimeout(inactivityTimeout);// Clear any existing inactivity timeout\nlet interim='';for(let i=event.resultIndex;i<event.results.length;i++){const transcript=event.results[i][0].transcript;if(event.results[i].isFinal){finalTranscript+=transcript+' ';// Append final transcript\ninterimTranscript='';// Clear interim transcript\nconsole.log('Final Transcript (updated):',finalTranscript);}else{interim=transcript;// Store interim results without appending multiple times\n}}interimTranscript=interim;console.log('Interim Transcript (updated):',interimTranscript);};recognition.onspeechend=()=>{console.log('Speech ended. Waiting to see if the user continues...');inactivityTimeout=setTimeout(()=>{if(isRecognitionRunning&&shouldRestart){console.log('No further speech detected. Restarting recognition...');restartRecognition();}},5000);// 5 seconds of inactivity before restarting\n};recognition.onerror=event=>{console.log('Recognition error:',event.error);if(event.error==='no-speech'){console.log('No speech detected.');}else if(event.error==='aborted'){console.log('Recognition aborted unexpectedly. Restarting...');restartRecognition();// Restart automatically on aborted\n}else{console.log('Other error:',event.error);restartRecognition();}};recognition.onend=()=>{console.log('Recognition ended.');if(interimTranscript.trim()!==''){finalTranscript+=interimTranscript.trim()+' ';interimTranscript='';console.log('Appended final Interim Transcript:',finalTranscript);}if(isRecognitionRunning&&shouldRestart){console.log('Recognition stopped unexpectedly. Restarting...');restartRecognition();}else{console.log('No restart needed.');}};console.log('Speech recognition initialized.');}// Start Speech Recognition\nexport function startRecognition(){if(!isRecognitionRunning){console.log('Starting recognition...');try{recognition.start();isRecognitionRunning=true;}catch(error){console.log('Recognition start failed:',error);// Retry after a short delay if start fails\nsetTimeout(startRecognition,1000);}}else{console.log('Recognition already running.');}}export async function startSpeechRecognition(){const permissionGranted=await requestMicPermission();if(!permissionGranted)return;if(!recognition){initializeRecognition();}startRecognition();}// Stop Speech Recognition\nexport function stopRecognition(){if(isRecognitionRunning){console.log('Stopping recognition...');// Append any remaining interim transcript to the final transcript\nif(interimTranscript.trim()!==''){finalTranscript+=interimTranscript.trim()+' ';interimTranscript='';// Clear interim transcript\nconsole.log('Appended final Interim Transcript:',finalTranscript);}shouldRestart=false;// Prevent unwanted restarts\nrecognition.stop();clearTimeout(inactivityTimeout);isRecognitionRunning=false;}}let cooldownActive=false;// New flag to prevent immediate restarts\nfunction restartRecognition(){if(!shouldRestart||cooldownActive)return;// Prevent restarts if manually stopped or cooldown active\ncooldownActive=true;// Activate cooldown\nconsole.log('Stopping recognition before restarting...');recognition.stop();isRecognitionRunning=false;setTimeout(()=>{console.log('Restarting recognition...');startRecognition();cooldownActive=false;// Release cooldown after restart\n},500);// 500ms restart delay\n}export function resetTranscript(){finalTranscript='';// Reset the final transcript manually when called\nconsole.log('Transcript has been reset.');}// Request microphone permission\nexport async function requestMicPermission(){try{const stream=await navigator.mediaDevices.getUserMedia({audio:true});stream.getTracks().forEach(track=>track.stop());console.log('Microphone permission granted');return true;}catch(error){alert('Microphone access is required.');console.log('Microphone permission denied');return false;}}// Export the final transcript for use elsewhere\nexport const getFinalTranscript=()=>finalTranscript;","map":{"version":3,"names":["recognition","finalTranscript","interimTranscript","isRecognitionRunning","shouldRestart","inactivityTimeout","INACTIVITY_THRESHOLD","RESTART_DELAY","CHARACTER_THRESHOLD","initializeRecognition","window","SpeechRecognition","webkitSpeechRecognition","alert","console","log","continuous","interimResults","lang","onresult","event","clearTimeout","interim","i","resultIndex","results","length","transcript","isFinal","onspeechend","setTimeout","restartRecognition","onerror","error","onend","trim","startRecognition","start","startSpeechRecognition","permissionGranted","requestMicPermission","stopRecognition","stop","cooldownActive","resetTranscript","stream","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","track","getFinalTranscript"],"sources":["/Users/ayushbhanot/Documents/Coding/SideProjects/SideProject-AITranscriptionApp/sideproj-aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["let recognition;\nexport let finalTranscript = ''; // This will hold the full transcript\nlet interimTranscript = ''; // This will hold the interim transcript during a session\nlet isRecognitionRunning = false;\nlet shouldRestart = true;  // New flag to control whether to restart\nlet inactivityTimeout; // For tracking inactivity timeout\nconst INACTIVITY_THRESHOLD = 30000; // 30 seconds of inactivity before restarting\nconst RESTART_DELAY = 550;  // 2-second delay before restarting\nconst CHARACTER_THRESHOLD = 300; // Threshold for interim transcript size\n\nexport function initializeRecognition() {\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!window.SpeechRecognition) {\n        alert('Browser does not support SpeechRecognition API.');\n        console.log('SpeechRecognition API not supported');\n        return;\n    }\n\n    recognition = new window.SpeechRecognition();\n    recognition.continuous = true;  // Keep recognition continuous\n    recognition.interimResults = true;\n    recognition.lang = 'en-US';\n\n    recognition.onresult = (event) => {\n        clearTimeout(inactivityTimeout);  // Clear any existing inactivity timeout\n        let interim = '';\n    \n        for (let i = event.resultIndex; i < event.results.length; i++) {\n            const transcript = event.results[i][0].transcript;\n    \n            if (event.results[i].isFinal) {\n                finalTranscript += transcript + ' ';  // Append final transcript\n                interimTranscript = '';  // Clear interim transcript\n                console.log('Final Transcript (updated):', finalTranscript);\n            } else {\n                interim = transcript;  // Store interim results without appending multiple times\n            }\n        }\n    \n        interimTranscript = interim;\n        console.log('Interim Transcript (updated):', interimTranscript);\n    };\n    \n    \n    recognition.onspeechend = () => {\n        console.log('Speech ended. Waiting to see if the user continues...');\n        inactivityTimeout = setTimeout(() => {\n            if (isRecognitionRunning && shouldRestart) {\n                console.log('No further speech detected. Restarting recognition...');\n                restartRecognition();\n            }\n        }, 5000);  // 5 seconds of inactivity before restarting\n    };\n    \n    \n    recognition.onerror = (event) => {\n        console.log('Recognition error:', event.error);\n    \n        if (event.error === 'no-speech') {\n            console.log('No speech detected.');\n        } else if (event.error === 'aborted') {\n            console.log('Recognition aborted unexpectedly. Restarting...');\n            restartRecognition();  // Restart automatically on aborted\n        } else {\n            console.log('Other error:', event.error);\n            restartRecognition();\n        }\n    };\n    \n    \n    \n    recognition.onend = () => {\n        console.log('Recognition ended.');\n        if (interimTranscript.trim() !== '') {\n            finalTranscript += interimTranscript.trim() + ' ';\n            interimTranscript = '';\n            console.log('Appended final Interim Transcript:', finalTranscript);\n        }\n    \n        if (isRecognitionRunning && shouldRestart) {\n            console.log('Recognition stopped unexpectedly. Restarting...');\n            restartRecognition();\n        } else {\n            console.log('No restart needed.');\n        }\n    };\n    \n    \n\n    console.log('Speech recognition initialized.');\n}\n\n\n// Start Speech Recognition\nexport function startRecognition() {\n    if (!isRecognitionRunning) {\n        console.log('Starting recognition...');\n        try {\n            recognition.start();\n            isRecognitionRunning = true;\n        } catch (error) {\n            console.log('Recognition start failed:', error);\n            // Retry after a short delay if start fails\n            setTimeout(startRecognition, 1000);\n        }\n    } else {\n        console.log('Recognition already running.');\n    }\n}\n\nexport async function startSpeechRecognition() {\n    const permissionGranted = await requestMicPermission();\n    if (!permissionGranted) return;\n\n    if (!recognition) {\n        initializeRecognition();\n    }\n    startRecognition();\n}\n\n\n// Stop Speech Recognition\nexport function stopRecognition() {\n    if (isRecognitionRunning) {\n        console.log('Stopping recognition...');\n\n        // Append any remaining interim transcript to the final transcript\n        if (interimTranscript.trim() !== '') {\n            finalTranscript += interimTranscript.trim() + ' ';\n            interimTranscript = '';  // Clear interim transcript\n            console.log('Appended final Interim Transcript:', finalTranscript);\n        }\n\n        shouldRestart = false;  // Prevent unwanted restarts\n        recognition.stop();\n        clearTimeout(inactivityTimeout);\n        isRecognitionRunning = false;\n    }\n}\n\n\nlet cooldownActive = false;  // New flag to prevent immediate restarts\n\nfunction restartRecognition() {\n    if (!shouldRestart || cooldownActive) return;  // Prevent restarts if manually stopped or cooldown active\n    \n    cooldownActive = true;  // Activate cooldown\n    console.log('Stopping recognition before restarting...');\n    recognition.stop();\n    isRecognitionRunning = false;\n\n    setTimeout(() => {\n        console.log('Restarting recognition...');\n        startRecognition();\n        cooldownActive = false;  // Release cooldown after restart\n    }, 500);  // 500ms restart delay\n}\n\n\n\nexport function resetTranscript() {\n    finalTranscript = '';  // Reset the final transcript manually when called\n    console.log('Transcript has been reset.');\n}\n\n\n// Request microphone permission\nexport async function requestMicPermission() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        stream.getTracks().forEach(track => track.stop());\n        console.log('Microphone permission granted');\n        return true;\n    } catch (error) {\n        alert('Microphone access is required.');\n        console.log('Microphone permission denied');\n        return false;\n    }\n}\n\n// Export the final transcript for use elsewhere\nexport const getFinalTranscript = () => finalTranscript;\n"],"mappings":"AAAA,GAAI,CAAAA,WAAW,CACf,MAAO,IAAI,CAAAC,eAAe,CAAG,EAAE,CAAE;AACjC,GAAI,CAAAC,iBAAiB,CAAG,EAAE,CAAE;AAC5B,GAAI,CAAAC,oBAAoB,CAAG,KAAK,CAChC,GAAI,CAAAC,aAAa,CAAG,IAAI,CAAG;AAC3B,GAAI,CAAAC,iBAAiB,CAAE;AACvB,KAAM,CAAAC,oBAAoB,CAAG,KAAK,CAAE;AACpC,KAAM,CAAAC,aAAa,CAAG,GAAG,CAAG;AAC5B,KAAM,CAAAC,mBAAmB,CAAG,GAAG,CAAE;AAEjC,MAAO,SAAS,CAAAC,qBAAqBA,CAAA,CAAG,CACpCC,MAAM,CAACC,iBAAiB,CAAGD,MAAM,CAACC,iBAAiB,EAAID,MAAM,CAACE,uBAAuB,CACrF,GAAI,CAACF,MAAM,CAACC,iBAAiB,CAAE,CAC3BE,KAAK,CAAC,iDAAiD,CAAC,CACxDC,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC,CAClD,OACJ,CAEAf,WAAW,CAAG,GAAI,CAAAU,MAAM,CAACC,iBAAiB,CAAC,CAAC,CAC5CX,WAAW,CAACgB,UAAU,CAAG,IAAI,CAAG;AAChChB,WAAW,CAACiB,cAAc,CAAG,IAAI,CACjCjB,WAAW,CAACkB,IAAI,CAAG,OAAO,CAE1BlB,WAAW,CAACmB,QAAQ,CAAIC,KAAK,EAAK,CAC9BC,YAAY,CAAChB,iBAAiB,CAAC,CAAG;AAClC,GAAI,CAAAiB,OAAO,CAAG,EAAE,CAEhB,IAAK,GAAI,CAAAC,CAAC,CAAGH,KAAK,CAACI,WAAW,CAAED,CAAC,CAAGH,KAAK,CAACK,OAAO,CAACC,MAAM,CAAEH,CAAC,EAAE,CAAE,CAC3D,KAAM,CAAAI,UAAU,CAAGP,KAAK,CAACK,OAAO,CAACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAACI,UAAU,CAEjD,GAAIP,KAAK,CAACK,OAAO,CAACF,CAAC,CAAC,CAACK,OAAO,CAAE,CAC1B3B,eAAe,EAAI0B,UAAU,CAAG,GAAG,CAAG;AACtCzB,iBAAiB,CAAG,EAAE,CAAG;AACzBY,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAEd,eAAe,CAAC,CAC/D,CAAC,IAAM,CACHqB,OAAO,CAAGK,UAAU,CAAG;AAC3B,CACJ,CAEAzB,iBAAiB,CAAGoB,OAAO,CAC3BR,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAEb,iBAAiB,CAAC,CACnE,CAAC,CAGDF,WAAW,CAAC6B,WAAW,CAAG,IAAM,CAC5Bf,OAAO,CAACC,GAAG,CAAC,uDAAuD,CAAC,CACpEV,iBAAiB,CAAGyB,UAAU,CAAC,IAAM,CACjC,GAAI3B,oBAAoB,EAAIC,aAAa,CAAE,CACvCU,OAAO,CAACC,GAAG,CAAC,uDAAuD,CAAC,CACpEgB,kBAAkB,CAAC,CAAC,CACxB,CACJ,CAAC,CAAE,IAAI,CAAC,CAAG;AACf,CAAC,CAGD/B,WAAW,CAACgC,OAAO,CAAIZ,KAAK,EAAK,CAC7BN,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAEK,KAAK,CAACa,KAAK,CAAC,CAE9C,GAAIb,KAAK,CAACa,KAAK,GAAK,WAAW,CAAE,CAC7BnB,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC,CACtC,CAAC,IAAM,IAAIK,KAAK,CAACa,KAAK,GAAK,SAAS,CAAE,CAClCnB,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC,CAC9DgB,kBAAkB,CAAC,CAAC,CAAG;AAC3B,CAAC,IAAM,CACHjB,OAAO,CAACC,GAAG,CAAC,cAAc,CAAEK,KAAK,CAACa,KAAK,CAAC,CACxCF,kBAAkB,CAAC,CAAC,CACxB,CACJ,CAAC,CAID/B,WAAW,CAACkC,KAAK,CAAG,IAAM,CACtBpB,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC,CACjC,GAAIb,iBAAiB,CAACiC,IAAI,CAAC,CAAC,GAAK,EAAE,CAAE,CACjClC,eAAe,EAAIC,iBAAiB,CAACiC,IAAI,CAAC,CAAC,CAAG,GAAG,CACjDjC,iBAAiB,CAAG,EAAE,CACtBY,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAEd,eAAe,CAAC,CACtE,CAEA,GAAIE,oBAAoB,EAAIC,aAAa,CAAE,CACvCU,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC,CAC9DgB,kBAAkB,CAAC,CAAC,CACxB,CAAC,IAAM,CACHjB,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC,CACrC,CACJ,CAAC,CAIDD,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC,CAClD,CAGA;AACA,MAAO,SAAS,CAAAqB,gBAAgBA,CAAA,CAAG,CAC/B,GAAI,CAACjC,oBAAoB,CAAE,CACvBW,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC,CACtC,GAAI,CACAf,WAAW,CAACqC,KAAK,CAAC,CAAC,CACnBlC,oBAAoB,CAAG,IAAI,CAC/B,CAAE,MAAO8B,KAAK,CAAE,CACZnB,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAEkB,KAAK,CAAC,CAC/C;AACAH,UAAU,CAACM,gBAAgB,CAAE,IAAI,CAAC,CACtC,CACJ,CAAC,IAAM,CACHtB,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC,CAC/C,CACJ,CAEA,MAAO,eAAe,CAAAuB,sBAAsBA,CAAA,CAAG,CAC3C,KAAM,CAAAC,iBAAiB,CAAG,KAAM,CAAAC,oBAAoB,CAAC,CAAC,CACtD,GAAI,CAACD,iBAAiB,CAAE,OAExB,GAAI,CAACvC,WAAW,CAAE,CACdS,qBAAqB,CAAC,CAAC,CAC3B,CACA2B,gBAAgB,CAAC,CAAC,CACtB,CAGA;AACA,MAAO,SAAS,CAAAK,eAAeA,CAAA,CAAG,CAC9B,GAAItC,oBAAoB,CAAE,CACtBW,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC,CAEtC;AACA,GAAIb,iBAAiB,CAACiC,IAAI,CAAC,CAAC,GAAK,EAAE,CAAE,CACjClC,eAAe,EAAIC,iBAAiB,CAACiC,IAAI,CAAC,CAAC,CAAG,GAAG,CACjDjC,iBAAiB,CAAG,EAAE,CAAG;AACzBY,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAEd,eAAe,CAAC,CACtE,CAEAG,aAAa,CAAG,KAAK,CAAG;AACxBJ,WAAW,CAAC0C,IAAI,CAAC,CAAC,CAClBrB,YAAY,CAAChB,iBAAiB,CAAC,CAC/BF,oBAAoB,CAAG,KAAK,CAChC,CACJ,CAGA,GAAI,CAAAwC,cAAc,CAAG,KAAK,CAAG;AAE7B,QAAS,CAAAZ,kBAAkBA,CAAA,CAAG,CAC1B,GAAI,CAAC3B,aAAa,EAAIuC,cAAc,CAAE,OAAS;AAE/CA,cAAc,CAAG,IAAI,CAAG;AACxB7B,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC,CACxDf,WAAW,CAAC0C,IAAI,CAAC,CAAC,CAClBvC,oBAAoB,CAAG,KAAK,CAE5B2B,UAAU,CAAC,IAAM,CACbhB,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC,CACxCqB,gBAAgB,CAAC,CAAC,CAClBO,cAAc,CAAG,KAAK,CAAG;AAC7B,CAAC,CAAE,GAAG,CAAC,CAAG;AACd,CAIA,MAAO,SAAS,CAAAC,eAAeA,CAAA,CAAG,CAC9B3C,eAAe,CAAG,EAAE,CAAG;AACvBa,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC,CAC7C,CAGA;AACA,MAAO,eAAe,CAAAyB,oBAAoBA,CAAA,CAAG,CACzC,GAAI,CACA,KAAM,CAAAK,MAAM,CAAG,KAAM,CAAAC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC,CAAEC,KAAK,CAAE,IAAK,CAAC,CAAC,CACzEJ,MAAM,CAACK,SAAS,CAAC,CAAC,CAACC,OAAO,CAACC,KAAK,EAAIA,KAAK,CAACV,IAAI,CAAC,CAAC,CAAC,CACjD5B,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC,CAC5C,MAAO,KAAI,CACf,CAAE,MAAOkB,KAAK,CAAE,CACZpB,KAAK,CAAC,gCAAgC,CAAC,CACvCC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC,CAC3C,MAAO,MAAK,CAChB,CACJ,CAEA;AACA,MAAO,MAAM,CAAAsC,kBAAkB,CAAGA,CAAA,GAAMpD,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}