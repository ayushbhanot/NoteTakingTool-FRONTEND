{"ast":null,"code":"let isRecognitionRunning = false;\nlet isRestarting = false;\nlet finalTranscript = '';\nlet recognition;\nlet isRecognitionInitialized = false;\nlet restartCooldownActive = false; // Cooldown flag\nconst COOLDOWN_DURATION = 8000; // Cooldown period between restarts (5 seconds)\nconst INTERIM_THRESHOLD = 40;\nlet lastLoggedInterimTranscript = '';\nlet lastRecognitionTime = Date.now();\nlet logCount = 0;\n\n// Function to log messages with a limit\nfunction logWithLimit(message) {\n  const timestamp = new Date().toISOString();\n  logCount++;\n  if (logCount % 50 === 0) {\n    console.clear();\n  }\n  console.log(`[${timestamp}] ${message}`);\n}\n\n// Function to request microphone permission\nasync function requestMicPermission() {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    stream.getTracks().forEach(track => track.stop()); // Stop the stream after permission is granted\n    return true;\n  } catch (error) {\n    alert('Microphone access is required for speech recognition.');\n    return false;\n  }\n}\n\n// Initialize SpeechRecognition\nfunction initializeRecognition() {\n  window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  if (!window.SpeechRecognition) {\n    alert('Your browser does not support the SpeechRecognition API.');\n    return;\n  }\n  recognition = new window.SpeechRecognition();\n  recognition.continuous = true;\n  recognition.interimResults = true;\n  recognition.lang = 'en-US';\n  recognition.onresult = event => {\n    let interimTranscript = '';\n    lastRecognitionTime = Date.now();\n    for (let i = event.resultIndex; i < event.results.length; i++) {\n      const result = event.results[i];\n      if (result.isFinal) {\n        finalTranscript += result[0].transcript + ' ';\n        logWithLimit('Final Transcript So Far: ' + finalTranscript);\n      } else {\n        interimTranscript += result[0].transcript;\n      }\n    }\n    if (interimTranscript.length > INTERIM_THRESHOLD && interimTranscript !== lastLoggedInterimTranscript) {\n      lastLoggedInterimTranscript = interimTranscript;\n      logWithLimit('Interim Transcript: ' + interimTranscript);\n      logWithLimit('Interim transcript exceeded threshold, restarting recognition...');\n      restartRecognition();\n    }\n  };\n  recognition.onerror = event => {\n    logWithLimit('Recognition error: ' + event.error);\n    if (event.error === 'aborted') {\n      logWithLimit('Recognition aborted, restarting...');\n      restartRecognition();\n    }\n  };\n  recognition.onend = () => {\n    logWithLimit('Recognition ended.');\n    if (isRecognitionRunning && !isRestarting) {\n      restartRecognition();\n    }\n  };\n  isRecognitionInitialized = true;\n  logWithLimit('Recognition initialized.');\n}\n\n// Start SpeechRecognition\nfunction startRecognition() {\n  if (!isRecognitionInitialized) {\n    logWithLimit('Cannot start recognition; initialization is not complete.');\n    return;\n  }\n  if (!isRecognitionRunning) {\n    logWithLimit('Starting recognition...');\n    try {\n      recognition.start();\n      isRecognitionRunning = true;\n    } catch (error) {\n      logWithLimit('Error starting recognition: ' + error.message);\n      isRecognitionRunning = false;\n    }\n  } else {\n    logWithLimit('Recognition already running, no need to start again.');\n  }\n}\n\n// Restart recognition with cooldown management\nfunction restartRecognition() {\n  if (isRestarting || restartCooldownActive) {\n    logWithLimit('Restart already in progress or cooldown active, skipping restart.');\n    return;\n  }\n  isRestarting = true;\n  logWithLimit('Stopping recognition before restarting...');\n  if (isRecognitionRunning) {\n    recognition.stop();\n    isRecognitionRunning = false;\n  }\n\n  // Add a cooldown delay before restarting\n  restartCooldownActive = true;\n  setTimeout(() => {\n    if (isRecognitionInitialized) {\n      logWithLimit('Reinitializing recognition object for restart...');\n      initializeRecognition(); // Reinitialize recognition object\n      startRecognition(); // Start the recognition process\n      isRestarting = false;\n      logWithLimit('Recognition successfully restarted.');\n    }\n    restartCooldownActive = false; // Cooldown ended\n  }, COOLDOWN_DURATION); // Delay to ensure stop completes before reinitializing\n}\n\n// Stop recognition\nexport function stopRecognition() {\n  if (isRecognitionRunning) {\n    logWithLimit('Stopping recognition...');\n    recognition.stop();\n    isRecognitionRunning = false;\n    isRestarting = false;\n  }\n}\n\n// Start speech recognition\nexport async function startSpeechRecognition() {\n  const permissionGranted = await requestMicPermission();\n  if (!permissionGranted) return;\n  if (!isRecognitionInitialized) {\n    initializeRecognition();\n  }\n  startRecognition();\n}","map":{"version":3,"names":["isRecognitionRunning","isRestarting","finalTranscript","recognition","isRecognitionInitialized","restartCooldownActive","COOLDOWN_DURATION","INTERIM_THRESHOLD","lastLoggedInterimTranscript","lastRecognitionTime","Date","now","logCount","logWithLimit","message","timestamp","toISOString","console","clear","log","requestMicPermission","stream","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","track","stop","error","alert","initializeRecognition","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","interimTranscript","i","resultIndex","results","length","result","isFinal","transcript","restartRecognition","onerror","onend","startRecognition","start","setTimeout","stopRecognition","startSpeechRecognition","permissionGranted"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["let isRecognitionRunning = false;\nlet isRestarting = false;\nlet finalTranscript = '';\nlet recognition;\nlet isRecognitionInitialized = false;\nlet restartCooldownActive = false;  // Cooldown flag\nconst COOLDOWN_DURATION = 8000;  // Cooldown period between restarts (5 seconds)\nconst INTERIM_THRESHOLD = 40;\nlet lastLoggedInterimTranscript = '';\nlet lastRecognitionTime = Date.now();\nlet logCount = 0;\n\n// Function to log messages with a limit\nfunction logWithLimit(message) {\n    const timestamp = new Date().toISOString();\n    logCount++;\n    if (logCount % 50 === 0) {\n        console.clear();\n    }\n    console.log(`[${timestamp}] ${message}`);\n}\n\n// Function to request microphone permission\nasync function requestMicPermission() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        stream.getTracks().forEach(track => track.stop());  // Stop the stream after permission is granted\n        return true;\n    } catch (error) {\n        alert('Microphone access is required for speech recognition.');\n        return false;\n    }\n}\n\n// Initialize SpeechRecognition\nfunction initializeRecognition() {\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n\n    if (!window.SpeechRecognition) {\n        alert('Your browser does not support the SpeechRecognition API.');\n        return;\n    }\n\n    recognition = new window.SpeechRecognition();\n    recognition.continuous = true;\n    recognition.interimResults = true;\n    recognition.lang = 'en-US';\n\n    recognition.onresult = (event) => {\n        let interimTranscript = '';\n        lastRecognitionTime = Date.now();\n\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n            const result = event.results[i];\n            if (result.isFinal) {\n                finalTranscript += result[0].transcript + ' ';\n                logWithLimit('Final Transcript So Far: ' + finalTranscript);\n            } else {\n                interimTranscript += result[0].transcript;\n            }\n        }\n\n        if (interimTranscript.length > INTERIM_THRESHOLD && interimTranscript !== lastLoggedInterimTranscript) {\n            lastLoggedInterimTranscript = interimTranscript;\n            logWithLimit('Interim Transcript: ' + interimTranscript);\n            logWithLimit('Interim transcript exceeded threshold, restarting recognition...');\n            restartRecognition();\n        }\n    };\n\n    recognition.onerror = (event) => {\n        logWithLimit('Recognition error: ' + event.error);\n        if (event.error === 'aborted') {\n            logWithLimit('Recognition aborted, restarting...');\n            restartRecognition();\n        }\n    };\n\n    recognition.onend = () => {\n        logWithLimit('Recognition ended.');\n        if (isRecognitionRunning && !isRestarting) {\n            restartRecognition();\n        }\n    };\n\n    isRecognitionInitialized = true;\n    logWithLimit('Recognition initialized.');\n}\n\n// Start SpeechRecognition\nfunction startRecognition() {\n    if (!isRecognitionInitialized) {\n        logWithLimit('Cannot start recognition; initialization is not complete.');\n        return;\n    }\n\n    if (!isRecognitionRunning) {\n        logWithLimit('Starting recognition...');\n        try {\n            recognition.start();\n            isRecognitionRunning = true;\n        } catch (error) {\n            logWithLimit('Error starting recognition: ' + error.message);\n            isRecognitionRunning = false;\n        }\n    } else {\n        logWithLimit('Recognition already running, no need to start again.');\n    }\n}\n\n// Restart recognition with cooldown management\nfunction restartRecognition() {\n    if (isRestarting || restartCooldownActive) {\n        logWithLimit('Restart already in progress or cooldown active, skipping restart.');\n        return;\n    }\n\n    isRestarting = true;\n    logWithLimit('Stopping recognition before restarting...');\n    \n    if (isRecognitionRunning) {\n        recognition.stop();\n        isRecognitionRunning = false;\n    }\n\n    // Add a cooldown delay before restarting\n    restartCooldownActive = true;\n    setTimeout(() => {\n        if (isRecognitionInitialized) {\n            logWithLimit('Reinitializing recognition object for restart...');\n            initializeRecognition();  // Reinitialize recognition object\n            startRecognition();       // Start the recognition process\n            isRestarting = false;\n            logWithLimit('Recognition successfully restarted.');\n        }\n        restartCooldownActive = false;  // Cooldown ended\n    }, COOLDOWN_DURATION);  // Delay to ensure stop completes before reinitializing\n}\n\n// Stop recognition\nexport function stopRecognition() {\n    if (isRecognitionRunning) {\n        logWithLimit('Stopping recognition...');\n        recognition.stop();\n        isRecognitionRunning = false;\n        isRestarting = false;\n    }\n}\n\n// Start speech recognition\nexport async function startSpeechRecognition() {\n    const permissionGranted = await requestMicPermission();\n    if (!permissionGranted) return;\n\n    if (!isRecognitionInitialized) {\n        initializeRecognition();\n    }\n\n    startRecognition();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}