{"ast":null,"code":"var _jsxFileName = \"/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport NotesUI from './components/NotesUI';\nimport { startSpeechRecognition, stopRecognition, finalTranscript } from './services/audioRecording';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [generatedNotes, setGeneratedNotes] = useState({});\n  const handleStartRecording = async () => {\n    if (isRecording) return;\n    setIsRecording(true);\n    try {\n      await startSpeechRecognition();\n    } catch (error) {\n      console.error(\"Error starting speech recognition:\", error);\n      setIsRecording(false);\n    }\n  };\n  const handleStopRecording = async () => {\n    try {\n      console.log(\"Stopping recognition...\");\n      stopRecognition(); // Call stopRecognition\n\n      if (!finalTranscript || finalTranscript.trim() === '') {\n        console.log(\"Final transcript is empty.\");\n        return;\n      }\n      console.log(\"Sending final transcript to server:\", finalTranscript);\n\n      // Send the transcript to the backend\n      const response = await axios.post('http://localhost:3001/transcribe', {\n        transcript: finalTranscript\n      });\n      const notes = response.data.notes;\n      console.log(\"Received notes:\", notes);\n      setGeneratedNotes(notes);\n    } catch (error) {\n      console.error(\"Error stopping speech recognition or sending transcript:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Speech to Notes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStartRecording,\n      disabled: isRecording,\n      children: \"Start Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStopRecording,\n      disabled: !isRecording,\n      children: \"Stop Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NotesUI, {\n      notes: generatedNotes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"5yUDuHDwj7Hxx7ZUoQi0+Ir7hh4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","NotesUI","startSpeechRecognition","stopRecognition","finalTranscript","jsxDEV","_jsxDEV","App","_s","isRecording","setIsRecording","generatedNotes","setGeneratedNotes","handleStartRecording","error","console","handleStopRecording","log","trim","response","post","transcript","notes","data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport NotesUI from './components/NotesUI';\nimport { startSpeechRecognition, stopRecognition, finalTranscript } from './services/audioRecording';\n\nfunction App() {\n    const [isRecording, setIsRecording] = useState(false);\n    const [generatedNotes, setGeneratedNotes] = useState({});\n\n    const handleStartRecording = async () => {\n        if (isRecording) return;\n        setIsRecording(true);\n        try {\n            await startSpeechRecognition();\n        } catch (error) {\n            console.error(\"Error starting speech recognition:\", error);\n            setIsRecording(false);\n        }\n    };\n\n    const handleStopRecording = async () => {\n        try {\n            console.log(\"Stopping recognition...\");\n            stopRecognition(); // Call stopRecognition\n    \n            if (!finalTranscript || finalTranscript.trim() === '') {\n                console.log(\"Final transcript is empty.\");\n                return;\n            }\n    \n            console.log(\"Sending final transcript to server:\", finalTranscript);\n    \n            // Send the transcript to the backend\n            const response = await axios.post('http://localhost:3001/transcribe', { transcript: finalTranscript });\n            const notes = response.data.notes;\n    \n            console.log(\"Received notes:\", notes);\n            setGeneratedNotes(notes);\n        } catch (error) {\n            console.error(\"Error stopping speech recognition or sending transcript:\", error);\n        }\n    };\n    \n\n    return (\n        <div className=\"App\">\n            <h1>Speech to Notes</h1>\n            <button onClick={handleStartRecording} disabled={isRecording}>\n                Start Recording\n            </button>\n            <button onClick={handleStopRecording} disabled={!isRecording}>\n                Stop Recording\n            </button>\n            <NotesUI notes={generatedNotes} /> {/* Pass generated notes to your NotesUI */}\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,SAASC,sBAAsB,EAAEC,eAAe,EAAEC,eAAe,QAAQ,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErG,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACY,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC,CAAC;EAExD,MAAMc,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAIJ,WAAW,EAAE;IACjBC,cAAc,CAAC,IAAI,CAAC;IACpB,IAAI;MACA,MAAMR,sBAAsB,CAAC,CAAC;IAClC,CAAC,CAAC,OAAOY,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC1DJ,cAAc,CAAC,KAAK,CAAC;IACzB;EACJ,CAAC;EAED,MAAMM,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACAD,OAAO,CAACE,GAAG,CAAC,yBAAyB,CAAC;MACtCd,eAAe,CAAC,CAAC,CAAC,CAAC;;MAEnB,IAAI,CAACC,eAAe,IAAIA,eAAe,CAACc,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QACnDH,OAAO,CAACE,GAAG,CAAC,4BAA4B,CAAC;QACzC;MACJ;MAEAF,OAAO,CAACE,GAAG,CAAC,qCAAqC,EAAEb,eAAe,CAAC;;MAEnE;MACA,MAAMe,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,IAAI,CAAC,kCAAkC,EAAE;QAAEC,UAAU,EAAEjB;MAAgB,CAAC,CAAC;MACtG,MAAMkB,KAAK,GAAGH,QAAQ,CAACI,IAAI,CAACD,KAAK;MAEjCP,OAAO,CAACE,GAAG,CAAC,iBAAiB,EAAEK,KAAK,CAAC;MACrCV,iBAAiB,CAACU,KAAK,CAAC;IAC5B,CAAC,CAAC,OAAOR,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,0DAA0D,EAAEA,KAAK,CAAC;IACpF;EACJ,CAAC;EAGD,oBACIR,OAAA;IAAKkB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAChBnB,OAAA;MAAAmB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxBvB,OAAA;MAAQwB,OAAO,EAAEjB,oBAAqB;MAACkB,QAAQ,EAAEtB,WAAY;MAAAgB,QAAA,EAAC;IAE9D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACTvB,OAAA;MAAQwB,OAAO,EAAEd,mBAAoB;MAACe,QAAQ,EAAE,CAACtB,WAAY;MAAAgB,QAAA,EAAC;IAE9D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACTvB,OAAA,CAACL,OAAO;MAACqB,KAAK,EAAEX;IAAe;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,KAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClC,CAAC;AAEd;AAACrB,EAAA,CAnDQD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAqDZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}