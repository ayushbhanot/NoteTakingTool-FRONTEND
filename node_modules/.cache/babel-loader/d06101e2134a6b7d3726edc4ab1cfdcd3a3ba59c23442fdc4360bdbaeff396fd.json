{"ast":null,"code":"let recognition;\nexport let finalTranscript = ''; // Keep track of the final transcript\nlet isRecognitionRunning = false;\nlet inactivityTimeout; // Track inactivity timeout\n\nconst INACTIVITY_THRESHOLD = 10000; // 10 seconds of inactivity before restart\nconst RESTART_DELAY = 1000; // 1-second delay before restarting\n\n// Export finalTranscript so it can be used in App.js\nexport const getFinalTranscript = () => finalTranscript;\n\n// Request microphone permission\nasync function requestMicPermission() {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    stream.getTracks().forEach(track => track.stop());\n    console.log('Microphone permission granted');\n    return true;\n  } catch (error) {\n    alert('Microphone access is required.');\n    console.log('Microphone permission denied');\n    return false;\n  }\n}\n\n// Initialize SpeechRecognition API\nfunction initializeRecognition() {\n  window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  if (!window.SpeechRecognition) {\n    alert('Browser does not support SpeechRecognition API.');\n    console.log('SpeechRecognition API not supported');\n    return;\n  }\n  recognition = new window.SpeechRecognition();\n  recognition.continuous = true; // Continuous recognition\n  recognition.interimResults = true;\n  recognition.lang = 'en-US';\n  recognition.onresult = event => {\n    clearTimeout(inactivityTimeout); // Clear inactivity timeout on result\n    let interim = '';\n\n    // Iterate through the recognition results\n    for (let i = event.resultIndex; i < event.results.length; i++) {\n      const transcript = event.results[i][0].transcript;\n\n      // Only append to final transcript when the result is final\n      if (event.results[i].isFinal) {\n        finalTranscript += transcript + ' '; // Accumulate final transcript\n        console.log('Final Transcript (updated):', finalTranscript);\n      } else {\n        interim += transcript;\n      }\n    }\n\n    // Restart if no activity for the threshold duration\n    inactivityTimeout = setTimeout(() => {\n      console.log('No activity detected. Restarting recognition...');\n      restartRecognition();\n    }, INACTIVITY_THRESHOLD); // Waits 10 seconds before restarting due to inactivity\n  };\n  recognition.onerror = event => {\n    console.log('Recognition error:', event.error);\n    restartRecognition();\n  };\n  recognition.onend = () => {\n    console.log('Recognition ended.');\n    if (isRecognitionRunning) {\n      console.log('Recognition stopped unexpectedly. Restarting...');\n      restartRecognition(); // Restart when stopped unexpectedly\n    }\n  };\n  console.log('Speech recognition initialized.');\n}\n\n// Start Speech Recognition\nfunction startRecognition() {\n  if (!isRecognitionRunning) {\n    console.log('Starting recognition...');\n    try {\n      recognition.start();\n      isRecognitionRunning = true;\n    } catch (error) {\n      console.log('Recognition start failed:', error);\n    }\n  } else {\n    console.log('Recognition already running.');\n  }\n}\n\n// Restart Speech Recognition\nfunction restartRecognition() {\n  if (isRecognitionRunning) {\n    console.log('Stopping recognition before restarting...');\n    recognition.stop();\n    isRecognitionRunning = false;\n    setTimeout(() => {\n      console.log('Restarting recognition...');\n      startRecognition();\n    }, RESTART_DELAY);\n  }\n}\n\n// Stop Speech Recognition\nexport function stopRecognition() {\n  if (isRecognitionRunning) {\n    console.log('Stopping recognition...');\n    recognition.stop();\n    clearTimeout(inactivityTimeout); // Clear timeout when stopping\n    isRecognitionRunning = false;\n  }\n}\n\n// Start Speech Recognition after checking mic permissions\nexport async function startSpeechRecognition() {\n  finalTranscript = ''; // Reset transcript for a fresh session\n  const permissionGranted = await requestMicPermission();\n  if (!permissionGranted) return;\n  if (!recognition) initializeRecognition();\n  startRecognition();\n}","map":{"version":3,"names":["recognition","finalTranscript","isRecognitionRunning","inactivityTimeout","INACTIVITY_THRESHOLD","RESTART_DELAY","getFinalTranscript","requestMicPermission","stream","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","track","stop","console","log","error","alert","initializeRecognition","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","clearTimeout","interim","i","resultIndex","results","length","transcript","isFinal","setTimeout","restartRecognition","onerror","onend","startRecognition","start","stopRecognition","startSpeechRecognition","permissionGranted"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["let recognition;\nexport let finalTranscript = ''; // Keep track of the final transcript\nlet isRecognitionRunning = false;\nlet inactivityTimeout; // Track inactivity timeout\n\nconst INACTIVITY_THRESHOLD = 10000; // 10 seconds of inactivity before restart\nconst RESTART_DELAY = 1000;  // 1-second delay before restarting\n\n// Export finalTranscript so it can be used in App.js\nexport const getFinalTranscript = () => finalTranscript;\n\n// Request microphone permission\nasync function requestMicPermission() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        stream.getTracks().forEach(track => track.stop());\n        console.log('Microphone permission granted');\n        return true;\n    } catch (error) {\n        alert('Microphone access is required.');\n        console.log('Microphone permission denied');\n        return false;\n    }\n}\n\n// Initialize SpeechRecognition API\nfunction initializeRecognition() {\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!window.SpeechRecognition) {\n        alert('Browser does not support SpeechRecognition API.');\n        console.log('SpeechRecognition API not supported');\n        return;\n    }\n\n    recognition = new window.SpeechRecognition();\n    recognition.continuous = true; // Continuous recognition\n    recognition.interimResults = true;\n    recognition.lang = 'en-US';\n\n    recognition.onresult = (event) => {\n        clearTimeout(inactivityTimeout); // Clear inactivity timeout on result\n        let interim = '';\n\n        // Iterate through the recognition results\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n            const transcript = event.results[i][0].transcript;\n\n            // Only append to final transcript when the result is final\n            if (event.results[i].isFinal) {\n                finalTranscript += transcript + ' ';  // Accumulate final transcript\n                console.log('Final Transcript (updated):', finalTranscript);\n            } else {\n                interim += transcript;\n            }\n        }\n\n        // Restart if no activity for the threshold duration\n        inactivityTimeout = setTimeout(() => {\n            console.log('No activity detected. Restarting recognition...');\n            restartRecognition();\n        }, INACTIVITY_THRESHOLD);  // Waits 10 seconds before restarting due to inactivity\n    };\n\n    recognition.onerror = (event) => {\n        console.log('Recognition error:', event.error);\n        restartRecognition();\n    };\n\n    recognition.onend = () => {\n        console.log('Recognition ended.');\n        if (isRecognitionRunning) {\n            console.log('Recognition stopped unexpectedly. Restarting...');\n            restartRecognition(); // Restart when stopped unexpectedly\n        }\n    };\n\n    console.log('Speech recognition initialized.');\n}\n\n// Start Speech Recognition\nfunction startRecognition() {\n    if (!isRecognitionRunning) {\n        console.log('Starting recognition...');\n        try {\n            recognition.start();\n            isRecognitionRunning = true;\n        } catch (error) {\n            console.log('Recognition start failed:', error);\n        }\n    } else {\n        console.log('Recognition already running.');\n    }\n}\n\n// Restart Speech Recognition\nfunction restartRecognition() {\n    if (isRecognitionRunning) {\n        console.log('Stopping recognition before restarting...');\n        recognition.stop();\n        isRecognitionRunning = false;\n\n        setTimeout(() => {\n            console.log('Restarting recognition...');\n            startRecognition();\n        }, RESTART_DELAY);\n    }\n}\n\n// Stop Speech Recognition\nexport function stopRecognition() {\n    if (isRecognitionRunning) {\n        console.log('Stopping recognition...');\n        recognition.stop();\n        clearTimeout(inactivityTimeout); // Clear timeout when stopping\n        isRecognitionRunning = false;\n    }\n}\n\n// Start Speech Recognition after checking mic permissions\nexport async function startSpeechRecognition() {\n    finalTranscript = '';  // Reset transcript for a fresh session\n    const permissionGranted = await requestMicPermission();\n    if (!permissionGranted) return;\n\n    if (!recognition) initializeRecognition();\n    startRecognition();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}