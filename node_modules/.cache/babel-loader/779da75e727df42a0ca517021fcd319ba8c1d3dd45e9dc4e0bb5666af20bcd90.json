{"ast":null,"code":"var _jsxFileName = \"/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { startSpeechRecognition, stopRecognition } from './services/audioRecording'; // Adjust path as needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [finalTranscript, setFinalTranscript] = useState(''); // Transcript state\n\n  const handleStartRecording = async () => {\n    if (isRecording) return;\n    setIsRecording(true);\n    try {\n      await startSpeechRecognition(transcript => {\n        setFinalTranscript(transcript); // Update the transcript state\n      });\n    } catch (error) {\n      console.error(\"Error starting speech recognition:\", error);\n      setIsRecording(false);\n    }\n  };\n  const handleStopRecording = async () => {\n    if (!isRecording) return;\n    try {\n      await stopRecognition();\n      if (!finalTranscript) {\n        console.error(\"Final transcript is empty. No data to send.\");\n        return;\n      }\n      console.log(\"Sending final transcript to server:\", finalTranscript);\n      const response = await fetch('http://localhost:3001/transcribe', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          transcript: finalTranscript\n        }) // Send the transcript to the server\n      });\n      const data = await response.json();\n      console.log(\"Received notes:\", data.notes);\n    } catch (error) {\n      console.error(\"Error stopping speech recognition or sending transcript:\", error);\n    } finally {\n      setIsRecording(false); // Ensure recording stops after processing\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Speech to Notes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStartRecording,\n      disabled: isRecording,\n      children: \"Start Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStopRecording,\n      disabled: !isRecording,\n      children: \"Stop Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"8fhgtDjsc3TsAkEhLuzrJK0dXNA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","startSpeechRecognition","stopRecognition","jsxDEV","_jsxDEV","App","_s","isRecording","setIsRecording","finalTranscript","setFinalTranscript","handleStartRecording","transcript","error","console","handleStopRecording","log","response","fetch","method","headers","body","JSON","stringify","data","json","notes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { startSpeechRecognition, stopRecognition } from './services/audioRecording'; // Adjust path as needed\n\nfunction App() {\n    const [isRecording, setIsRecording] = useState(false);\n    const [finalTranscript, setFinalTranscript] = useState(''); // Transcript state\n\n    const handleStartRecording = async () => {\n        if (isRecording) return; \n        setIsRecording(true);\n        try {\n            await startSpeechRecognition((transcript) => {\n                setFinalTranscript(transcript); // Update the transcript state\n            });\n        } catch (error) {\n            console.error(\"Error starting speech recognition:\", error);\n            setIsRecording(false);\n        }\n    };\n\n    const handleStopRecording = async () => {\n        if (!isRecording) return; \n        try {\n            await stopRecognition();\n            if (!finalTranscript) {\n                console.error(\"Final transcript is empty. No data to send.\");\n                return;\n            }\n\n            console.log(\"Sending final transcript to server:\", finalTranscript);\n            const response = await fetch('http://localhost:3001/transcribe', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ transcript: finalTranscript }),  // Send the transcript to the server\n            });\n\n            const data = await response.json();\n            console.log(\"Received notes:\", data.notes);\n\n        } catch (error) {\n            console.error(\"Error stopping speech recognition or sending transcript:\", error);\n        } finally {\n            setIsRecording(false);  // Ensure recording stops after processing\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>Speech to Notes</h1>\n            <button onClick={handleStartRecording} disabled={isRecording}>\n                Start Recording\n            </button>\n            <button onClick={handleStopRecording} disabled={!isRecording}>\n                Stop Recording\n            </button>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,sBAAsB,EAAEC,eAAe,QAAQ,2BAA2B,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErF,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACS,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE5D,MAAMW,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAIJ,WAAW,EAAE;IACjBC,cAAc,CAAC,IAAI,CAAC;IACpB,IAAI;MACA,MAAMP,sBAAsB,CAAEW,UAAU,IAAK;QACzCF,kBAAkB,CAACE,UAAU,CAAC,CAAC,CAAC;MACpC,CAAC,CAAC;IACN,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC1DL,cAAc,CAAC,KAAK,CAAC;IACzB;EACJ,CAAC;EAED,MAAMO,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI,CAACR,WAAW,EAAE;IAClB,IAAI;MACA,MAAML,eAAe,CAAC,CAAC;MACvB,IAAI,CAACO,eAAe,EAAE;QAClBK,OAAO,CAACD,KAAK,CAAC,6CAA6C,CAAC;QAC5D;MACJ;MAEAC,OAAO,CAACE,GAAG,CAAC,qCAAqC,EAAEP,eAAe,CAAC;MACnE,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;QAC7DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEX,UAAU,EAAEH;QAAgB,CAAC,CAAC,CAAG;MAC5D,CAAC,CAAC;MAEF,MAAMe,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClCX,OAAO,CAACE,GAAG,CAAC,iBAAiB,EAAEQ,IAAI,CAACE,KAAK,CAAC;IAE9C,CAAC,CAAC,OAAOb,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,0DAA0D,EAAEA,KAAK,CAAC;IACpF,CAAC,SAAS;MACNL,cAAc,CAAC,KAAK,CAAC,CAAC,CAAE;IAC5B;EACJ,CAAC;EAED,oBACIJ,OAAA;IAAKuB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAChBxB,OAAA;MAAAwB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxB5B,OAAA;MAAQ6B,OAAO,EAAEtB,oBAAqB;MAACuB,QAAQ,EAAE3B,WAAY;MAAAqB,QAAA,EAAC;IAE9D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACT5B,OAAA;MAAQ6B,OAAO,EAAElB,mBAAoB;MAACmB,QAAQ,EAAE,CAAC3B,WAAY;MAAAqB,QAAA,EAAC;IAE9D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd;AAAC1B,EAAA,CAxDQD,GAAG;AAAA8B,EAAA,GAAH9B,GAAG;AA0DZ,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}