{"ast":null,"code":"let mediaRecorder = null; // Declare globally\n\n// Function to check MediaRecorder support\nfunction checkMediaRecorderSupport() {\n  if (!window.MediaRecorder) {\n    console.error('MediaRecorder API not supported.');\n    alert('Your browser does not support recording features.');\n    return false; // Return false if unsupported\n  }\n  return true; // Return true if supported\n}\n\n// Early check for MediaRecorder support\nif (!checkMediaRecorderSupport()) {\n  alert('Your browser does not support the necessary recording features.');\n}\n\n// Start recording function\nexport async function startRecording() {\n  console.log('Attempting to start recording...');\n  try {\n    // Simplify to only capture microphone audio for testing\n    const micStream = await navigator.mediaDevices.getUserMedia({\n      audio: true // Only capture microphone audio for now\n    });\n    console.log('Microphone stream acquired:', micStream);\n    const combinedStream = micStream; // Simplify to only mic audio\n    console.log('Combined stream:', combinedStream);\n    if (combinedStream.getAudioTracks().length === 0) {\n      throw new Error('Combined stream has no audio tracks.');\n    }\n    let options = {\n      mimeType: 'audio/webm; codecs=opus'\n    }; // Chrome or browsers that support webm\n    if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n      options = {\n        mimeType: 'audio/webm'\n      }; // Fallback for Chrome\n    }\n    if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n      options = {\n        mimeType: 'audio/mp4'\n      }; // Fallback for Safari/Edge\n    }\n    if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n      options = {}; // As a last resort, leave MIME type undefined\n    }\n    mediaRecorder = new MediaRecorder(combinedStream, options);\n    console.log('MediaRecorder initialized:', mediaRecorder);\n    let audioChunks = [];\n    mediaRecorder.ondataavailable = event => {\n      if (event.data.size > 0) {\n        audioChunks.push(event.data);\n        console.log('Audio chunk available:', event.data);\n      }\n    };\n    mediaRecorder.onstart = () => {\n      console.log('Recording started.');\n    };\n    mediaRecorder.onstop = () => {\n      console.log('Recording stopped.');\n      const audioBlob = new Blob(audioChunks, {\n        type: 'audio/webm'\n      });\n      processAudioChunk(audioBlob); // Send audio to backend for processing\n    };\n    mediaRecorder.onerror = event => {\n      console.error('MediaRecorder error:', event.error);\n    };\n\n    // Start the recording\n    mediaRecorder.start();\n  } catch (error) {\n    console.error('Error capturing audio:', error);\n  }\n}\n\n/*export async function startRecording() {\n    console.log('Attempting to start recording...');\n    try {\n        // Capture both system audio and microphone audio\n        const micStream = await navigator.mediaDevices.getUserMedia({\n            audio: {\n                echoCancellation: false,\n                noiseSuppression: false,\n                sampleRate: 44100\n            }\n        });\n        console.log('Microphone stream acquired:', micStream);\n\n        // Since you're focusing on capturing audio (both mic and system), you can use micStream alone\n        const combinedStream = micStream; \n        console.log('Combined stream:', combinedStream);\n\n        if (combinedStream.getAudioTracks().length === 0) {\n            throw new Error('Combined stream has no audio tracks.');\n        }\n\n        // Initialize MediaRecorder with combined audio stream\n        mediaRecorder = new MediaRecorder(combinedStream);\n        console.log('MediaRecorder initialized:', mediaRecorder);\n\n        let audioChunks = [];\n        mediaRecorder.ondataavailable = (event) => {\n            if (event.data.size > 0) {\n                audioChunks.push(event.data);\n                console.log('Audio chunk available:', event.data);\n            }\n        };\n\n        mediaRecorder.onstart = () => {\n            console.log('Recording started.');\n        };\n\n        mediaRecorder.onstop = () => {\n            console.log('Recording stopped.');\n            const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });\n            processAudioChunk(audioBlob);  // Send audio to backend for processing\n        };\n\n        mediaRecorder.onerror = (event) => {\n            console.error('MediaRecorder error:', event.error);\n        };\n\n        // Start the recording\n        mediaRecorder.start();\n    } catch (error) {\n        console.error('Error capturing audio:', error);\n    }\n}*/\n\n// Stop recording function\nexport function stopRecording() {\n  if (mediaRecorder) {\n    if (mediaRecorder.state !== 'inactive') {\n      console.log('Stopping recording...');\n      mediaRecorder.stop();\n    } else {\n      console.error('MediaRecorder is inactive.');\n    }\n  } else {\n    console.error('No MediaRecorder instance found.');\n  }\n}\n\n// Function to process audio and send to backend\nexport const processAudioChunk = async audioBlob => {\n  if (!(audioBlob instanceof Blob)) {\n    console.error('audioBlob is not a Blob instance.');\n    return;\n  }\n  const formData = new FormData();\n  formData.append('audio', audioBlob, 'audio.webm'); // Make sure format matches what backend expects\n\n  try {\n    const response = await fetch('http://localhost:3001/transcribe', {\n      method: 'POST',\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error(`Server error: ${response.status}`);\n    }\n    const result = await response.json();\n    console.log('Transcription result:', result);\n  } catch (error) {\n    console.error('Error sending audio to backend:', error);\n  }\n};\n\n// Additional browser support checks\nif (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n  alert('Your browser does not support the necessary APIs for recording.');\n}","map":{"version":3,"names":["mediaRecorder","checkMediaRecorderSupport","window","MediaRecorder","console","error","alert","startRecording","log","micStream","navigator","mediaDevices","getUserMedia","audio","combinedStream","getAudioTracks","length","Error","options","mimeType","isTypeSupported","audioChunks","ondataavailable","event","data","size","push","onstart","onstop","audioBlob","Blob","type","processAudioChunk","onerror","start","stopRecording","state","stop","formData","FormData","append","response","fetch","method","body","ok","status","result","json"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["let mediaRecorder = null; // Declare globally\n\n// Function to check MediaRecorder support\nfunction checkMediaRecorderSupport() {\n    if (!window.MediaRecorder) {\n        console.error('MediaRecorder API not supported.');\n        alert('Your browser does not support recording features.');\n        return false;  // Return false if unsupported\n    }\n    return true;  // Return true if supported\n}\n\n// Early check for MediaRecorder support\nif (!checkMediaRecorderSupport()) {\n    alert('Your browser does not support the necessary recording features.');\n}\n\n// Start recording function\nexport async function startRecording() {\n    console.log('Attempting to start recording...');\n    try {\n        // Simplify to only capture microphone audio for testing\n        const micStream = await navigator.mediaDevices.getUserMedia({\n            audio: true // Only capture microphone audio for now\n        });\n        console.log('Microphone stream acquired:', micStream);\n\n        const combinedStream = micStream; // Simplify to only mic audio\n        console.log('Combined stream:', combinedStream);\n\n        if (combinedStream.getAudioTracks().length === 0) {\n            throw new Error('Combined stream has no audio tracks.');\n        }\n\n        let options = { mimeType: 'audio/webm; codecs=opus' }; // Chrome or browsers that support webm\nif (!MediaRecorder.isTypeSupported(options.mimeType)) {\n    options = { mimeType: 'audio/webm' }; // Fallback for Chrome\n}\nif (!MediaRecorder.isTypeSupported(options.mimeType)) {\n    options = { mimeType: 'audio/mp4' }; // Fallback for Safari/Edge\n}\nif (!MediaRecorder.isTypeSupported(options.mimeType)) {\n    options = {}; // As a last resort, leave MIME type undefined\n}\n\nmediaRecorder = new MediaRecorder(combinedStream, options);\n        console.log('MediaRecorder initialized:', mediaRecorder);\n\n        let audioChunks = [];\n        mediaRecorder.ondataavailable = (event) => {\n            if (event.data.size > 0) {\n                audioChunks.push(event.data);\n                console.log('Audio chunk available:', event.data);\n            }\n        };\n\n        mediaRecorder.onstart = () => {\n            console.log('Recording started.');\n        };\n\n        mediaRecorder.onstop = () => {\n            console.log('Recording stopped.');\n            const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });\n            processAudioChunk(audioBlob);  // Send audio to backend for processing\n        };\n\n        mediaRecorder.onerror = (event) => {\n            console.error('MediaRecorder error:', event.error);\n        };\n\n        // Start the recording\n        mediaRecorder.start();\n    } catch (error) {\n        console.error('Error capturing audio:', error);\n    }\n}\n\n/*export async function startRecording() {\n    console.log('Attempting to start recording...');\n    try {\n        // Capture both system audio and microphone audio\n        const micStream = await navigator.mediaDevices.getUserMedia({\n            audio: {\n                echoCancellation: false,\n                noiseSuppression: false,\n                sampleRate: 44100\n            }\n        });\n        console.log('Microphone stream acquired:', micStream);\n\n        // Since you're focusing on capturing audio (both mic and system), you can use micStream alone\n        const combinedStream = micStream; \n        console.log('Combined stream:', combinedStream);\n\n        if (combinedStream.getAudioTracks().length === 0) {\n            throw new Error('Combined stream has no audio tracks.');\n        }\n\n        // Initialize MediaRecorder with combined audio stream\n        mediaRecorder = new MediaRecorder(combinedStream);\n        console.log('MediaRecorder initialized:', mediaRecorder);\n\n        let audioChunks = [];\n        mediaRecorder.ondataavailable = (event) => {\n            if (event.data.size > 0) {\n                audioChunks.push(event.data);\n                console.log('Audio chunk available:', event.data);\n            }\n        };\n\n        mediaRecorder.onstart = () => {\n            console.log('Recording started.');\n        };\n\n        mediaRecorder.onstop = () => {\n            console.log('Recording stopped.');\n            const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });\n            processAudioChunk(audioBlob);  // Send audio to backend for processing\n        };\n\n        mediaRecorder.onerror = (event) => {\n            console.error('MediaRecorder error:', event.error);\n        };\n\n        // Start the recording\n        mediaRecorder.start();\n    } catch (error) {\n        console.error('Error capturing audio:', error);\n    }\n}*/\n\n// Stop recording function\nexport function stopRecording() {\n    if (mediaRecorder) {\n        if (mediaRecorder.state !== 'inactive') {\n            console.log('Stopping recording...');\n            mediaRecorder.stop();\n        } else {\n            console.error('MediaRecorder is inactive.');\n        }\n    } else {\n        console.error('No MediaRecorder instance found.');\n    }\n}\n\n// Function to process audio and send to backend\nexport const processAudioChunk = async (audioBlob) => {\n    if (!(audioBlob instanceof Blob)) {\n        console.error('audioBlob is not a Blob instance.');\n        return;\n    }\n\n    const formData = new FormData();\n    formData.append('audio', audioBlob, 'audio.webm');  // Make sure format matches what backend expects\n\n    try {\n        const response = await fetch('http://localhost:3001/transcribe', {\n            method: 'POST',\n            body: formData,\n        });\n\n        if (!response.ok) {\n            throw new Error(`Server error: ${response.status}`);\n        }\n\n        const result = await response.json();\n        console.log('Transcription result:', result);\n    } catch (error) {\n        console.error('Error sending audio to backend:', error);\n    }\n};\n\n// Additional browser support checks\nif (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n    alert('Your browser does not support the necessary APIs for recording.');\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}