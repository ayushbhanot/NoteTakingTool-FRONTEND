{"ast":null,"code":"var _jsxFileName = \"/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { startSpeechRecognition, stopRecognition } from './services/audioRecording'; // Adjust path as needed\nimport NotesUI from './components/NotesUI';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [generatedNotes, setGeneratedNotes] = useState({});\n  const handleStartRecording = async () => {\n    if (isRecording) return;\n    setIsRecording(true);\n    try {\n      await startSpeechRecognition();\n    } catch (error) {\n      console.error(\"Error starting speech recognition:\", error);\n      setIsRecording(false);\n    }\n  };\n  const handleStopRecording = async () => {\n    if (!isRecording) return; // Ensure we're recording before stopping\n\n    try {\n      await stopRecognition(); // Stop the speech recognition process\n\n      if (finalTranscript.trim()) {\n        console.log('Sending final transcript to server:', finalTranscript);\n\n        // Send the final transcript to the backend for processing\n        const response = await axios.post('http://localhost:3001/transcribe', {\n          transcript: finalTranscript\n        });\n        console.log('Received notes:', response.data.notes);\n        setGeneratedNotes(response.data.notes); // Set the notes for display\n      } else {\n        console.log('Final transcript is empty. No data to send.');\n      }\n    } catch (error) {\n      console.error('Error stopping speech recognition or sending transcript:', error);\n    } finally {\n      setIsRecording(false); // Update recording state\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Speech to Notes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStartRecording,\n      disabled: isRecording,\n      children: \"Start Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStopRecording,\n      disabled: !isRecording,\n      children: \"Stop Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NotesUI, {\n      notes: generatedNotes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"5yUDuHDwj7Hxx7ZUoQi0+Ir7hh4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","startSpeechRecognition","stopRecognition","NotesUI","axios","jsxDEV","_jsxDEV","App","_s","isRecording","setIsRecording","generatedNotes","setGeneratedNotes","handleStartRecording","error","console","handleStopRecording","finalTranscript","trim","log","response","post","transcript","data","notes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { startSpeechRecognition, stopRecognition } from './services/audioRecording'; // Adjust path as needed\nimport NotesUI from './components/NotesUI';\nimport axios from 'axios';\n\nfunction App() {\n    const [isRecording, setIsRecording] = useState(false);\n    const [generatedNotes, setGeneratedNotes] = useState({});\n\n    const handleStartRecording = async () => {\n        if (isRecording) return;\n        setIsRecording(true);\n        try {\n            await startSpeechRecognition();\n        } catch (error) {\n            console.error(\"Error starting speech recognition:\", error);\n            setIsRecording(false);\n        }\n    };\n\n    const handleStopRecording = async () => {\n        if (!isRecording) return;  // Ensure we're recording before stopping\n    \n        try {\n            await stopRecognition();  // Stop the speech recognition process\n    \n            if (finalTranscript.trim()) {\n                console.log('Sending final transcript to server:', finalTranscript);\n    \n                // Send the final transcript to the backend for processing\n                const response = await axios.post('http://localhost:3001/transcribe', {\n                    transcript: finalTranscript\n                });\n    \n                console.log('Received notes:', response.data.notes);\n                setGeneratedNotes(response.data.notes);  // Set the notes for display\n            } else {\n                console.log('Final transcript is empty. No data to send.');\n            }\n        } catch (error) {\n            console.error('Error stopping speech recognition or sending transcript:', error);\n        } finally {\n            setIsRecording(false);  // Update recording state\n        }\n    };\n    \n    \n\n    return (\n        <div className=\"App\">\n            <h1>Speech to Notes</h1>\n            <button onClick={handleStartRecording} disabled={isRecording}>\n                Start Recording\n            </button>\n            <button onClick={handleStopRecording} disabled={!isRecording}>\n                Stop Recording\n            </button>\n            <NotesUI notes={generatedNotes} />\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,sBAAsB,EAAEC,eAAe,QAAQ,2BAA2B,CAAC,CAAC;AACrF,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACW,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC,CAAC;EAExD,MAAMa,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAIJ,WAAW,EAAE;IACjBC,cAAc,CAAC,IAAI,CAAC;IACpB,IAAI;MACA,MAAMT,sBAAsB,CAAC,CAAC;IAClC,CAAC,CAAC,OAAOa,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC1DJ,cAAc,CAAC,KAAK,CAAC;IACzB;EACJ,CAAC;EAED,MAAMM,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI,CAACP,WAAW,EAAE,OAAO,CAAE;;IAE3B,IAAI;MACA,MAAMP,eAAe,CAAC,CAAC,CAAC,CAAE;;MAE1B,IAAIe,eAAe,CAACC,IAAI,CAAC,CAAC,EAAE;QACxBH,OAAO,CAACI,GAAG,CAAC,qCAAqC,EAAEF,eAAe,CAAC;;QAEnE;QACA,MAAMG,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,IAAI,CAAC,kCAAkC,EAAE;UAClEC,UAAU,EAAEL;QAChB,CAAC,CAAC;QAEFF,OAAO,CAACI,GAAG,CAAC,iBAAiB,EAAEC,QAAQ,CAACG,IAAI,CAACC,KAAK,CAAC;QACnDZ,iBAAiB,CAACQ,QAAQ,CAACG,IAAI,CAACC,KAAK,CAAC,CAAC,CAAE;MAC7C,CAAC,MAAM;QACHT,OAAO,CAACI,GAAG,CAAC,6CAA6C,CAAC;MAC9D;IACJ,CAAC,CAAC,OAAOL,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,0DAA0D,EAAEA,KAAK,CAAC;IACpF,CAAC,SAAS;MACNJ,cAAc,CAAC,KAAK,CAAC,CAAC,CAAE;IAC5B;EACJ,CAAC;EAID,oBACIJ,OAAA;IAAKmB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAChBpB,OAAA;MAAAoB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxBxB,OAAA;MAAQyB,OAAO,EAAElB,oBAAqB;MAACmB,QAAQ,EAAEvB,WAAY;MAAAiB,QAAA,EAAC;IAE9D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACTxB,OAAA;MAAQyB,OAAO,EAAEf,mBAAoB;MAACgB,QAAQ,EAAE,CAACvB,WAAY;MAAAiB,QAAA,EAAC;IAE9D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACTxB,OAAA,CAACH,OAAO;MAACqB,KAAK,EAAEb;IAAe;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjC,CAAC;AAEd;AAACtB,EAAA,CAvDQD,GAAG;AAAA0B,EAAA,GAAH1B,GAAG;AAyDZ,eAAeA,GAAG;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}