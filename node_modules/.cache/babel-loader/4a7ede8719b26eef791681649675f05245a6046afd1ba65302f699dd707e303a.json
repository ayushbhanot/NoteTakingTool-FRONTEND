{"ast":null,"code":"// let mediaRecorder = null; // Declare globally (commented out, we won't use MediaRecorder)\n\n// Function to check WebkitSpeechRecognition support\n/*function checkSpeechRecognitionSupport() {\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!window.SpeechRecognition) {\n        console.error('SpeechRecognition API not supported.');\n        alert('Your browser does not support speech recognition features.');\n        return false;\n    }\n    return true;\n}\n\n// Check for WebkitSpeechRecognition support early\nif (!checkSpeechRecognitionSupport()) {\n    alert('Your browser does not support the necessary speech recognition features.');\n}\n\n// Initialize WebkitSpeechRecognition\nconst recognition = new window.SpeechRecognition();\nrecognition.continuous = true;\nrecognition.interimResults = true; // Set to true to capture partial results\nrecognition.lang = 'en-US';\nlet isRecognitionRunning = false;\nlet finalTranscript = '';  // Store final transcript globally\n\n// Function to request microphone permission\nasync function requestMicPermission() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        console.log('Microphone permission granted');\n        stream.getTracks().forEach(track => track.stop());  // Stop the stream immediately\n        return true;\n    } catch (error) {\n        console.error('Microphone permission denied:', error);\n        alert('Microphone access is required for speech recognition.');\n        return false;\n    }\n}\n\n// Start speech recognition function\nexport async function startSpeechRecognition() {\n    const permissionGranted = await requestMicPermission();  // Ensure permission is granted\n    if (!permissionGranted) return;\n\n    if (isRecognitionRunning) {\n        console.error(\"Speech recognition is already running.\");\n        return;\n    }\n    try {\n        finalTranscript = '';  // Clear transcript on new session\n        recognition.start();\n        isRecognitionRunning = true;\n        console.log('Speech recognition started.');\n    } catch (error) {\n        console.error('Error starting speech recognition:', error);\n    }\n}\n\n// Stop speech recognition function\nexport function stopSpeechRecognition() {\n    if (!isRecognitionRunning) {\n        console.error(\"Speech recognition is not running.\");\n        return;\n    }\n    console.log('Stopping speech recognition...');\n    recognition.stop();\n}\n\n// Handle when recognition ends\nrecognition.onend = () => {\n    isRecognitionRunning = false;\n    console.log('Speech recognition stopped.');\n    \n    // Send the final transcript to backend for transcription when stopped\n    if (finalTranscript) {\n        processTranscript(finalTranscript);  // Send final transcript to backend\n    } else {\n        console.error(\"No transcript available to send.\");\n    }\n};\n\n// Handle when recognition is aborted\nrecognition.onabort = (event) => {\n    console.error('Speech recognition was aborted:', event);\n    // Optionally, restart recognition if needed\n    setTimeout(() => {\n        console.log('Attempting to restart speech recognition...');\n        startSpeechRecognition();\n    }, 1000);  // Delay to prevent immediate restart\n};\n\n// Process the transcript and send to backend\n// Process the transcript and send to backend\nexport const processTranscript = async (transcript) => {\n    try {\n        // Send as JSON, not FormData, because the backend likely expects a JSON payload\n        const response = await fetch('http://localhost:3001/generateNotes', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ transcript }),  // Send the transcript as JSON\n        });\n\n        if (!response.ok) {\n            throw new Error(`Server error: ${response.status}`);\n        }\n\n        const result = await response.json();\n        console.log('Generated notes:', result);\n    } catch (error) {\n        console.error('Error sending transcript to backend:', error);\n    }\n};\n\n\n// Event handler for when recognition results are available\nrecognition.onresult = (event) => {\n    let interimTranscript = '';\n\n    for (let i = event.resultIndex; i < event.results.length; i++) {\n        const result = event.results[i];\n        if (result.isFinal) {\n            finalTranscript += result[0].transcript;\n        } else {\n            interimTranscript += result[0].transcript;\n        }\n    }\n\n    console.log('Interim Transcript:', interimTranscript);\n    console.log('Final Transcript:', finalTranscript);  // Only append the final result once\n};\n\nrecognition.onerror = (event) => {\n    console.error('Speech Recognition Error:', event.error);\n\n    // Handle specific \"no-speech\" error\n    if (event.error === 'no-speech') {\n        console.log('No speech detected. Please try speaking more clearly.');\n        alert('No speech detected. Please try again.');\n        // Optionally, restart the recognition\n        setTimeout(() => {\n            console.log('Restarting speech recognition after no-speech error...');\n            startSpeechRecognition();\n        }, 1000);  // Delay before restarting\n    }\n\n    if (event.error === 'audio-capture') {\n        console.error('Microphone access issue.');\n        alert('Please check your microphone permissions.');\n    }\n};\nrecognition.onabort = (event) => {\n    console.error('Speech recognition was aborted:', event);\n    // Optionally restart recognition\n    setTimeout(() => {\n        console.log('Attempting to restart speech recognition...');\n        startSpeechRecognition();\n    }, 1000);  // Delay to prevent immediate restart\n};\n*/\n\n// COMMENTED OUT MEDIARECORDER CODE\n\nlet mediaRecorder = null; // Declare MediaRecorder globally\nlet combinedTranscript = \"\"; // String to hold combined transcript\nlet audioChunks = []; // Store audio chunks\n\nexport async function startRecording() {\n  console.log('Attempting to start recording...');\n  combinedTranscript = \"\";\n  try {\n    const micStream = await navigator.mediaDevices.getUserMedia({\n      audio: {\n        echoCancellation: false,\n        noiseSuppression: false,\n        sampleRate: 44100\n      }\n    });\n    console.log('Microphone stream acquired:', micStream);\n    const combinedStream = micStream;\n    console.log('Combined stream:', combinedStream);\n    if (combinedStream.getAudioTracks().length === 0) {\n      throw new Error('Combined stream has no audio tracks.');\n    }\n    let options = {\n      mimeType: 'audio/webm; codecs=opus'\n    };\n    if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n      options = {\n        mimeType: 'audio/webm'\n      };\n    }\n    if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n      options = {\n        mimeType: 'audio/mp4'\n      };\n    }\n    if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n      options = {};\n    }\n    mediaRecorder = new MediaRecorder(combinedStream, options);\n    console.log('MediaRecorder initialized:', mediaRecorder);\n\n    // Clear audio chunks before starting a new recording\n    audioChunks = [];\n    mediaRecorder.ondataavailable = event => {\n      if (event.data.size > 0) {\n        audioChunks.push(event.data); // Store each chunk\n        console.log('Audio chunk available:', event.data);\n      }\n    };\n    mediaRecorder.onstart = () => {\n      console.log('Recording started.');\n    };\n    mediaRecorder.onstop = async () => {\n      console.log('Recording stopped.');\n      const audioBlob = new Blob(audioChunks, {\n        type: options.mimeType || 'audio/webm'\n      });\n      console.log('Audio Blob size:', audioBlob.size);\n      if (audioBlob.size > 0) {\n        await processAudioChunk(audioBlob); // Process the final audio blob at the end of recording\n      } else {\n        console.error('Audio Blob is empty, not sending to backend');\n      }\n\n      // Now that recording is stopped, trigger the note generation\n      await generateNotesFromTranscript(); // Generate notes from the combined transcript\n    };\n    mediaRecorder.onerror = event => {\n      console.error('MediaRecorder error:', event.error);\n    };\n\n    // Start recording with a timeslice of 30 seconds (30000 ms) to generate chunks every 30 seconds\n    mediaRecorder.start(30000); // Collect blobs every 30 seconds\n  } catch (error) {\n    console.error('Error capturing audio:', error);\n  }\n}\nexport function stopRecording() {\n  if (mediaRecorder) {\n    if (mediaRecorder.state !== 'inactive') {\n      console.log('Stopping recording...');\n      mediaRecorder.stop();\n    } else {\n      console.error('MediaRecorder is inactive.');\n    }\n  } else {\n    console.error('No MediaRecorder instance found.');\n  }\n}\n\n// Process the recorded audio chunk and send it to the backend for transcription\nasync function processAudioChunk(audioBlob) {\n  console.log('Processing audio chunk for upload...');\n  const formData = new FormData();\n  formData.append('audio', audioBlob, 'recording.webm'); // Append audio Blob to FormData\n\n  try {\n    const response = await fetch('http://localhost:3001/transcribe', {\n      method: 'POST',\n      body: formData // Send the FormData with the audio file\n    });\n    if (!response.ok) {\n      throw new Error(`Server error: ${response.status}`);\n    }\n    const result = await response.json();\n    console.log('Transcription result:', result);\n\n    // Append the current transcription to combinedTranscript\n    if (result && result.transcription) {\n      combinedTranscript += \" \" + result.transcription.trim(); // Ensure it's only appended once per chunk\n    }\n    console.log('Combined transcript:', combinedTranscript);\n  } catch (error) {\n    console.error('Error uploading audio:', error);\n  }\n}\n\n// Function to send the combined transcript to the backend for note generation\nasync function generateNotesFromTranscript() {\n  try {\n    const response = await fetch('http://localhost:3001/generateNotes', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        transcript: combinedTranscript.trim()\n      }) // Ensure transcript is sent as JSON\n    });\n    if (!response.ok) {\n      throw new Error(`Server error: ${response.status}`);\n    }\n    const notesResult = await response.json();\n    console.log('Generated notes:', notesResult);\n    // Update the UI with the generated notes\n    setGeneratedNotes(notesResult.notes); // Update state\n  } catch (error) {\n    console.error('Error generating notes:', error);\n  }\n}","map":{"version":3,"names":["mediaRecorder","combinedTranscript","audioChunks","startRecording","console","log","micStream","navigator","mediaDevices","getUserMedia","audio","echoCancellation","noiseSuppression","sampleRate","combinedStream","getAudioTracks","length","Error","options","mimeType","MediaRecorder","isTypeSupported","ondataavailable","event","data","size","push","onstart","onstop","audioBlob","Blob","type","processAudioChunk","error","generateNotesFromTranscript","onerror","start","stopRecording","state","stop","formData","FormData","append","response","fetch","method","body","ok","status","result","json","transcription","trim","headers","JSON","stringify","transcript","notesResult","setGeneratedNotes","notes"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["// let mediaRecorder = null; // Declare globally (commented out, we won't use MediaRecorder)\n\n// Function to check WebkitSpeechRecognition support\n/*function checkSpeechRecognitionSupport() {\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!window.SpeechRecognition) {\n        console.error('SpeechRecognition API not supported.');\n        alert('Your browser does not support speech recognition features.');\n        return false;\n    }\n    return true;\n}\n\n// Check for WebkitSpeechRecognition support early\nif (!checkSpeechRecognitionSupport()) {\n    alert('Your browser does not support the necessary speech recognition features.');\n}\n\n// Initialize WebkitSpeechRecognition\nconst recognition = new window.SpeechRecognition();\nrecognition.continuous = true;\nrecognition.interimResults = true; // Set to true to capture partial results\nrecognition.lang = 'en-US';\nlet isRecognitionRunning = false;\nlet finalTranscript = '';  // Store final transcript globally\n\n// Function to request microphone permission\nasync function requestMicPermission() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        console.log('Microphone permission granted');\n        stream.getTracks().forEach(track => track.stop());  // Stop the stream immediately\n        return true;\n    } catch (error) {\n        console.error('Microphone permission denied:', error);\n        alert('Microphone access is required for speech recognition.');\n        return false;\n    }\n}\n\n// Start speech recognition function\nexport async function startSpeechRecognition() {\n    const permissionGranted = await requestMicPermission();  // Ensure permission is granted\n    if (!permissionGranted) return;\n\n    if (isRecognitionRunning) {\n        console.error(\"Speech recognition is already running.\");\n        return;\n    }\n    try {\n        finalTranscript = '';  // Clear transcript on new session\n        recognition.start();\n        isRecognitionRunning = true;\n        console.log('Speech recognition started.');\n    } catch (error) {\n        console.error('Error starting speech recognition:', error);\n    }\n}\n\n// Stop speech recognition function\nexport function stopSpeechRecognition() {\n    if (!isRecognitionRunning) {\n        console.error(\"Speech recognition is not running.\");\n        return;\n    }\n    console.log('Stopping speech recognition...');\n    recognition.stop();\n}\n\n// Handle when recognition ends\nrecognition.onend = () => {\n    isRecognitionRunning = false;\n    console.log('Speech recognition stopped.');\n    \n    // Send the final transcript to backend for transcription when stopped\n    if (finalTranscript) {\n        processTranscript(finalTranscript);  // Send final transcript to backend\n    } else {\n        console.error(\"No transcript available to send.\");\n    }\n};\n\n// Handle when recognition is aborted\nrecognition.onabort = (event) => {\n    console.error('Speech recognition was aborted:', event);\n    // Optionally, restart recognition if needed\n    setTimeout(() => {\n        console.log('Attempting to restart speech recognition...');\n        startSpeechRecognition();\n    }, 1000);  // Delay to prevent immediate restart\n};\n\n// Process the transcript and send to backend\n// Process the transcript and send to backend\nexport const processTranscript = async (transcript) => {\n    try {\n        // Send as JSON, not FormData, because the backend likely expects a JSON payload\n        const response = await fetch('http://localhost:3001/generateNotes', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ transcript }),  // Send the transcript as JSON\n        });\n\n        if (!response.ok) {\n            throw new Error(`Server error: ${response.status}`);\n        }\n\n        const result = await response.json();\n        console.log('Generated notes:', result);\n    } catch (error) {\n        console.error('Error sending transcript to backend:', error);\n    }\n};\n\n\n// Event handler for when recognition results are available\nrecognition.onresult = (event) => {\n    let interimTranscript = '';\n\n    for (let i = event.resultIndex; i < event.results.length; i++) {\n        const result = event.results[i];\n        if (result.isFinal) {\n            finalTranscript += result[0].transcript;\n        } else {\n            interimTranscript += result[0].transcript;\n        }\n    }\n\n    console.log('Interim Transcript:', interimTranscript);\n    console.log('Final Transcript:', finalTranscript);  // Only append the final result once\n};\n\nrecognition.onerror = (event) => {\n    console.error('Speech Recognition Error:', event.error);\n\n    // Handle specific \"no-speech\" error\n    if (event.error === 'no-speech') {\n        console.log('No speech detected. Please try speaking more clearly.');\n        alert('No speech detected. Please try again.');\n        // Optionally, restart the recognition\n        setTimeout(() => {\n            console.log('Restarting speech recognition after no-speech error...');\n            startSpeechRecognition();\n        }, 1000);  // Delay before restarting\n    }\n\n    if (event.error === 'audio-capture') {\n        console.error('Microphone access issue.');\n        alert('Please check your microphone permissions.');\n    }\n};\nrecognition.onabort = (event) => {\n    console.error('Speech recognition was aborted:', event);\n    // Optionally restart recognition\n    setTimeout(() => {\n        console.log('Attempting to restart speech recognition...');\n        startSpeechRecognition();\n    }, 1000);  // Delay to prevent immediate restart\n};\n*/\n\n// COMMENTED OUT MEDIARECORDER CODE\n\nlet mediaRecorder = null; // Declare MediaRecorder globally\nlet combinedTranscript = \"\"; // String to hold combined transcript\nlet audioChunks = []; // Store audio chunks\n\nexport async function startRecording() {\n    console.log('Attempting to start recording...');\n    combinedTranscript = \"\";\n    try {\n        const micStream = await navigator.mediaDevices.getUserMedia({\n            audio: {\n                echoCancellation: false,\n                noiseSuppression: false,\n                sampleRate: 44100\n            }\n        });\n        console.log('Microphone stream acquired:', micStream);\n\n        const combinedStream = micStream;\n        console.log('Combined stream:', combinedStream);\n\n        if (combinedStream.getAudioTracks().length === 0) {\n            throw new Error('Combined stream has no audio tracks.');\n        }\n\n        let options = { mimeType: 'audio/webm; codecs=opus' };\n        if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n            options = { mimeType: 'audio/webm' };\n        }\n        if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n            options = { mimeType: 'audio/mp4' };\n        }\n        if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n            options = {};\n        }\n\n        mediaRecorder = new MediaRecorder(combinedStream, options);\n        console.log('MediaRecorder initialized:', mediaRecorder);\n\n        // Clear audio chunks before starting a new recording\n        audioChunks = [];\n\n        mediaRecorder.ondataavailable = (event) => {\n            if (event.data.size > 0) {\n                audioChunks.push(event.data); // Store each chunk\n                console.log('Audio chunk available:', event.data);\n            }\n        };\n\n        mediaRecorder.onstart = () => {\n            console.log('Recording started.');\n        };\n\n        mediaRecorder.onstop = async () => {\n            console.log('Recording stopped.');\n            const audioBlob = new Blob(audioChunks, { type: options.mimeType || 'audio/webm' });\n            console.log('Audio Blob size:', audioBlob.size);\n\n            if (audioBlob.size > 0) {\n                await processAudioChunk(audioBlob);  // Process the final audio blob at the end of recording\n            } else {\n                console.error('Audio Blob is empty, not sending to backend');\n            }\n\n            // Now that recording is stopped, trigger the note generation\n            await generateNotesFromTranscript();  // Generate notes from the combined transcript\n        };\n\n        mediaRecorder.onerror = (event) => {\n            console.error('MediaRecorder error:', event.error);\n        };\n\n        // Start recording with a timeslice of 30 seconds (30000 ms) to generate chunks every 30 seconds\n        mediaRecorder.start(30000);  // Collect blobs every 30 seconds\n    } catch (error) {\n        console.error('Error capturing audio:', error);\n    }\n}\n\nexport function stopRecording() {\n    if (mediaRecorder) {\n        if (mediaRecorder.state !== 'inactive') {\n            console.log('Stopping recording...');\n            mediaRecorder.stop();\n        } else {\n            console.error('MediaRecorder is inactive.');\n        }\n    } else {\n        console.error('No MediaRecorder instance found.');\n    }\n}\n\n// Process the recorded audio chunk and send it to the backend for transcription\nasync function processAudioChunk(audioBlob) {\n    console.log('Processing audio chunk for upload...');\n    const formData = new FormData();\n    formData.append('audio', audioBlob, 'recording.webm'); // Append audio Blob to FormData\n\n    try {\n        const response = await fetch('http://localhost:3001/transcribe', {\n            method: 'POST',\n            body: formData, // Send the FormData with the audio file\n        });\n\n        if (!response.ok) {\n            throw new Error(`Server error: ${response.status}`);\n        }\n\n        const result = await response.json();\n        console.log('Transcription result:', result);\n\n        // Append the current transcription to combinedTranscript\n        if (result && result.transcription) {\n            combinedTranscript += \" \" + result.transcription.trim(); // Ensure it's only appended once per chunk\n        }\n\n        console.log('Combined transcript:', combinedTranscript);\n\n    } catch (error) {\n        console.error('Error uploading audio:', error);\n    }\n}\n\n// Function to send the combined transcript to the backend for note generation\nasync function generateNotesFromTranscript() {\n    try {\n        const response = await fetch('http://localhost:3001/generateNotes', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ transcript: combinedTranscript.trim() }),  // Ensure transcript is sent as JSON\n        });\n\n        if (!response.ok) {\n            throw new Error(`Server error: ${response.status}`);\n        }\n\n        const notesResult = await response.json();\n        console.log('Generated notes:', notesResult);\n        // Update the UI with the generated notes\n        setGeneratedNotes(notesResult.notes); // Update state\n    } catch (error) {\n        console.error('Error generating notes:', error);\n    }\n}\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}