{"ast":null,"code":"let recognition;\nlet finalTranscript = '';\nlet isRecognitionRunning = false;\nlet restartCooldownActive = false; // Cooldown flag to avoid rapid restarts\nconst INTERIM_THRESHOLD = 250;\nconst RESTART_DELAY = 500; // 1-second delay before restarting\nconst COOLDOWN_DURATION = 3000; // 3-second cooldown between restarts\n\n// Request microphone permission\nasync function requestMicPermission() {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    stream.getTracks().forEach(track => track.stop());\n    console.log('Microphone permission granted');\n    return true;\n  } catch (error) {\n    alert('Microphone access is required.');\n    console.log('Microphone permission denied');\n    return false;\n  }\n}\n\n// Initialize SpeechRecognition API\nfunction initializeRecognition() {\n  window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  if (!window.SpeechRecognition) {\n    alert('Browser does not support SpeechRecognition API.');\n    console.log('SpeechRecognition API not supported');\n    return;\n  }\n  recognition = new window.SpeechRecognition();\n  recognition.continuous = true;\n  recognition.interimResults = true;\n  recognition.lang = 'en-US';\n  recognition.onresult = event => {\n    let interim = '';\n    for (let i = event.resultIndex; i < event.results.length; i++) {\n      const transcript = event.results[i][0].transcript;\n      if (event.results[i].isFinal) {\n        finalTranscript += transcript + ' ';\n        console.log('Final Transcript: ', finalTranscript);\n      } else {\n        interim += transcript;\n      }\n    }\n    if (interim.length > INTERIM_THRESHOLD) {\n      console.log('Interim Transcript exceeded threshold, restarting...');\n      restartRecognition();\n    }\n  };\n  recognition.onerror = event => {\n    console.log('Recognition error: ', event.error);\n    if (!restartCooldownActive) {\n      restartRecognition();\n    }\n  };\n  recognition.onend = () => {\n    console.log('Recognition ended.');\n    if (isRecognitionRunning) {\n      setTimeout(() => {\n        console.log('Restarting due to recognition end...');\n        restartRecognition();\n      }, RESTART_DELAY);\n    }\n  };\n  console.log('Speech recognition initialized.');\n}\n\n// Start Speech Recognition\nfunction startRecognition() {\n  if (!isRecognitionRunning) {\n    console.log('Starting recognition...');\n    try {\n      recognition.start();\n      isRecognitionRunning = true;\n    } catch (error) {\n      console.log('Recognition start failed: ', error);\n    }\n  } else {\n    console.log('Recognition already running.');\n  }\n}\n\n// Restart Speech Recognition with delay and cooldown\nfunction restartRecognition() {\n  if (restartCooldownActive) {\n    console.log('Cooldown active, skipping restart.');\n    return;\n  }\n  if (isRecognitionRunning) {\n    console.log('Stopping recognition before restarting...');\n    recognition.stop();\n    isRecognitionRunning = false;\n    restartCooldownActive = true; // Activate cooldown\n\n    setTimeout(() => {\n      console.log('Restarting recognition...');\n      startRecognition();\n      setTimeout(() => {\n        restartCooldownActive = false; // Reset cooldown after duration\n        console.log('Cooldown finished.');\n      }, COOLDOWN_DURATION);\n    }, RESTART_DELAY);\n  }\n}\n\n// Stop Speech Recognition\nexport function stopRecognition() {\n  if (isRecognitionRunning) {\n    console.log('Stopping recognition...');\n    recognition.stop();\n    isRecognitionRunning = false;\n  }\n}\n\n// Function to start Speech Recognition after checking mic permissions\nexport async function startSpeechRecognition() {\n  const permissionGranted = await requestMicPermission();\n  if (!permissionGranted) return;\n  if (!recognition) initializeRecognition();\n  startRecognition();\n}","map":{"version":3,"names":["recognition","finalTranscript","isRecognitionRunning","restartCooldownActive","INTERIM_THRESHOLD","RESTART_DELAY","COOLDOWN_DURATION","requestMicPermission","stream","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","track","stop","console","log","error","alert","initializeRecognition","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","interim","i","resultIndex","results","length","transcript","isFinal","restartRecognition","onerror","onend","setTimeout","startRecognition","start","stopRecognition","startSpeechRecognition","permissionGranted"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["let recognition;\nlet finalTranscript = '';\nlet isRecognitionRunning = false;\nlet restartCooldownActive = false;  // Cooldown flag to avoid rapid restarts\nconst INTERIM_THRESHOLD = 250;\nconst RESTART_DELAY = 500;  // 1-second delay before restarting\nconst COOLDOWN_DURATION = 3000;  // 3-second cooldown between restarts\n\n// Request microphone permission\nasync function requestMicPermission() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        stream.getTracks().forEach(track => track.stop());\n        console.log('Microphone permission granted');\n        return true;\n    } catch (error) {\n        alert('Microphone access is required.');\n        console.log('Microphone permission denied');\n        return false;\n    }\n}\n\n// Initialize SpeechRecognition API\nfunction initializeRecognition() {\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!window.SpeechRecognition) {\n        alert('Browser does not support SpeechRecognition API.');\n        console.log('SpeechRecognition API not supported');\n        return;\n    }\n\n    recognition = new window.SpeechRecognition();\n    recognition.continuous = true;\n    recognition.interimResults = true;\n    recognition.lang = 'en-US';\n\n    recognition.onresult = (event) => {\n        let interim = '';\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n            const transcript = event.results[i][0].transcript;\n            if (event.results[i].isFinal) {\n                finalTranscript += transcript + ' ';\n                console.log('Final Transcript: ', finalTranscript);\n            } else {\n                interim += transcript;\n            }\n        }\n\n        if (interim.length > INTERIM_THRESHOLD) {\n            console.log('Interim Transcript exceeded threshold, restarting...');\n            restartRecognition();\n        }\n    };\n\n    recognition.onerror = (event) => {\n        console.log('Recognition error: ', event.error);\n        if (!restartCooldownActive) {\n            restartRecognition();\n        }\n    };\n\n    recognition.onend = () => {\n        console.log('Recognition ended.');\n        if (isRecognitionRunning) {\n            setTimeout(() => {\n                console.log('Restarting due to recognition end...');\n                restartRecognition();\n            }, RESTART_DELAY);\n        }\n    };\n\n    console.log('Speech recognition initialized.');\n}\n\n// Start Speech Recognition\nfunction startRecognition() {\n    if (!isRecognitionRunning) {\n        console.log('Starting recognition...');\n        try {\n            recognition.start();\n            isRecognitionRunning = true;\n        } catch (error) {\n            console.log('Recognition start failed: ', error);\n        }\n    } else {\n        console.log('Recognition already running.');\n    }\n}\n\n// Restart Speech Recognition with delay and cooldown\nfunction restartRecognition() {\n    if (restartCooldownActive) {\n        console.log('Cooldown active, skipping restart.');\n        return;\n    }\n\n    if (isRecognitionRunning) {\n        console.log('Stopping recognition before restarting...');\n        recognition.stop();\n        isRecognitionRunning = false;\n\n        restartCooldownActive = true;  // Activate cooldown\n\n        setTimeout(() => {\n            console.log('Restarting recognition...');\n            startRecognition();\n\n            setTimeout(() => {\n                restartCooldownActive = false;  // Reset cooldown after duration\n                console.log('Cooldown finished.');\n            }, COOLDOWN_DURATION);\n        }, RESTART_DELAY);\n    }\n}\n\n// Stop Speech Recognition\nexport function stopRecognition() {\n    if (isRecognitionRunning) {\n        console.log('Stopping recognition...');\n        recognition.stop();\n        isRecognitionRunning = false;\n    }\n}\n\n// Function to start Speech Recognition after checking mic permissions\nexport async function startSpeechRecognition() {\n    const permissionGranted = await requestMicPermission();\n    if (!permissionGranted) return;\n\n    if (!recognition) initializeRecognition();\n    startRecognition();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}