{"ast":null,"code":"let isRecognitionRunning = false;\nlet isRestarting = false;\nlet finalTranscript = '';\nlet recognition;\nconst INTERIM_THRESHOLD = 40; // Threshold for interim transcript length before appending\nlet lastLoggedInterimTranscript = '';\nlet lastRecognitionTime = Date.now(); // Time of the last recognition result\nlet logCount = 0;\nconst TIMEOUT_DURATION = 5000; // Timeout duration for checking if recognition is stuck\n\n// Function to log messages at key points only\nfunction logWithLimit(message) {\n  const timestamp = new Date().toISOString();\n  logCount++;\n  if (logCount % 50 === 0) {\n    console.clear(); // Clear the console every 50 logs to avoid clutter\n  }\n  console.log(`[${timestamp}] ${message}`);\n}\nfunction checkRecognitionStatus() {\n  if (Date.now() - lastRecognitionTime > TIMEOUT_DURATION) {\n    logWithLimit('Recognition appears to be stuck. Restarting...');\n    restartRecognition();\n  }\n}\nfunction restartRecognition() {\n  if (isRecognitionRunning && recognition) {\n    recognition.stop();\n  }\n  isRestarting = true;\n  setTimeout(() => {\n    if (isRestarting) {\n      startRecognition();\n    }\n  }, 1000);\n}\n\n// Function to request microphone permission\nasync function requestMicPermission() {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    stream.getTracks().forEach(track => track.stop()); // Stop the stream after permission is granted\n    return true;\n  } catch (error) {\n    alert('Microphone access is required for speech recognition.');\n    return false;\n  }\n}\nfunction initializeRecognition() {\n  // Check for SpeechRecognition API or webkitSpeechRecognition\n  window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  if (!window.SpeechRecognition) {\n    alert('Your browser does not support the SpeechRecognition API.');\n    return;\n  }\n  recognition = new window.SpeechRecognition();\n  recognition.continuous = true;\n  recognition.interimResults = true;\n  recognition.lang = 'en-US';\n  recognition.onresult = event => {\n    let interimTranscript = '';\n    lastRecognitionTime = Date.now();\n\n    // Iterate through results starting from event.resultIndex\n    for (let i = event.resultIndex; i < event.results.length; i++) {\n      const result = event.results[i];\n      if (result.isFinal) {\n        finalTranscript += result[0].transcript + ' ';\n        logWithLimit('Final Transcript So Far: ' + finalTranscript);\n      } else {\n        interimTranscript += result[0].transcript;\n        handleInterimTranscript(interimTranscript);\n      }\n    }\n  };\n  recognition.onerror = event => {\n    logWithLimit('Recognition Error: ' + event.error);\n    if (isRestarting) {\n      restartRecognition();\n    }\n  };\n  recognition.onend = () => {\n    logWithLimit('Recognition ended.');\n    if (isRestarting) {\n      startRecognition();\n    }\n  };\n\n  // Start recognition\n  startRecognition();\n}\nfunction handleInterimTranscript(interimTranscript) {\n  // Append interim transcript if it meets the threshold\n  if (interimTranscript.length - lastLoggedInterimTranscript.length >= INTERIM_THRESHOLD) {\n    logWithLimit('Appended Interim Transcript: ' + interimTranscript);\n    lastLoggedInterimTranscript = interimTranscript;\n  }\n}\nfunction startRecognition() {\n  if (recognition) {\n    if (isRecognitionRunning) {\n      recognition.stop();\n    }\n    isRecognitionRunning = true;\n    isRestarting = false;\n    recognition.start();\n    logWithLimit('Recognition started.');\n  } else {\n    logWithLimit('Recognition object is not initialized.');\n  }\n}\n\n// Check recognition status periodically\nsetInterval(checkRecognitionStatus, 5000);\n\n// Function to monitor recognition timeout and restart if necessary\nfunction monitorRecognitionTimeout() {\n  setInterval(() => {\n    const currentTime = Date.now();\n    if (isRecognitionRunning && currentTime - lastRecognitionTime > TIMEOUT_DURATION && !isRestarting && !recognitionIsActive()) {\n      recognition.stop();\n      setTimeout(() => {\n        if (isRecognitionRunning && !recognitionIsActive()) {\n          recognition.start();\n        }\n      }, 1000); // Restart after 1 second\n    }\n  }, TIMEOUT_DURATION); // Check for inactivity every 5 seconds\n}\n\n// Check if recognition is active to prevent multiple starts\nfunction recognitionIsActive() {\n  return isRecognitionRunning && !isRestarting;\n}\n\n// Start speech recognition function\nexport async function startSpeechRecognition() {\n  const permissionGranted = await requestMicPermission();\n  if (!permissionGranted) return;\n  if (isRecognitionRunning || isRestarting || recognitionIsActive()) {\n    return;\n  }\n  finalTranscript = ''; // Clear transcript for a new session\n  initializeRecognition();\n  try {\n    recognition.start();\n    isRecognitionRunning = true;\n    logWithLimit('Speech recognition started.');\n    lastRecognitionTime = Date.now(); // Start the recognition timer\n    monitorRecognitionTimeout(); // Start monitoring for timeouts\n  } catch (error) {\n    console.error('Error starting speech recognition:', error);\n  }\n}\n\n// Stop speech recognition function (and send transcript)\nexport function stopSpeechRecognition() {\n  if (!isRecognitionRunning) {\n    logWithLimit('Speech recognition is already stopped.');\n    return;\n  }\n  recognition.stop();\n  isRecognitionRunning = false;\n  isRestarting = false;\n  if (finalTranscript) {\n    logWithLimit('Sending final transcript to backend.');\n    processTranscript(finalTranscript);\n    finalTranscript = ''; // Clear transcript after sending\n  } else {\n    logWithLimit('No transcript to send.');\n  }\n}\n\n// Process the final transcript and send to backend\nexport const processTranscript = async transcript => {\n  try {\n    const response = await fetch('http://localhost:3001/generateNotes', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        transcript\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Server error: ${response.status}`);\n    }\n    const result = await response.json();\n    console.log('Generated notes: ' + JSON.stringify(result));\n  } catch (error) {\n    console.error('Error sending transcript to backend:', error);\n  }\n};","map":{"version":3,"names":["isRecognitionRunning","isRestarting","finalTranscript","recognition","INTERIM_THRESHOLD","lastLoggedInterimTranscript","lastRecognitionTime","Date","now","logCount","TIMEOUT_DURATION","logWithLimit","message","timestamp","toISOString","console","clear","log","checkRecognitionStatus","restartRecognition","stop","setTimeout","startRecognition","requestMicPermission","stream","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","track","error","alert","initializeRecognition","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","interimTranscript","i","resultIndex","results","length","result","isFinal","transcript","handleInterimTranscript","onerror","onend","start","setInterval","monitorRecognitionTimeout","currentTime","recognitionIsActive","startSpeechRecognition","permissionGranted","stopSpeechRecognition","processTranscript","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","json"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["let isRecognitionRunning = false;\nlet isRestarting = false;\nlet finalTranscript = ''; \nlet recognition;\nconst INTERIM_THRESHOLD = 40;  // Threshold for interim transcript length before appending\nlet lastLoggedInterimTranscript = '';  \nlet lastRecognitionTime = Date.now();  // Time of the last recognition result\nlet logCount = 0;\n\nconst TIMEOUT_DURATION = 5000;  // Timeout duration for checking if recognition is stuck\n\n// Function to log messages at key points only\nfunction logWithLimit(message) {\n    const timestamp = new Date().toISOString();\n    logCount++;\n\n    if (logCount % 50 === 0) {  \n        console.clear();  // Clear the console every 50 logs to avoid clutter\n    }\n\n    console.log(`[${timestamp}] ${message}`);\n}\nfunction checkRecognitionStatus() {\n    if (Date.now() - lastRecognitionTime > TIMEOUT_DURATION) {\n        logWithLimit('Recognition appears to be stuck. Restarting...');\n        restartRecognition();\n    }\n}\nfunction restartRecognition() {\n    if (isRecognitionRunning && recognition) {\n        recognition.stop();\n    }\n    isRestarting = true;\n    setTimeout(() => {\n        if (isRestarting) {\n            startRecognition();\n        }\n    }, 1000);\n}\n\n// Function to request microphone permission\nasync function requestMicPermission() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        stream.getTracks().forEach(track => track.stop());  // Stop the stream after permission is granted\n        return true;\n    } catch (error) {\n        alert('Microphone access is required for speech recognition.');\n        return false;\n    }\n}\nfunction initializeRecognition() {\n    // Check for SpeechRecognition API or webkitSpeechRecognition\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n\n    if (!window.SpeechRecognition) {\n        alert('Your browser does not support the SpeechRecognition API.');\n        return;\n    }\n\n    recognition = new window.SpeechRecognition();\n    recognition.continuous = true;  \n    recognition.interimResults = true;  \n    recognition.lang = 'en-US';  \n\n    recognition.onresult = (event) => {\n        let interimTranscript = '';\n        lastRecognitionTime = Date.now();  \n\n        // Iterate through results starting from event.resultIndex\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n            const result = event.results[i];\n            if (result.isFinal) {\n                finalTranscript += result[0].transcript + ' ';\n                logWithLimit('Final Transcript So Far: ' + finalTranscript);\n            } else {\n                interimTranscript += result[0].transcript;\n                handleInterimTranscript(interimTranscript);\n            }\n        }\n    };\n\n    recognition.onerror = (event) => {\n        logWithLimit('Recognition Error: ' + event.error);\n        if (isRestarting) {\n            restartRecognition();\n        }\n    };\n\n    recognition.onend = () => {\n        logWithLimit('Recognition ended.');\n        if (isRestarting) {\n            startRecognition();\n        }\n    };\n\n    // Start recognition\n    startRecognition();\n}\n\n\n\nfunction handleInterimTranscript(interimTranscript) {\n    // Append interim transcript if it meets the threshold\n    if (interimTranscript.length - lastLoggedInterimTranscript.length >= INTERIM_THRESHOLD) {\n        logWithLimit('Appended Interim Transcript: ' + interimTranscript);\n        lastLoggedInterimTranscript = interimTranscript;\n    }\n}\n\n\nfunction startRecognition() {\n    if (recognition) {\n        if (isRecognitionRunning) {\n            recognition.stop();\n        }\n        isRecognitionRunning = true;\n        isRestarting = false;\n        recognition.start();\n        logWithLimit('Recognition started.');\n    } else {\n        logWithLimit('Recognition object is not initialized.');\n    }\n}\n\n\n// Check recognition status periodically\nsetInterval(checkRecognitionStatus, 5000);\n\n// Function to monitor recognition timeout and restart if necessary\nfunction monitorRecognitionTimeout() {\n    setInterval(() => {\n        const currentTime = Date.now();\n        if (isRecognitionRunning && (currentTime - lastRecognitionTime > TIMEOUT_DURATION) && !isRestarting && !recognitionIsActive()) {\n            recognition.stop();\n            setTimeout(() => {\n                if (isRecognitionRunning && !recognitionIsActive()) {\n                    recognition.start();\n                }\n            }, 1000);  // Restart after 1 second\n        }\n    }, TIMEOUT_DURATION);  // Check for inactivity every 5 seconds\n}\n\n// Check if recognition is active to prevent multiple starts\nfunction recognitionIsActive() {\n    return isRecognitionRunning && !isRestarting;\n}\n\n// Start speech recognition function\nexport async function startSpeechRecognition() {\n    const permissionGranted = await requestMicPermission();  \n    if (!permissionGranted) return;\n\n    if (isRecognitionRunning || isRestarting || recognitionIsActive()) {\n        return;\n    }\n\n    finalTranscript = '';  // Clear transcript for a new session\n    initializeRecognition();  \n    try {\n        recognition.start();  \n        isRecognitionRunning = true;  \n        logWithLimit('Speech recognition started.');\n        lastRecognitionTime = Date.now();  // Start the recognition timer\n        monitorRecognitionTimeout();  // Start monitoring for timeouts\n    } catch (error) {\n        console.error('Error starting speech recognition:', error);\n    }\n}\n\n// Stop speech recognition function (and send transcript)\nexport function stopSpeechRecognition() {\n    if (!isRecognitionRunning) {\n        logWithLimit('Speech recognition is already stopped.');\n        return;\n    }\n    recognition.stop();  \n    isRecognitionRunning = false;  \n    isRestarting = false;\n\n    if (finalTranscript) {\n        logWithLimit('Sending final transcript to backend.');\n        processTranscript(finalTranscript); \n        finalTranscript = '';  // Clear transcript after sending\n    } else {\n        logWithLimit('No transcript to send.');\n    }\n}\n\n// Process the final transcript and send to backend\nexport const processTranscript = async (transcript) => {\n    try {\n        const response = await fetch('http://localhost:3001/generateNotes', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ transcript }),  \n        });\n\n        if (!response.ok) {\n            throw new Error(`Server error: ${response.status}`);\n        }\n\n        const result = await response.json();\n        console.log('Generated notes: ' + JSON.stringify(result));  \n    } catch (error) {\n        console.error('Error sending transcript to backend:', error);  \n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}