{"ast":null,"code":"var _jsxFileName = \"/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/components/NotesUI.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './NotesUI.css';\nimport { jsPDF } from \"jspdf\";\nimport html2canvas from 'html2canvas';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotesUI = ({\n  notes = {}\n}) => {\n  _s();\n  const [editableNotes, setEditableNotes] = useState({});\n  let debounceTimer; // Define debounceTimer in the component scope\n\n  // Update editableNotes when notes prop changes\n  useEffect(() => {\n    setEditableNotes(notes);\n  }, [notes]);\n\n  // Handle content changes on note edit\n  const handleContentChange = (topic, index, event) => {\n    const updatedNotes = {\n      ...editableNotes\n    };\n    updatedNotes[topic][index] = event.target.innerText;\n\n    // Debounce state update\n    clearTimeout(debounceTimer); // Clear any existing timers before setting a new one\n    debounceTimer = setTimeout(() => {\n      setEditableNotes(updatedNotes);\n      console.log(\"Notes updated:\", updatedNotes);\n    }, 300); // 300ms debounce time\n  };\n\n  // Render the notes\n  const renderNotes = () => {\n    if (Object.keys(editableNotes).length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No notes available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 20\n      }, this);\n    }\n    return Object.entries(editableNotes).map(([topic, notesList]) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"topic\",\n        children: topic\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), Array.isArray(notesList) ? notesList.map((note, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"note\",\n        contentEditable: true,\n        suppressContentEditableWarning: true,\n        onInput: event => handleContentChange(topic, index, event),\n        children: note\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"note\",\n        contentEditable: true,\n        suppressContentEditableWarning: true,\n        onInput: event => handleContentChange(topic, 0, event),\n        children: notesList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this)]\n    }, topic, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this));\n  };\n\n  // Download notes as a PDF\n  const downloadNotes = () => {\n    const doc = new jsPDF();\n    const title = prompt(\"Enter a title for your notes:\", \"Meeting Notes\");\n    if (!title) return;\n    const notesContainer = document.getElementById('notes-container');\n    html2canvas(notesContainer, {\n      scale: 2\n    }).then(canvas => {\n      const imgData = canvas.toDataURL('image/png');\n      const pdf = new jsPDF('p', 'mm', 'a4');\n      const imgWidth = 210;\n      const pageHeight = 297;\n      const imgHeight = canvas.height * imgWidth / canvas.width;\n      let heightLeft = imgHeight;\n      let position = 0;\n      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);\n      heightLeft -= pageHeight;\n      while (heightLeft >= 0) {\n        position = heightLeft - imgHeight;\n        pdf.addPage();\n        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);\n        heightLeft -= pageHeight;\n      }\n      pdf.save(`${title}.pdf`);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"notes-container\",\n      children: renderNotes()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"bottom-right-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"download-btn\",\n        onClick: downloadNotes,\n        children: \"Download Notes as PDF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"instruction-text\",\n        children: \"Click any note to edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n};\n_s(NotesUI, \"i7d7zHCrP37BAZYHuMuTjpXHV0M=\");\n_c = NotesUI;\nexport default NotesUI;\nvar _c;\n$RefreshReg$(_c, \"NotesUI\");","map":{"version":3,"names":["React","useState","useEffect","jsPDF","html2canvas","jsxDEV","_jsxDEV","NotesUI","notes","_s","editableNotes","setEditableNotes","debounceTimer","handleContentChange","topic","index","event","updatedNotes","target","innerText","clearTimeout","setTimeout","console","log","renderNotes","Object","keys","length","children","fileName","_jsxFileName","lineNumber","columnNumber","entries","map","notesList","className","Array","isArray","note","contentEditable","suppressContentEditableWarning","onInput","downloadNotes","doc","title","prompt","notesContainer","document","getElementById","scale","then","canvas","imgData","toDataURL","pdf","imgWidth","pageHeight","imgHeight","height","width","heightLeft","position","addImage","addPage","save","id","onClick","_c","$RefreshReg$"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/components/NotesUI.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './NotesUI.css';\nimport { jsPDF } from \"jspdf\";\nimport html2canvas from 'html2canvas';\n\nconst NotesUI = ({ notes = {} }) => {\n    const [editableNotes, setEditableNotes] = useState({});\n    let debounceTimer; // Define debounceTimer in the component scope\n\n    // Update editableNotes when notes prop changes\n    useEffect(() => {\n        setEditableNotes(notes);\n    }, [notes]);\n\n    // Handle content changes on note edit\n    const handleContentChange = (topic, index, event) => {\n        const updatedNotes = { ...editableNotes };\n        updatedNotes[topic][index] = event.target.innerText;\n\n        // Debounce state update\n        clearTimeout(debounceTimer); // Clear any existing timers before setting a new one\n        debounceTimer = setTimeout(() => {\n            setEditableNotes(updatedNotes);\n            console.log(\"Notes updated:\", updatedNotes);\n        }, 300);  // 300ms debounce time\n    };\n\n    // Render the notes\n    const renderNotes = () => {\n        if (Object.keys(editableNotes).length === 0) {\n            return <div>No notes available</div>;\n        }\n\n        return Object.entries(editableNotes).map(([topic, notesList]) => (\n            <div key={topic}>\n                <div className=\"topic\">{topic}</div>\n                {Array.isArray(notesList) ? (\n                    notesList.map((note, index) => (\n                        <div\n                            key={index}\n                            className=\"note\"\n                            contentEditable={true}\n                            suppressContentEditableWarning={true}\n                            onInput={(event) => handleContentChange(topic, index, event)}\n                        >\n                            {note}\n                        </div>\n                    ))\n                ) : (\n                    <div\n                        className=\"note\"\n                        contentEditable={true}\n                        suppressContentEditableWarning={true}\n                        onInput={(event) => handleContentChange(topic, 0, event)}\n                    >\n                        {notesList}\n                    </div>\n                )}\n            </div>\n        ));\n    };\n\n    // Download notes as a PDF\n    const downloadNotes = () => {\n        const doc = new jsPDF();\n        const title = prompt(\"Enter a title for your notes:\", \"Meeting Notes\");\n        if (!title) return;\n\n        const notesContainer = document.getElementById('notes-container');\n\n        html2canvas(notesContainer, { scale: 2 }).then(canvas => {\n            const imgData = canvas.toDataURL('image/png');\n            const pdf = new jsPDF('p', 'mm', 'a4');\n            \n            const imgWidth = 210;\n            const pageHeight = 297;\n            const imgHeight = canvas.height * imgWidth / canvas.width;\n            let heightLeft = imgHeight;\n\n            let position = 0;\n\n            pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);\n            heightLeft -= pageHeight;\n\n            while (heightLeft >= 0) {\n                position = heightLeft - imgHeight;\n                pdf.addPage();\n                pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);\n                heightLeft -= pageHeight;\n            }\n\n            pdf.save(`${title}.pdf`);\n        });\n    };\n\n    return (\n        <div>\n            <div id=\"notes-container\">\n                {renderNotes()}\n            </div>\n            <div id=\"bottom-right-container\">\n                <button className=\"download-btn\" onClick={downloadNotes}>Download Notes as PDF</button>\n                <span className=\"instruction-text\">Click any note to edit</span>\n            </div>\n        </div>\n    );\n};\n\nexport default NotesUI;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}