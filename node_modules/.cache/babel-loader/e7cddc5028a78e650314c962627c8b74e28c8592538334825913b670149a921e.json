{"ast":null,"code":"let isRecognitionRunning = false;\nlet isRestarting = false;\nlet finalTranscript = '';\nlet recognition;\nconst INTERIM_THRESHOLD = 40; // Threshold for interim transcript length before appending\nlet lastLoggedInterimTranscript = '';\nlet lastRecognitionTime = Date.now(); // Time of the last recognition result\nlet logCount = 0;\nconst TIMEOUT_DURATION = 5000; // Timeout duration for checking if recognition is stuck\n\n// Function to log messages at key points only\nfunction logWithLimit(message) {\n  const timestamp = new Date().toISOString();\n  logCount++;\n  if (logCount % 50 === 0) {\n    console.clear(); // Clear the console every 50 logs to avoid clutter\n  }\n  console.log(`[${timestamp}] ${message}`);\n}\n\n// Function to request microphone permission\nasync function requestMicPermission() {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    stream.getTracks().forEach(track => track.stop()); // Stop the stream after permission is granted\n    return true;\n  } catch (error) {\n    alert('Microphone access is required for speech recognition.');\n    return false;\n  }\n}\nfunction initializeRecognition() {\n  // Check for SpeechRecognition API or webkitSpeechRecognition\n  window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  if (!window.SpeechRecognition) {\n    alert('Your browser does not support the SpeechRecognition API.');\n    return;\n  }\n  recognition = new window.SpeechRecognition();\n  recognition.continuous = true;\n  recognition.interimResults = true;\n  recognition.lang = 'en-US';\n  recognition.onresult = event => {\n    let interimTranscript = '';\n    lastRecognitionTime = Date.now();\n\n    // Iterate through results starting from event.resultIndex\n    for (let i = event.resultIndex; i < event.results.length; i++) {\n      const result = event.results[i];\n      if (result.isFinal) {\n        finalTranscript += result[0].transcript + ' '; // Add a space after each final result\n        logWithLimit('Final Transcript So Far: ' + finalTranscript); // Log when the final transcript is updated\n      } else {\n        interimTranscript += result[0].transcript;\n      }\n    }\n\n    // Only append interim when it's significantly different, has length, and not redundant\n    if (interimTranscript.length >= INTERIM_THRESHOLD && interimTranscript !== lastLoggedInterimTranscript) {\n      logWithLimit('Appended Interim Transcript: ' + interimTranscript); // Log when interim transcript is appended\n      lastLoggedInterimTranscript = interimTranscript; // Update the last logged interim transcript\n    }\n  };\n  function handleInterimTranscript(interimTranscript) {\n    if (interimTranscript.length >= INTERIM_THRESHOLD) {\n      logWithLimit('Interim Transcript: ' + interimTranscript);\n      lastLoggedInterimTranscript = interimTranscript;\n    }\n  }\n  recognition.onend = () => {\n    if (isRecognitionRunning && !isRestarting) {\n      isRestarting = true;\n      setTimeout(() => {\n        if (isRecognitionRunning && !recognitionIsActive()) {\n          try {\n            recognition.start();\n            isRestarting = false;\n          } catch (error) {\n            console.error('Error restarting recognition:', error);\n          }\n        }\n      }, 1000);\n    }\n  };\n  recognition.onerror = event => {\n    if (event.error === 'no-speech') {\n      setTimeout(() => {\n        if (!isRestarting && !recognitionIsActive()) {\n          startSpeechRecognition();\n        }\n      }, 1000);\n    }\n    if (event.error === 'audio-capture') {\n      alert('Please check your microphone permissions.');\n    }\n    if (event.error === 'aborted' || event.error === 'network') {\n      if (isRecognitionRunning && !isRestarting) {\n        isRestarting = true;\n        setTimeout(() => {\n          if (isRecognitionRunning && !recognitionIsActive()) {\n            try {\n              recognition.start();\n              isRestarting = false;\n            } catch (error) {\n              console.error('Error restarting recognition after error:', error);\n            }\n          }\n        }, 1000);\n      }\n    }\n  };\n}\n\n// Function to monitor recognition timeout and restart if necessary\nfunction monitorRecognitionTimeout() {\n  setInterval(() => {\n    const currentTime = Date.now();\n    if (isRecognitionRunning && currentTime - lastRecognitionTime > TIMEOUT_DURATION && !isRestarting && !recognitionIsActive()) {\n      recognition.stop();\n      setTimeout(() => {\n        if (isRecognitionRunning && !recognitionIsActive()) {\n          recognition.start();\n        }\n      }, 1000); // Restart after 1 second\n    }\n  }, TIMEOUT_DURATION); // Check for inactivity every 5 seconds\n}\n\n// Check if recognition is active to prevent multiple starts\nfunction recognitionIsActive() {\n  return isRecognitionRunning && !isRestarting;\n}\n\n// Start speech recognition function\nexport async function startSpeechRecognition() {\n  const permissionGranted = await requestMicPermission();\n  if (!permissionGranted) return;\n  if (isRecognitionRunning || isRestarting || recognitionIsActive()) {\n    return;\n  }\n  finalTranscript = ''; // Clear transcript for a new session\n  initializeRecognition();\n  try {\n    recognition.start();\n    isRecognitionRunning = true;\n    logWithLimit('Speech recognition started.');\n    lastRecognitionTime = Date.now(); // Start the recognition timer\n    monitorRecognitionTimeout(); // Start monitoring for timeouts\n  } catch (error) {\n    console.error('Error starting speech recognition:', error);\n  }\n}\n\n// Stop speech recognition function (and send transcript)\nexport function stopSpeechRecognition() {\n  if (!isRecognitionRunning) {\n    logWithLimit('Speech recognition is already stopped.');\n    return;\n  }\n  recognition.stop();\n  isRecognitionRunning = false;\n  isRestarting = false;\n  if (finalTranscript) {\n    logWithLimit('Sending final transcript to backend.');\n    processTranscript(finalTranscript);\n    finalTranscript = ''; // Clear transcript after sending\n  } else {\n    logWithLimit('No transcript to send.');\n  }\n}\n\n// Process the final transcript and send to backend\nexport const processTranscript = async transcript => {\n  try {\n    const response = await fetch('http://localhost:3001/generateNotes', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        transcript\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Server error: ${response.status}`);\n    }\n    const result = await response.json();\n    console.log('Generated notes: ' + JSON.stringify(result));\n  } catch (error) {\n    console.error('Error sending transcript to backend:', error);\n  }\n};","map":{"version":3,"names":["isRecognitionRunning","isRestarting","finalTranscript","recognition","INTERIM_THRESHOLD","lastLoggedInterimTranscript","lastRecognitionTime","Date","now","logCount","TIMEOUT_DURATION","logWithLimit","message","timestamp","toISOString","console","clear","log","requestMicPermission","stream","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","track","stop","error","alert","initializeRecognition","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","interimTranscript","i","resultIndex","results","length","result","isFinal","transcript","handleInterimTranscript","onend","setTimeout","recognitionIsActive","start","onerror","startSpeechRecognition","monitorRecognitionTimeout","setInterval","currentTime","permissionGranted","stopSpeechRecognition","processTranscript","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","json"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["let isRecognitionRunning = false;\nlet isRestarting = false;\nlet finalTranscript = ''; \nlet recognition;\nconst INTERIM_THRESHOLD = 40;  // Threshold for interim transcript length before appending\nlet lastLoggedInterimTranscript = '';  \nlet lastRecognitionTime = Date.now();  // Time of the last recognition result\nlet logCount = 0;\n\nconst TIMEOUT_DURATION = 5000;  // Timeout duration for checking if recognition is stuck\n\n// Function to log messages at key points only\nfunction logWithLimit(message) {\n    const timestamp = new Date().toISOString();\n    logCount++;\n\n    if (logCount % 50 === 0) {  \n        console.clear();  // Clear the console every 50 logs to avoid clutter\n    }\n\n    console.log(`[${timestamp}] ${message}`);\n}\n\n// Function to request microphone permission\nasync function requestMicPermission() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        stream.getTracks().forEach(track => track.stop());  // Stop the stream after permission is granted\n        return true;\n    } catch (error) {\n        alert('Microphone access is required for speech recognition.');\n        return false;\n    }\n}\n\nfunction initializeRecognition() {\n    // Check for SpeechRecognition API or webkitSpeechRecognition\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n\n    if (!window.SpeechRecognition) {\n        alert('Your browser does not support the SpeechRecognition API.');\n        return;\n    }\n\n    recognition = new window.SpeechRecognition();\n    recognition.continuous = true;  \n    recognition.interimResults = true;  \n    recognition.lang = 'en-US';  \n\n    recognition.onresult = (event) => {\n        let interimTranscript = '';\n        lastRecognitionTime = Date.now();  \n\n        // Iterate through results starting from event.resultIndex\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n            const result = event.results[i];\n            if (result.isFinal) {\n                finalTranscript += result[0].transcript + ' ';  // Add a space after each final result\n                logWithLimit('Final Transcript So Far: ' + finalTranscript);  // Log when the final transcript is updated\n            } else {\n                interimTranscript += result[0].transcript;\n            }\n        }\n\n        // Only append interim when it's significantly different, has length, and not redundant\n        if (interimTranscript.length >= INTERIM_THRESHOLD && interimTranscript !== lastLoggedInterimTranscript) {\n            logWithLimit('Appended Interim Transcript: ' + interimTranscript);  // Log when interim transcript is appended\n            lastLoggedInterimTranscript = interimTranscript;  // Update the last logged interim transcript\n        }\n    };\n\n    function handleInterimTranscript(interimTranscript) {\n        if (interimTranscript.length >= INTERIM_THRESHOLD) {\n            logWithLimit('Interim Transcript: ' + interimTranscript);\n            lastLoggedInterimTranscript = interimTranscript;\n        }\n    }\n\n    \n    recognition.onend = () => {\n        if (isRecognitionRunning && !isRestarting) {\n            isRestarting = true;\n            setTimeout(() => {\n                if (isRecognitionRunning && !recognitionIsActive()) {\n                    try {\n                        recognition.start();  \n                        isRestarting = false;\n                    } catch (error) {\n                        console.error('Error restarting recognition:', error);\n                    }\n                }\n            }, 1000);\n        }\n    };\n\n    recognition.onerror = (event) => {\n        if (event.error === 'no-speech') {\n            setTimeout(() => {\n                if (!isRestarting && !recognitionIsActive()) {\n                    startSpeechRecognition();\n                }\n            }, 1000);\n        }\n\n        if (event.error === 'audio-capture') {\n            alert('Please check your microphone permissions.');\n        }\n\n        if (event.error === 'aborted' || event.error === 'network') {\n            if (isRecognitionRunning && !isRestarting) {\n                isRestarting = true;\n                setTimeout(() => {\n                    if (isRecognitionRunning && !recognitionIsActive()) {\n                        try {\n                            recognition.start();\n                            isRestarting = false;\n                        } catch (error) {\n                            console.error('Error restarting recognition after error:', error);\n                        }\n                    }\n                }, 1000);\n            }\n        }\n    };\n}\n\n// Function to monitor recognition timeout and restart if necessary\nfunction monitorRecognitionTimeout() {\n    setInterval(() => {\n        const currentTime = Date.now();\n        if (isRecognitionRunning && (currentTime - lastRecognitionTime > TIMEOUT_DURATION) && !isRestarting && !recognitionIsActive()) {\n            recognition.stop();\n            setTimeout(() => {\n                if (isRecognitionRunning && !recognitionIsActive()) {\n                    recognition.start();\n                }\n            }, 1000);  // Restart after 1 second\n        }\n    }, TIMEOUT_DURATION);  // Check for inactivity every 5 seconds\n}\n\n// Check if recognition is active to prevent multiple starts\nfunction recognitionIsActive() {\n    return isRecognitionRunning && !isRestarting;\n}\n\n// Start speech recognition function\nexport async function startSpeechRecognition() {\n    const permissionGranted = await requestMicPermission();  \n    if (!permissionGranted) return;\n\n    if (isRecognitionRunning || isRestarting || recognitionIsActive()) {\n        return;\n    }\n\n    finalTranscript = '';  // Clear transcript for a new session\n    initializeRecognition();  \n    try {\n        recognition.start();  \n        isRecognitionRunning = true;  \n        logWithLimit('Speech recognition started.');\n        lastRecognitionTime = Date.now();  // Start the recognition timer\n        monitorRecognitionTimeout();  // Start monitoring for timeouts\n    } catch (error) {\n        console.error('Error starting speech recognition:', error);\n    }\n}\n\n// Stop speech recognition function (and send transcript)\nexport function stopSpeechRecognition() {\n    if (!isRecognitionRunning) {\n        logWithLimit('Speech recognition is already stopped.');\n        return;\n    }\n    recognition.stop();  \n    isRecognitionRunning = false;  \n    isRestarting = false;\n\n    if (finalTranscript) {\n        logWithLimit('Sending final transcript to backend.');\n        processTranscript(finalTranscript); \n        finalTranscript = '';  // Clear transcript after sending\n    } else {\n        logWithLimit('No transcript to send.');\n    }\n}\n\n// Process the final transcript and send to backend\nexport const processTranscript = async (transcript) => {\n    try {\n        const response = await fetch('http://localhost:3001/generateNotes', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ transcript }),  \n        });\n\n        if (!response.ok) {\n            throw new Error(`Server error: ${response.status}`);\n        }\n\n        const result = await response.json();\n        console.log('Generated notes: ' + JSON.stringify(result));  \n    } catch (error) {\n        console.error('Error sending transcript to backend:', error);  \n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}