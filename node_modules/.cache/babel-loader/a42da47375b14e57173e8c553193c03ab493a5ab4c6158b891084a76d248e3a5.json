{"ast":null,"code":"let isRecognitionRunning = false;\nlet isRestarting = false;\nlet finalTranscript = '';\nlet recognition;\nlet isRecognitionInitialized = false;\nconst INTERIM_THRESHOLD = 40; // Threshold for interim transcript length before appending\nlet lastLoggedInterimTranscript = '';\nlet lastRecognitionTime = Date.now(); // Time of the last recognition result\nlet logCount = 0;\nconst TIMEOUT_DURATION = 5000; // Timeout duration for checking if recognition is stuck\n\n// Function to log messages at key points only\nfunction logWithLimit(message) {\n  const timestamp = new Date().toISOString();\n  logCount++;\n  if (logCount % 50 === 0) {\n    console.clear(); // Clear the console every 50 logs to avoid clutter\n  }\n  console.log(`[${timestamp}] ${message}`);\n}\nfunction checkRecognitionStatus() {\n  if (Date.now() - lastRecognitionTime > TIMEOUT_DURATION) {\n    logWithLimit('Recognition appears to be stuck. Restarting...');\n    restartRecognition();\n  }\n}\nfunction restartRecognition() {\n  if (isRecognitionRunning && recognition) {\n    recognition.stop();\n  }\n  isRestarting = true;\n  setTimeout(() => {\n    if (isRestarting) {\n      startRecognition();\n    }\n  }, 1000);\n}\n\n// Function to request microphone permission\nasync function requestMicPermission() {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    stream.getTracks().forEach(track => track.stop()); // Stop the stream after permission is granted\n    return true;\n  } catch (error) {\n    alert('Microphone access is required for speech recognition.');\n    return false;\n  }\n}\nfunction initializeRecognition() {\n  logWithLimit('Initializing recognition...');\n  if (isRecognitionInitialized) {\n    logWithLimit('Recognition already initialized.');\n    return;\n  }\n  window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  if (!window.SpeechRecognition) {\n    alert('Your browser does not support the SpeechRecognition API.');\n    return;\n  }\n  recognition = new window.SpeechRecognition();\n  recognition.continuous = true;\n  recognition.interimResults = true;\n  recognition.lang = 'en-US';\n  recognition.onresult = event => {\n    let interimTranscript = '';\n    lastRecognitionTime = Date.now();\n    for (let i = event.resultIndex; i < event.results.length; i++) {\n      const result = event.results[i];\n      if (result.isFinal) {\n        finalTranscript += result[0].transcript + ' ';\n        logWithLimit('Final Transcript So Far: ' + finalTranscript);\n      } else {\n        interimTranscript += result[0].transcript;\n        handleInterimTranscript(interimTranscript);\n      }\n    }\n  };\n  recognition.onerror = event => {\n    logWithLimit('Recognition Error: ' + event.error);\n  };\n  recognition.onend = () => {\n    logWithLimit('Recognition ended.');\n  };\n  isRecognitionInitialized = true;\n  logWithLimit('Recognition initialization complete.');\n}\nfunction startRecognition() {\n  logWithLimit('Starting recognition...');\n  if (!isRecognitionInitialized) {\n    logWithLimit('Cannot start recognition; initialization is not complete.');\n    return;\n  }\n  if (recognition) {\n    if (isRecognitionRunning) {\n      logWithLimit('Stopping recognition before restarting.');\n      recognition.stop();\n    }\n    isRecognitionRunning = true;\n    recognition.start();\n  } else {\n    logWithLimit('Recognition object is not initialized.');\n  }\n}","map":{"version":3,"names":["isRecognitionRunning","isRestarting","finalTranscript","recognition","isRecognitionInitialized","INTERIM_THRESHOLD","lastLoggedInterimTranscript","lastRecognitionTime","Date","now","logCount","TIMEOUT_DURATION","logWithLimit","message","timestamp","toISOString","console","clear","log","checkRecognitionStatus","restartRecognition","stop","setTimeout","startRecognition","requestMicPermission","stream","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","track","error","alert","initializeRecognition","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","interimTranscript","i","resultIndex","results","length","result","isFinal","transcript","handleInterimTranscript","onerror","onend","start"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["let isRecognitionRunning = false;\nlet isRestarting = false;\nlet finalTranscript = ''; \nlet recognition;\nlet isRecognitionInitialized = false;\nconst INTERIM_THRESHOLD = 40;  // Threshold for interim transcript length before appending\nlet lastLoggedInterimTranscript = '';  \nlet lastRecognitionTime = Date.now();  // Time of the last recognition result\nlet logCount = 0;\nconst TIMEOUT_DURATION = 5000;  // Timeout duration for checking if recognition is stuck\n\n// Function to log messages at key points only\nfunction logWithLimit(message) {\n    const timestamp = new Date().toISOString();\n    logCount++;\n\n    if (logCount % 50 === 0) {  \n        console.clear();  // Clear the console every 50 logs to avoid clutter\n    }\n\n    console.log(`[${timestamp}] ${message}`);\n}\n\nfunction checkRecognitionStatus() {\n    if (Date.now() - lastRecognitionTime > TIMEOUT_DURATION) {\n        logWithLimit('Recognition appears to be stuck. Restarting...');\n        restartRecognition();\n    }\n}\n\nfunction restartRecognition() {\n    if (isRecognitionRunning && recognition) {\n        recognition.stop();\n    }\n    isRestarting = true;\n    setTimeout(() => {\n        if (isRestarting) {\n            startRecognition();\n        }\n    }, 1000);\n}\n\n// Function to request microphone permission\nasync function requestMicPermission() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        stream.getTracks().forEach(track => track.stop());  // Stop the stream after permission is granted\n        return true;\n    } catch (error) {\n        alert('Microphone access is required for speech recognition.');\n        return false;\n    }\n}\n\nfunction initializeRecognition() {\n    logWithLimit('Initializing recognition...');\n    \n    if (isRecognitionInitialized) {\n        logWithLimit('Recognition already initialized.');\n        return;\n    }\n\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n\n    if (!window.SpeechRecognition) {\n        alert('Your browser does not support the SpeechRecognition API.');\n        return;\n    }\n\n    recognition = new window.SpeechRecognition();\n    recognition.continuous = true;\n    recognition.interimResults = true;\n    recognition.lang = 'en-US';\n\n    recognition.onresult = (event) => {\n        let interimTranscript = '';\n        lastRecognitionTime = Date.now();\n\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n            const result = event.results[i];\n            if (result.isFinal) {\n                finalTranscript += result[0].transcript + ' ';\n                logWithLimit('Final Transcript So Far: ' + finalTranscript);\n            } else {\n                interimTranscript += result[0].transcript;\n                handleInterimTranscript(interimTranscript);\n            }\n        }\n    };\n\n    recognition.onerror = (event) => {\n        logWithLimit('Recognition Error: ' + event.error);\n    };\n\n    recognition.onend = () => {\n        logWithLimit('Recognition ended.');\n    };\n\n    isRecognitionInitialized = true;\n    logWithLimit('Recognition initialization complete.');\n}\n\nfunction startRecognition() {\n    logWithLimit('Starting recognition...');\n    if (!isRecognitionInitialized) {\n        logWithLimit('Cannot start recognition; initialization is not complete.');\n        return;\n    }\n    if (recognition) {\n        if (isRecognitionRunning) {\n            logWithLimit('Stopping recognition before restarting.');\n            recognition.stop();\n        }\n        isRecognitionRunning = true;\n        recognition.start();\n    } else {\n        logWithLimit('Recognition object is not initialized.');\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}