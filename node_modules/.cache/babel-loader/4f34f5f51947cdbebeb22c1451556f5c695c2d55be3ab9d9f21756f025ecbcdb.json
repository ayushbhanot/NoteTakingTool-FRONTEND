{"ast":null,"code":"let mediaRecorder=null;// Declare globally\n// Function to check MediaRecorder support\nfunction checkMediaRecorderSupport(){if(!window.MediaRecorder){console.error('MediaRecorder API not supported.');alert('Your browser does not support recording features.');return false;}return true;}// Check for MediaRecorder support early\nif(!checkMediaRecorderSupport()){alert('Your browser does not support the necessary recording features.');}// Start recording function\nexport async function startRecording(){console.log('Attempting to start recording...');try{// Capture both microphone (and system audio if routed via a virtual device)\nconst micStream=await navigator.mediaDevices.getUserMedia({audio:{echoCancellation:false,noiseSuppression:false,sampleRate:44100}});console.log('Microphone stream acquired:',micStream);const combinedStream=micStream;// Simplified to capture mic audio (combine with system audio through external setup if needed)\nconsole.log('Combined stream:',combinedStream);if(combinedStream.getAudioTracks().length===0){throw new Error('Combined stream has no audio tracks.');}// MIME type fallback options for various browsers\nlet options={mimeType:'audio/webm; codecs=opus'};if(!MediaRecorder.isTypeSupported(options.mimeType)){options={mimeType:'audio/webm'};}if(!MediaRecorder.isTypeSupported(options.mimeType)){options={mimeType:'audio/mp4'};}if(!MediaRecorder.isTypeSupported(options.mimeType)){options={};// Fallback to default if none is supported\n}// Initialize MediaRecorder\nmediaRecorder=new MediaRecorder(combinedStream,options);console.log('MediaRecorder initialized:',mediaRecorder);let audioChunks=[];mediaRecorder.ondataavailable=event=>{if(event.data.size>0){audioChunks.push(event.data);console.log('Audio chunk available:',event.data);}};mediaRecorder.onstart=()=>{console.log('Recording started.');};mediaRecorder.onstop=()=>{console.log('Recording stopped.');const audioBlob=new Blob(audioChunks,{type:options.mimeType||'audio/webm'});console.log('Audio Blob size:',audioBlob.size);if(audioBlob.size>0){processAudioChunk(audioBlob);// Send audio to backend\n}else{console.error('Audio Blob is empty, not sending to backend');}};mediaRecorder.onerror=event=>{console.error('MediaRecorder error:',event.error);};// Start recording\nmediaRecorder.start();}catch(error){console.error('Error capturing audio:',error);}}// Stop recording function\nexport function stopRecording(){if(mediaRecorder){if(mediaRecorder.state!=='inactive'){console.log('Stopping recording...');mediaRecorder.stop();}else{console.error('MediaRecorder is inactive.');}}else{console.error('No MediaRecorder instance found.');}}// Process audio and send to backend\nexport const processAudioChunk=async audioBlob=>{if(!(audioBlob instanceof Blob)){console.error('audioBlob is not a Blob instance.');return;}const formData=new FormData();formData.append('audio',audioBlob,'audio.webm');// Adjust to match backend expectations\ntry{const response=await fetch('http://localhost:3001/transcribe',{method:'POST',body:formData});if(!response.ok){throw new Error(`Server error: ${response.status}`);}const result=await response.json();console.log('Transcription result:',result);}catch(error){console.error('Error sending audio to backend:',error);}};// Additional browser support checks\nif(!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia){alert('Your browser does not support the necessary APIs for recording.');}","map":{"version":3,"names":["mediaRecorder","checkMediaRecorderSupport","window","MediaRecorder","console","error","alert","startRecording","log","micStream","navigator","mediaDevices","getUserMedia","audio","echoCancellation","noiseSuppression","sampleRate","combinedStream","getAudioTracks","length","Error","options","mimeType","isTypeSupported","audioChunks","ondataavailable","event","data","size","push","onstart","onstop","audioBlob","Blob","type","processAudioChunk","onerror","start","stopRecording","state","stop","formData","FormData","append","response","fetch","method","body","ok","status","result","json"],"sources":["/Users/ayushbhanot/Documents/Coding/Riipen/AITranscriptionApp/aitranscriptionapp/src/services/audioRecording.js"],"sourcesContent":["let mediaRecorder = null; // Declare globally\n\n// Function to check MediaRecorder support\nfunction checkMediaRecorderSupport() {\n    if (!window.MediaRecorder) {\n        console.error('MediaRecorder API not supported.');\n        alert('Your browser does not support recording features.');\n        return false;\n    }\n    return true;\n}\n\n// Check for MediaRecorder support early\nif (!checkMediaRecorderSupport()) {\n    alert('Your browser does not support the necessary recording features.');\n}\n\n// Start recording function\nexport async function startRecording() {\n    console.log('Attempting to start recording...');\n    try {\n        // Capture both microphone (and system audio if routed via a virtual device)\n        const micStream = await navigator.mediaDevices.getUserMedia({\n            audio: {\n                echoCancellation: false,\n                noiseSuppression: false,\n                sampleRate: 44100\n            }\n        });\n        console.log('Microphone stream acquired:', micStream);\n\n        const combinedStream = micStream; // Simplified to capture mic audio (combine with system audio through external setup if needed)\n        console.log('Combined stream:', combinedStream);\n\n        if (combinedStream.getAudioTracks().length === 0) {\n            throw new Error('Combined stream has no audio tracks.');\n        }\n\n        // MIME type fallback options for various browsers\n        let options = { mimeType: 'audio/webm; codecs=opus' };\n        if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n            options = { mimeType: 'audio/webm' };\n        }\n       if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n            options = { mimeType: 'audio/mp4' };\n        }\n        if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n            options = {}; // Fallback to default if none is supported\n        }\n\n        // Initialize MediaRecorder\n        mediaRecorder = new MediaRecorder(combinedStream, options);\n        console.log('MediaRecorder initialized:', mediaRecorder);\n\n        let audioChunks = [];\n        mediaRecorder.ondataavailable = (event) => {\n            if (event.data.size > 0) {\n                audioChunks.push(event.data);\n                console.log('Audio chunk available:', event.data);\n            }\n        };\n\n        mediaRecorder.onstart = () => {\n            console.log('Recording started.');\n        };\n\n        mediaRecorder.onstop = () => {\n            console.log('Recording stopped.');\n            const audioBlob = new Blob(audioChunks, { type: options.mimeType || 'audio/webm' });\n            console.log('Audio Blob size:', audioBlob.size);\n            if (audioBlob.size > 0) {\n                processAudioChunk(audioBlob); // Send audio to backend\n            } else {\n                console.error('Audio Blob is empty, not sending to backend');\n            }\n        };\n\n        mediaRecorder.onerror = (event) => {\n            console.error('MediaRecorder error:', event.error);\n        };\n\n        // Start recording\n        mediaRecorder.start();\n    } catch (error) {\n        console.error('Error capturing audio:', error);\n    }\n}\n\n// Stop recording function\nexport function stopRecording() {\n    if (mediaRecorder) {\n        if (mediaRecorder.state !== 'inactive') {\n            console.log('Stopping recording...');\n            mediaRecorder.stop();\n        } else {\n            console.error('MediaRecorder is inactive.');\n        }\n    } else {\n        console.error('No MediaRecorder instance found.');\n    }\n}\n\n// Process audio and send to backend\nexport const processAudioChunk = async (audioBlob) => {\n    if (!(audioBlob instanceof Blob)) {\n        console.error('audioBlob is not a Blob instance.');\n        return;\n    }\n\n    const formData = new FormData();\n    formData.append('audio', audioBlob, 'audio.webm'); // Adjust to match backend expectations\n\n    try {\n        const response = await fetch('http://localhost:3001/transcribe', {\n            method: 'POST',\n            body: formData,\n        });\n\n        if (!response.ok) {\n            throw new Error(`Server error: ${response.status}`);\n        }\n\n        const result = await response.json();\n        console.log('Transcription result:', result);\n    } catch (error) {\n        console.error('Error sending audio to backend:', error);\n    }\n};\n\n// Additional browser support checks\nif (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n    alert('Your browser does not support the necessary APIs for recording.');\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}